
Telemetrons_CloudRobotics2013.elf:     file format elf32-littlemips


Disassembly of section .text:

20000000 <_text>:
   .extern _etext
   .extern _ebss
   .extern Handle_Interrupts

   .set noreorder
		nop
20000000:	00000000 	nop
        j _startup            # Reset vector
20000004:	08000005 	j	20000014 <_startup>
        nop
20000008:	00000000 	nop

        j Handler            # Interrupt vector
2000000c:	080006f2 	j	20001bc8 <Handler>
        nop
20000010:	00000000 	nop

20000014 <_startup>:

   .func   _startup
_startup:                     # Start of code section
/* Set global pointer register */
        la $28, _gp
20000014:	3c1c4000 	lui	gp,0x4000
20000018:	279c01a0 	addiu	gp,gp,416

/* Set the stack pointer */
        la $t0, USR_Stk_Base_Val
2000001c:	3c084000 	lui	t0,0x4000
20000020:	35083e00 	ori	t0,t0,0x3e00
        move $sp, $t0
20000024:	0100e821 	move	sp,t0

        mtc0 $sp, $25         # Save CP0 Status Reg
20000028:	409dc800 	mtc0	sp,$25

/* Fill the stack */
        la $3, Top_Stack - 4
2000002c:	3c034000 	lui	v1,0x4000
20000030:	34633ffc 	ori	v1,v1,0x3ffc
        la $4, Top_Stack -IRQ_Stk -USR_Stk
20000034:	3c044000 	lui	a0,0x4000
20000038:	34843600 	ori	a0,a0,0x3600
        la $5, 0xDEC0ADDE
2000003c:	3c05dec0 	lui	a1,0xdec0
20000040:	34a5adde 	ori	a1,a1,0xadde

20000044 <Stk_fill>:
Stk_fill:
		sw $5, 0($4)
20000044:	ac850000 	sw	a1,0(a0)
		slt $2, $4, $3
20000048:	0083102a 	slt	v0,a0,v1
		bnez $2, Stk_fill
2000004c:	1440fffd 	bnez	v0,20000044 <Stk_fill>
		addiu $4, $4, 4
20000050:	24840004 	addiu	a0,a0,4
/* End of stack-filler */

		/* Special value at the bottom of the interrupt stack */
		la $4, Top_Stack -IRQ_Stk
20000054:	3c044000 	lui	a0,0x4000
20000058:	34843e00 	ori	a0,a0,0x3e00
		la $5, INT_Stk_Val
2000005c:	3c054000 	lui	a1,0x4000
20000060:	24a50134 	addiu	a1,a1,308
		lw $5, 0($5)
20000064:	8ca50000 	lw	a1,0(a1)
		nop
20000068:	00000000 	nop
		sw $5, 0($4)
2000006c:	ac850000 	sw	a1,0(a0)

		/* Special value at the bottom of the user stack */
		la $4, Top_Stack -IRQ_Stk -USR_Stk
20000070:	3c044000 	lui	a0,0x4000
20000074:	34843600 	ori	a0,a0,0x3600
		la $5, USR_Stk_Val
20000078:	3c054000 	lui	a1,0x4000
2000007c:	24a50130 	addiu	a1,a1,304
		lw $5, 0($5)
20000080:	8ca50000 	lw	a1,0(a1)
		nop
20000084:	00000000 	nop
		sw $5, 0($4)
20000088:	ac850000 	sw	a1,0(a0)

        la $4, _etext
2000008c:	3c042000 	lui	a0,0x2000
20000090:	24842e28 	addiu	a0,a0,11816
        la $5, _text
20000094:	3c052000 	lui	a1,0x2000
20000098:	24a50000 	addiu	a1,a1,0
        subu $4, $4, $5
2000009c:	00852023 	subu	a0,a0,a1
        la $5, _edata
200000a0:	3c054000 	lui	a1,0x4000
200000a4:	24a501a0 	addiu	a1,a1,416
        la $6, _data
200000a8:	3c064000 	lui	a2,0x4000
200000ac:	24c60000 	addiu	a2,a2,0

200000b0 <Data_copy>:
Data_copy:
        lw $2, 0($4)
200000b0:	8c820000 	lw	v0,0(a0)
        nop
200000b4:	00000000 	nop
        slt $3, $6, $5
200000b8:	00c5182a 	slt	v1,a2,a1
        sw $2, 0($6)
200000bc:	acc20000 	sw	v0,0(a2)
        addiu $6, $6, 4
200000c0:	24c60004 	addiu	a2,a2,4
        bnez  $3, Data_copy
200000c4:	1460fffa 	bnez	v1,200000b0 <Data_copy>
        addiu $4, $4, 4
200000c8:	24840004 	addiu	a0,a0,4

/* Clear .bss section (Zero init) */
        la $4, _bss   # Clear BSS Segment
200000cc:	3c044000 	lui	a0,0x4000
200000d0:	248401a0 	addiu	a0,a0,416
        la $5, _ebss  # Clear BSS Segment
200000d4:	3c054000 	lui	a1,0x4000
200000d8:	24a509c8 	addiu	a1,a1,2504

200000dc <BSS_clear>:
BSS_clear:
        sw  $0, 0($4)
200000dc:	ac800000 	sw	zero,0(a0)
        slt $3, $4, $5
200000e0:	0085182a 	slt	v1,a0,a1
        bnez  $3, BSS_clear
200000e4:	1460fffd 	bnez	v1,200000dc <BSS_clear>
        addiu $4, $4, 4
200000e8:	24840004 	addiu	a0,a0,4

        la $4, _stext
200000ec:	3c040000 	lui	a0,0x0
200000f0:	24840000 	addiu	a0,a0,0
        la $5, _etext
200000f4:	3c052000 	lui	a1,0x2000
200000f8:	24a52e28 	addiu	a1,a1,11816
        la $6, _text
200000fc:	3c062000 	lui	a2,0x2000
20000100:	24c60000 	addiu	a2,a2,0

20000104 <Code_copy>:
Code_copy:
        lw $2, 0($4)
20000104:	8c820000 	lw	v0,0(a0)
        nop
20000108:	00000000 	nop
        slt $3, $6, $5
2000010c:	00c5182a 	slt	v1,a2,a1
        sw $2, 0($6)
20000110:	acc20000 	sw	v0,0(a2)
        addiu $6, $6, 4
20000114:	24c60004 	addiu	a2,a2,4
        bnez  $3, Code_copy
20000118:	1460fffa 	bnez	v1,20000104 <Code_copy>
        addiu $4, $4, 4
2000011c:	24840004 	addiu	a0,a0,4


/* Enable system interrupts */
        mfc0 $4, $12         # Read CP0 Status Reg
20000120:	40046000 	mfc0	a0,c0_sr
        nop
20000124:	00000000 	nop
        ori $4, $4, 0x700    # Set IE and IRQ = 7
20000128:	34840700 	ori	a0,a0,0x700
        nop
2000012c:	00000000 	nop
        mtc0 $4, $12         # Save CP0 Status Reg
20000130:	40846000 	mtc0	a0,c0_sr
        nop
20000134:	00000000 	nop
        
        la $4, 0xFF00
20000138:	3404ff00 	li	a0,0xff00
        nop
2000013c:	00000000 	nop
        mtc0 $4, $13
20000140:	40846800 	mtc0	a0,c0_cause
        jalr $t0
		nop
#endif

/* Finally, start running the C code - branch to main() */
		la $t0, main
20000144:	3c082000 	lui	t0,0x2000
20000148:	25080160 	addiu	t0,t0,352
        jalr $t0        # Call main()
2000014c:	0100f809 	jalr	t0
        nop
20000150:	00000000 	nop

20000154 <_exit>:

	.global _exit
_exit:                  # Halt if main returns
        b   _exit
20000154:	1000ffff                                ....

20000158 <DEBUG_Assert_Failed>:
 *
 * \param[in]	file	The name of the file where the assertion failed.
 * \param[in]	line	The line number where the assertion failed.
 */
void DEBUG_Assert_Failed(TTE_UNUSED char* file, TTE_UNUSED int line)
{
20000158:	08000056 	j	20000158 <DEBUG_Assert_Failed>
2000015c:	00000000 	nop

20000160 <main>:
 *
 * This function should never exit, as embedded systems do not have an
 * operating system to return to.
 */
int main(void)
{
20000160:	27bdffe8 	addiu	sp,sp,-24
20000164:	afbf0014 	sw	ra,20(sp)
 * @param
 */
TTE_ALWAYS_INLINE
static inline void Target_Mapping_Init(void)
{
	Device_Add(NULL);
20000168:	0c000b69 	jal	20002da4 <Device_Add>
2000016c:	00002021 	move	a0,zero
	return 0;
#endif

	Target_Mapping_Init();

	Scheduler_Init(Config_Tick_Period);
20000170:	0c000836 	jal	200020d8 <Scheduler_Init>
20000174:	240403e8 	li	a0,1000
	Tasks_Init();
20000178:	0c000066 	jal	20000198 <Tasks_Init>
2000017c:	00000000 	nop

	Scheduler_Start();
20000180:	0c00082c 	jal	200020b0 <Scheduler_Start>
20000184:	00000000 	nop

	while (TRUE)
	{
		Scheduler_Dispatch();
20000188:	0c0007ce 	jal	20001f38 <Scheduler_Dispatch>
2000018c:	00000000 	nop
20000190:	08000062 	j	20000188 <main+0x28>
20000194:	00000000 	nop

20000198 <Tasks_Init>:

/**
 * Initialise all hardware for all tasks.
 */
void Tasks_Init(void)
{
20000198:	27bdffe8 	addiu	sp,sp,-24
2000019c:	afbf0014 	sw	ra,20(sp)
	Flashing_LED_Init();
200001a0:	0c000645 	jal	20001914 <Flashing_LED_Init>
200001a4:	00000000 	nop
	System_Control_Init();
200001a8:	0c0000e5 	jal	20000394 <System_Control_Init>
200001ac:	00000000 	nop
	Read_Enc_Init();
200001b0:	0c0001b6 	jal	200006d8 <Read_Enc_Init>
200001b4:	00000000 	nop
	Motor_Right_Init();
200001b8:	0c00030c 	jal	20000c30 <Motor_Right_Init>
200001bc:	00000000 	nop
	Motor_Left_Init();
200001c0:	0c0003c0 	jal	20000f00 <Motor_Left_Init>
200001c4:	00000000 	nop
	Course_Corrector_Init();
200001c8:	0c00067e 	jal	200019f8 <Course_Corrector_Init>
200001cc:	00000000 	nop
	CAN_relay_Init();
200001d0:	0c000698 	jal	20001a60 <CAN_relay_Init>
200001d4:	00000000 	nop
	Message_Sender_Init();
200001d8:	0c000612 	jal	20001848 <Message_Sender_Init>
200001dc:	00000000 	nop
	object_detection_Init();
}
200001e0:	8fbf0014 	lw	ra,20(sp)
	Motor_Right_Init();
	Motor_Left_Init();
	Course_Corrector_Init();
	CAN_relay_Init();
	Message_Sender_Init();
	object_detection_Init();
200001e4:	0800007b 	j	200001ec <object_detection_Init>
200001e8:	27bd0018 	addiu	sp,sp,24

200001ec <object_detection_Init>:
 * Initialisation for the object_detection package.
 * This will be called from Tasks_Init by default.
 */
void object_detection_Init(void)
{
	objectFollower = Fd;
200001ec:	24020001 	li	v0,1
	nextMove = Fd;
200001f0:	af8200f4 	sw	v0,244(gp)
}
200001f4:	03e00008 	jr	ra
200001f8:	af8200f8 	sw	v0,248(gp)

200001fc <object_detection_Update>:
void object_detection_Update(void)
{
	static uint8_t stop = 0;
	Bool detection = False;

	if(movement_G == Stp)
200001fc:	8f8500ec 	lw	a1,236(gp)
20000200:	00000000 	nop
20000204:	14a0000e 	bnez	a1,20000240 <object_detection_Update+0x44>
20000208:	3c024000 	lui	v0,0x4000
	{
		if(++stop >= HAMMER_TIME)
2000020c:	93820000 	lbu	v0,0(gp)
20000210:	00000000 	nop
20000214:	24420001 	addiu	v0,v0,1
20000218:	304200ff 	andi	v0,v0,0xff
2000021c:	2c4300fa 	sltiu	v1,v0,250
20000220:	1460005a 	bnez	v1,2000038c <object_detection_Update+0x190>
20000224:	a3820000 	sb	v0,0(gp)
		{
			WheelCounts_Right_G = 0;
			WheelCounts_Left_G = 0;
			movement_G = nextMove;
20000228:	8f8200f4 	lw	v0,244(gp)

	if(movement_G == Stp)
	{
		if(++stop >= HAMMER_TIME)
		{
			WheelCounts_Right_G = 0;
2000022c:	af8000c8 	sw	zero,200(gp)
			WheelCounts_Left_G = 0;
			movement_G = nextMove;
20000230:	af8200ec 	sw	v0,236(gp)
	if(movement_G == Stp)
	{
		if(++stop >= HAMMER_TIME)
		{
			WheelCounts_Right_G = 0;
			WheelCounts_Left_G = 0;
20000234:	af800088 	sw	zero,136(gp)
			movement_G = nextMove;
			stop = 0;
20000238:	03e00008 	jr	ra
2000023c:	a3800000 	sb	zero,0(gp)
		}
	}
	else
	{
		if((sensorReadings.IRLeft-sensorReadings.IRRight > IR_NOISE)||(sensorReadings.IRRight-sensorReadings.IRLeft > IR_NOISE))
20000240:	244403d4 	addiu	a0,v0,980
20000244:	8c4303d4 	lw	v1,980(v0)
20000248:	8c820004 	lw	v0,4(a0)
2000024c:	00000000 	nop
20000250:	00623023 	subu	a2,v1,v0
20000254:	2cc60003 	sltiu	a2,a2,3
20000258:	10c00004 	beqz	a2,2000026c <object_detection_Update+0x70>
2000025c:	00433023 	subu	a2,v0,v1
20000260:	2cc60003 	sltiu	a2,a2,3
20000264:	14c0001d 	bnez	a2,200002dc <object_detection_Update+0xe0>
20000268:	00000000 	nop
		{
			if((sensorReadings.IRLeft < sensorReadings.IRRight) && ((sensorReadings.IRLeft < IR_MIN)||((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > US_NOISE))))
2000026c:	0062202b 	sltu	a0,v1,v0
20000270:	1080000c 	beqz	a0,200002a4 <object_detection_Update+0xa8>
20000274:	0043202b 	sltu	a0,v0,v1
20000278:	2c640015 	sltiu	a0,v1,21
2000027c:	14800007 	bnez	a0,2000029c <object_detection_Update+0xa0>
20000280:	3c044000 	lui	a0,0x4000
20000284:	8c8403dc 	lw	a0,988(a0)
20000288:	00000000 	nop
2000028c:	2484fff0 	addiu	a0,a0,-16
20000290:	2c840009 	sltiu	a0,a0,9
20000294:	10800003 	beqz	a0,200002a4 <object_detection_Update+0xa8>
20000298:	0043202b 	sltu	a0,v0,v1
				detection = True;
//				if(movement_G != Rt)
//				{
//					movement_G = Stp;
//				}
				movement_G = Rt;
2000029c:	080000b5 	j	200002d4 <object_detection_Update+0xd8>
200002a0:	24020004 	li	v0,4
				objectFollower = Rt;
			}
			else if((sensorReadings.IRLeft > sensorReadings.IRRight) && ((sensorReadings.IRRight < IR_MIN)||((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > US_NOISE))))
200002a4:	1080001c 	beqz	a0,20000318 <object_detection_Update+0x11c>
200002a8:	24040001 	li	a0,1
200002ac:	2c440015 	sltiu	a0,v0,21
200002b0:	14800007 	bnez	a0,200002d0 <object_detection_Update+0xd4>
200002b4:	3c044000 	lui	a0,0x4000
200002b8:	8c8403dc 	lw	a0,988(a0)
200002bc:	00000000 	nop
200002c0:	2484fff0 	addiu	a0,a0,-16
200002c4:	2c840009 	sltiu	a0,a0,9
200002c8:	10800013 	beqz	a0,20000318 <object_detection_Update+0x11c>
200002cc:	24040001 	li	a0,1
				detection = True;
//				if(movement_G != Lf)
//				{
//					movement_G = Stp;
//				}
				movement_G = Lf;
200002d0:	24020003 	li	v0,3
				objectFollower = Lf;
200002d4:	080000c3 	j	2000030c <object_detection_Update+0x110>
200002d8:	af8200f8 	sw	v0,248(gp)
			}
		}
		else if((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > US_NOISE))
200002dc:	8c840008 	lw	a0,8(a0)
200002e0:	00000000 	nop
200002e4:	2484fff0 	addiu	a0,a0,-16
200002e8:	2c840009 	sltiu	a0,a0,9
200002ec:	10800009 	beqz	a0,20000314 <object_detection_Update+0x118>
200002f0:	00000000 	nop
		{
			detection = True;
			if(objectFollower == Fd)
200002f4:	8f8300f8 	lw	v1,248(gp)
200002f8:	24020001 	li	v0,1
200002fc:	14620002 	bne	v1,v0,20000308 <object_detection_Update+0x10c>
20000300:	24020003 	li	v0,3
			{
				objectFollower = Lf;
20000304:	af8200f8 	sw	v0,248(gp)
//			if(movement_G != objectFollower)
//			{
//				movement_G = Stp;
//			}

			movement_G = objectFollower;
20000308:	8f8200f8 	lw	v0,248(gp)
2000030c:	03e00008 	jr	ra
20000310:	af8200ec 	sw	v0,236(gp)
		}

		if((detection == False)&&(movement_G != Fd)&&(nextMove == Fd))
20000314:	24040001 	li	a0,1
20000318:	10a40007 	beq	a1,a0,20000338 <object_detection_Update+0x13c>
2000031c:	00000000 	nop
20000320:	8f8500f4 	lw	a1,244(gp)
20000324:	00000000 	nop
20000328:	14a40003 	bne	a1,a0,20000338 <object_detection_Update+0x13c>
2000032c:	00000000 	nop
20000330:	03e00008 	jr	ra
20000334:	af8000ec 	sw	zero,236(gp)
		{
			movement_G = Stp;
		}
		else if(detection == False)
		{
			switch(objectFollower)
20000338:	8f8500f8 	lw	a1,248(gp)
2000033c:	24040003 	li	a0,3
20000340:	10a40009 	beq	a1,a0,20000368 <object_detection_Update+0x16c>
20000344:	2c42001c 	sltiu	v0,v0,28
20000348:	24020004 	li	v0,4
2000034c:	14a2000d 	bne	a1,v0,20000384 <object_detection_Update+0x188>
20000350:	2c63001c 	sltiu	v1,v1,28
			{
			case Rt:
				if(sensorReadings.IRLeft > IR_MAX)
20000354:	14600008 	bnez	v1,20000378 <object_detection_Update+0x17c>
20000358:	00000000 	nop
//					if(movement_G != Lf)
//					{
//						movement_G = Stp;
//					}
					nextMove = Lf;
					movement_G = Lf;
2000035c:	af8400ec 	sw	a0,236(gp)
					detection = True;
//					if(movement_G != Lf)
//					{
//						movement_G = Stp;
//					}
					nextMove = Lf;
20000360:	03e00008 	jr	ra
20000364:	af8400f4 	sw	a0,244(gp)
					nextMove = Fd;
				}
				break;

			case Lf:
				if(sensorReadings.IRRight > IR_MAX)
20000368:	14400003 	bnez	v0,20000378 <object_detection_Update+0x17c>
2000036c:	24020004 	li	v0,4
//					if(movement_G != Rt)
//					{
//						movement_G = Stp;
//					}
					nextMove = Rt;
					movement_G = Rt;
20000370:	080000df 	j	2000037c <object_detection_Update+0x180>
20000374:	af8200ec 	sw	v0,236(gp)
				}
				else
				{
					nextMove = Fd;
20000378:	24020001 	li	v0,1
2000037c:	03e00008 	jr	ra
20000380:	af8200f4 	sw	v0,244(gp)
				}
				break;
			default:
				nextMove = Fd;
20000384:	24020001 	li	v0,1
20000388:	af8200f4 	sw	v0,244(gp)
2000038c:	03e00008 	jr	ra
20000390:	00000000 	nop

20000394 <System_Control_Init>:
 * This will be called from Tasks_Init by default.
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
20000394:	3c028000 	lui	v0,0x8000
20000398:	34430500 	ori	v1,v0,0x500
2000039c:	8c650004 	lw	a1,4(v1)
200003a0:	2404fffe 	li	a0,-2
200003a4:	00a42024 	and	a0,a1,a0
200003a8:	ac640004 	sw	a0,4(v1)
200003ac:	8c640004 	lw	a0,4(v1)
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
200003b0:	34420200 	ori	v0,v0,0x200
 * This will be called from Tasks_Init by default.
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
200003b4:	ac640004 	sw	a0,4(v1)
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);
200003b8:	8c650004 	lw	a1,4(v1)
200003bc:	2404fffd 	li	a0,-3
200003c0:	00a42024 	and	a0,a1,a0
200003c4:	ac640004 	sw	a0,4(v1)
200003c8:	8c650004 	lw	a1,4(v1)

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
200003cc:	2404feff 	li	a0,-257
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);
200003d0:	ac650004 	sw	a1,4(v1)

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
200003d4:	8c450004 	lw	a1,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
200003d8:	2406ffbf 	li	a2,-65
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
200003dc:	00a42824 	and	a1,a1,a0
200003e0:	ac450004 	sw	a1,4(v0)
200003e4:	8c470004 	lw	a3,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
200003e8:	2405ff7f 	li	a1,-129
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
200003ec:	34e70100 	ori	a3,a3,0x100
200003f0:	ac470004 	sw	a3,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);
200003f4:	8c470000 	lw	a3,0(v0)
200003f8:	00000000 	nop
200003fc:	00e42024 	and	a0,a3,a0
20000400:	ac440000 	sw	a0,0(v0)
20000404:	8c440000 	lw	a0,0(v0)
20000408:	00000000 	nop
2000040c:	ac440000 	sw	a0,0(v0)

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
20000410:	8c470004 	lw	a3,4(v0)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
20000414:	3c040080 	lui	a0,0x80
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
20000418:	00e63824 	and	a3,a3,a2
2000041c:	ac470004 	sw	a3,4(v0)
20000420:	8c470004 	lw	a3,4(v0)
20000424:	00000000 	nop
20000428:	34e70040 	ori	a3,a3,0x40
2000042c:	ac470004 	sw	a3,4(v0)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
20000430:	8c470000 	lw	a3,0(v0)
20000434:	00000000 	nop
20000438:	00e63024 	and	a2,a3,a2
2000043c:	ac460000 	sw	a2,0(v0)
20000440:	8c460000 	lw	a2,0(v0)
20000444:	00000000 	nop
20000448:	ac460000 	sw	a2,0(v0)

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
2000044c:	8c460004 	lw	a2,4(v0)
20000450:	00000000 	nop
20000454:	00c53024 	and	a2,a2,a1
20000458:	ac460004 	sw	a2,4(v0)
2000045c:	8c460004 	lw	a2,4(v0)
20000460:	00000000 	nop
20000464:	34c60080 	ori	a2,a2,0x80
20000468:	ac460004 	sw	a2,4(v0)
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
2000046c:	8c460000 	lw	a2,0(v0)
20000470:	00000000 	nop
20000474:	00c52824 	and	a1,a2,a1
20000478:	ac450000 	sw	a1,0(v0)
2000047c:	8c450000 	lw	a1,0(v0)
20000480:	00000000 	nop
20000484:	ac450000 	sw	a1,0(v0)

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
20000488:	8c650004 	lw	a1,4(v1)
2000048c:	3c02ff7f 	lui	v0,0xff7f
20000490:	3442ffff 	ori	v0,v0,0xffff
20000494:	00a21024 	and	v0,a1,v0
20000498:	ac620004 	sw	v0,4(v1)
2000049c:	8c620004 	lw	v0,4(v1)
	GPIO_Write(KILL_ALL, GPIO_HIGH);

	/* State and orientation initialisation */
	System_Mode_G = Ready;
200004a0:	af8000fc 	sw	zero,252(gp)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
200004a4:	00441025 	or	v0,v0,a0
200004a8:	ac620004 	sw	v0,4(v1)
	GPIO_Write(KILL_ALL, GPIO_HIGH);
200004ac:	8c620000 	lw	v0,0(v1)

	/* State and orientation initialisation */
	System_Mode_G = Ready;
	debounce = 0;
200004b0:	a3800100 	sb	zero,256(gp)

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
	GPIO_Write(KILL_ALL, GPIO_HIGH);
200004b4:	ac620000 	sw	v0,0(v1)
200004b8:	8c620000 	lw	v0,0(v1)
200004bc:	00000000 	nop
200004c0:	00442025 	or	a0,v0,a0
200004c4:	ac640000 	sw	a0,0(v1)

	/* State and orientation initialisation */
	System_Mode_G = Ready;
	debounce = 0;
}
200004c8:	03e00008 	jr	ra
200004cc:	00000000 	nop

200004d0 <System_Control_Update>:
/**
 * Main system mode control
 */
void System_Control_Update(void)
{
	switch(System_Mode_G)
200004d0:	8f8200fc 	lw	v0,252(gp)
200004d4:	24030002 	li	v1,2
200004d8:	10430027 	beq	v0,v1,20000578 <System_Control_Update+0xa8>
200004dc:	2c440003 	sltiu	a0,v0,3
200004e0:	10800007 	beqz	a0,20000500 <System_Control_Update+0x30>
200004e4:	00000000 	nop
200004e8:	1040000d 	beqz	v0,20000520 <System_Control_Update+0x50>
200004ec:	24040001 	li	a0,1
200004f0:	1444005f 	bne	v0,a0,20000670 <System_Control_Update+0x1a0>
200004f4:	3c028000 	lui	v0,0x8000
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
200004f8:	0800014b 	j	2000052c <System_Control_Update+0x5c>
200004fc:	34420500 	ori	v0,v0,0x500
/**
 * Main system mode control
 */
void System_Control_Update(void)
{
	switch(System_Mode_G)
20000500:	24030003 	li	v1,3
20000504:	10430024 	beq	v0,v1,20000598 <System_Control_Update+0xc8>
20000508:	00000000 	nop
2000050c:	24030004 	li	v1,4
20000510:	14430057 	bne	v0,v1,20000670 <System_Control_Update+0x1a0>
20000514:	3c028000 	lui	v0,0x8000
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000518:	08000184 	j	20000610 <System_Control_Update+0x140>
2000051c:	34430500 	ori	v1,v0,0x500
{
	switch(System_Mode_G)
	{
	/* Wait for pull cord to determine direction */
	case Ready:
		movement_G = Fd;
20000520:	24020001 	li	v0,1
20000524:	0800015c 	j	20000570 <System_Control_Update+0xa0>
20000528:	af8200ec 	sw	v0,236(gp)
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
2000052c:	8c440000 	lw	a0,0(v0)
20000530:	00000000 	nop
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
20000534:	30840001 	andi	a0,a0,0x1
20000538:	10800065 	beqz	a0,200006d0 <System_Control_Update+0x200>
2000053c:	00000000 	nop
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
				&&
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
20000540:	8c420000 	lw	v0,0(v0)
20000544:	00000000 	nop
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
20000548:	30420002 	andi	v0,v0,0x2
2000054c:	10400060 	beqz	v0,200006d0 <System_Control_Update+0x200>
20000550:	00000000 	nop
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
				&&
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
				&&
				(++debounce > 100)
20000554:	93820100 	lbu	v0,256(gp)
20000558:	00000000 	nop
2000055c:	24420001 	addiu	v0,v0,1
20000560:	304200ff 	andi	v0,v0,0xff
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
20000564:	2c440065 	sltiu	a0,v0,101
20000568:	1480003f 	bnez	a0,20000668 <System_Control_Update+0x198>
2000056c:	a3820100 	sb	v0,256(gp)
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
				&&
				(++debounce > 100)
		)
		{
			System_Mode_G = Go;
20000570:	03e00008 	jr	ra
20000574:	af8300fc 	sw	v1,252(gp)
		}
		break;

	/* Do nothing */
	case Go:
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000578:	3c028000 	lui	v0,0x8000
2000057c:	34420200 	ori	v0,v0,0x200
20000580:	8c430000 	lw	v1,0(v0)
		debounce = 0;
20000584:	a3800100 	sb	zero,256(gp)
		}
		break;

	/* Do nothing */
	case Go:
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000588:	ac430000 	sw	v1,0(v0)
2000058c:	8c430000 	lw	v1,0(v0)
20000590:	08000199 	j	20000664 <System_Control_Update+0x194>
20000594:	34630040 	ori	v1,v1,0x40
		debounce = 0;
		break;

	/* Signal E Stop */
	case E_Stop:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000598:	3c028000 	lui	v0,0x8000
2000059c:	34430500 	ori	v1,v0,0x500
200005a0:	8c650000 	lw	a1,0(v1)
200005a4:	3c04ff7f 	lui	a0,0xff7f
200005a8:	3484ffff 	ori	a0,a0,0xffff
200005ac:	00a42024 	and	a0,a1,a0
200005b0:	ac640000 	sw	a0,0(v1)
200005b4:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Error_Lamp, GPIO_HIGH);
200005b8:	34420200 	ori	v0,v0,0x200
		debounce = 0;
		break;

	/* Signal E Stop */
	case E_Stop:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200005bc:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Error_Lamp, GPIO_HIGH);
200005c0:	8c430000 	lw	v1,0(v0)
200005c4:	00000000 	nop
200005c8:	ac430000 	sw	v1,0(v0)
200005cc:	8c430000 	lw	v1,0(v0)
200005d0:	00000000 	nop
200005d4:	34630100 	ori	v1,v1,0x100
200005d8:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
200005dc:	8c430000 	lw	v1,0(v0)
200005e0:	00000000 	nop
200005e4:	ac430000 	sw	v1,0(v0)
200005e8:	8c430000 	lw	v1,0(v0)
200005ec:	00000000 	nop
200005f0:	34630040 	ori	v1,v1,0x40
200005f4:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
200005f8:	8c430000 	lw	v1,0(v0)
200005fc:	00000000 	nop
20000600:	ac430000 	sw	v1,0(v0)
20000604:	8c430000 	lw	v1,0(v0)
20000608:	08000199 	j	20000664 <System_Control_Update+0x194>
2000060c:	34630080 	ori	v1,v1,0x80
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000610:	8c650000 	lw	a1,0(v1)
20000614:	3c04ff7f 	lui	a0,0xff7f
20000618:	3484ffff 	ori	a0,a0,0xffff
2000061c:	00a42024 	and	a0,a1,a0
20000620:	ac640000 	sw	a0,0(v1)
20000624:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
20000628:	34420200 	ori	v0,v0,0x200
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
2000062c:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
20000630:	8c440000 	lw	a0,0(v0)
20000634:	2403ffbf 	li	v1,-65
20000638:	00831824 	and	v1,a0,v1
2000063c:	ac430000 	sw	v1,0(v0)
20000640:	8c430000 	lw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
		System_Mode_G = Ready; // TODO: Remove!
20000644:	af8000fc 	sw	zero,252(gp)

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
20000648:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
2000064c:	8c440000 	lw	a0,0(v0)
20000650:	2403ff7f 	li	v1,-129
20000654:	00831824 	and	v1,a0,v1
20000658:	ac430000 	sw	v1,0(v0)
2000065c:	8c430000 	lw	v1,0(v0)
20000660:	00000000 	nop
20000664:	ac430000 	sw	v1,0(v0)
		System_Mode_G = Ready; // TODO: Remove!
		break;
20000668:	03e00008 	jr	ra
2000066c:	00000000 	nop

	default:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000670:	3c028000 	lui	v0,0x8000
20000674:	34430500 	ori	v1,v0,0x500
20000678:	8c650000 	lw	a1,0(v1)
2000067c:	3c04ff7f 	lui	a0,0xff7f
20000680:	3484ffff 	ori	a0,a0,0xffff
20000684:	00a42024 	and	a0,a1,a0
20000688:	ac640000 	sw	a0,0(v1)
2000068c:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000690:	34420200 	ori	v0,v0,0x200
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
		System_Mode_G = Ready; // TODO: Remove!
		break;

	default:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000694:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000698:	8c430000 	lw	v1,0(v0)
2000069c:	00000000 	nop
200006a0:	ac430000 	sw	v1,0(v0)
200006a4:	8c430000 	lw	v1,0(v0)
200006a8:	00000000 	nop
200006ac:	34630040 	ori	v1,v1,0x40
200006b0:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
200006b4:	8c430000 	lw	v1,0(v0)
200006b8:	00000000 	nop
200006bc:	ac430000 	sw	v1,0(v0)
200006c0:	8c430000 	lw	v1,0(v0)
200006c4:	00000000 	nop
200006c8:	34630080 	ori	v1,v1,0x80
200006cc:	ac430000 	sw	v1,0(v0)
200006d0:	03e00008 	jr	ra
200006d4:	00000000 	nop

200006d8 <Read_Enc_Init>:
 * Initialisation for the Read_Enc package.
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
200006d8:	3c028000 	lui	v0,0x8000
200006dc:	34420500 	ori	v0,v0,0x500
200006e0:	8c440004 	lw	a0,4(v0)
200006e4:	2403fbff 	li	v1,-1025
200006e8:	00831824 	and	v1,a0,v1
200006ec:	ac430004 	sw	v1,4(v0)
200006f0:	8c430004 	lw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
200006f4:	af80010c 	sw	zero,268(gp)
 * Initialisation for the Read_Enc package.
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
200006f8:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
200006fc:	8c440004 	lw	a0,4(v0)
20000700:	2403f7ff 	li	v1,-2049
20000704:	00831824 	and	v1,a0,v1
20000708:	ac430004 	sw	v1,4(v0)
2000070c:	8c430004 	lw	v1,4(v0)

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */
20000710:	af80011c 	sw	zero,284(gp)
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
20000714:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
20000718:	8c440004 	lw	a0,4(v0)
2000071c:	3c03fff7 	lui	v1,0xfff7
20000720:	3463ffff 	ori	v1,v1,0xffff
20000724:	00831824 	and	v1,a0,v1
20000728:	ac430004 	sw	v1,4(v0)
2000072c:	8c430004 	lw	v1,4(v0)
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
20000730:	af800110 	sw	zero,272(gp)
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
20000734:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
20000738:	8c440004 	lw	a0,4(v0)
2000073c:	3c03fffb 	lui	v1,0xfffb
20000740:	3463ffff 	ori	v1,v1,0xffff
20000744:	00831824 	and	v1,a0,v1

	WheelCounts_Left_G = 0;
20000748:	af800088 	sw	zero,136(gp)
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
2000074c:	ac430004 	sw	v1,4(v0)
20000750:	8c430004 	lw	v1,4(v0)

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
	EncSignal_B[1] = 0;								/* Signal B from right encoder */
20000754:	af800120 	sw	zero,288(gp)
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;
20000758:	af8000c8 	sw	zero,200(gp)
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
2000075c:	ac430004 	sw	v1,4(v0)

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
	EncSignal_B[1] = 0;								/* Signal B from right encoder */

	/* Left */
	RevCount[0] = 0;
20000760:	af800114 	sw	zero,276(gp)
	EncoderCount[0] = 0;
20000764:	af800124 	sw	zero,292(gp)
	WheelCount[0] = 0;
20000768:	af800104 	sw	zero,260(gp)

	/* Right */
	RevCount[1] = 0;
2000076c:	af800118 	sw	zero,280(gp)
	EncoderCount[1] = 0;
20000770:	af800128 	sw	zero,296(gp)
	WheelCount[1] = 0;
20000774:	af800108 	sw	zero,264(gp)

	bufferTime = 0;
}
20000778:	03e00008 	jr	ra
2000077c:	a380012c 	sb	zero,300(gp)

20000780 <Read_Enc_Update>:
/**
 * Reads the value of the Encoders
 */
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
20000780:	8f8300fc 	lw	v1,252(gp)
20000784:	24020002 	li	v0,2
20000788:	1462005d 	bne	v1,v0,20000900 <Read_Enc_Update+0x180>
2000078c:	3c028000 	lui	v0,0x8000
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
20000790:	34420500 	ori	v0,v0,0x500
20000794:	8c450000 	lw	a1,0(v0)
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000798:	8c440000 	lw	a0,0(v0)

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
2000079c:	8c430000 	lw	v1,0(v0)
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
200007a0:	8c420000 	lw	v0,0(v0)
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
200007a4:	00052a82 	srl	a1,a1,0xa
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
200007a8:	000422c2 	srl	a0,a0,0xb

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
200007ac:	00031cc2 	srl	v1,v1,0x13
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
200007b0:	00021482 	srl	v0,v0,0x12
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
200007b4:	30a50001 	andi	a1,a1,0x1
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
200007b8:	30840001 	andi	a0,a0,0x1

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
200007bc:	30630001 	andi	v1,v1,0x1
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
200007c0:	30420001 	andi	v0,v0,0x1
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
200007c4:	af85010c 	sw	a1,268(gp)
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
200007c8:	af84011c 	sw	a0,284(gp)

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
200007cc:	af830110 	sw	v1,272(gp)
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
200007d0:	af820120 	sw	v0,288(gp)
200007d4:	27840138 	addiu	a0,gp,312
200007d8:	27830124 	addiu	v1,gp,292
200007dc:	27860130 	addiu	a2,gp,304
200007e0:	2789010c 	addiu	t1,gp,268
200007e4:	2788011c 	addiu	t0,gp,284
200007e8:	00002821 	move	a1,zero

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
		{
			if(Pulse_Flag[i] == High)
200007ec:	24020001 	li	v0,1
				}

				/* Full cycle detection when both signals dropped off */
				else if((EncSignal_A[i] == Low) && (EncSignal_B[i] == Low))
				{
					switch(WheelDirection[i])
200007f0:	240a0002 	li	t2,2
				WheelDirection[i] = WheelDirection[i];
				Pulse_Flag[i] = Pulse_Flag[i];
			}

			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
200007f4:	278e0104 	addiu	t6,gp,260
200007f8:	278d0114 	addiu	t5,gp,276

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
200007fc:	240c0008 	li	t4,8
		{
			if(Pulse_Flag[i] == High)
20000800:	8c8b0000 	lw	t3,0(a0)
20000804:	8d270000 	lw	a3,0(t1)
20000808:	15620020 	bne	t3,v0,2000088c <Read_Enc_Update+0x10c>
2000080c:	00000000 	nop
			{
				/* Direction detection on single signal drop-off */
				if(EncSignal_A[i] != EncSignal_B[i])
20000810:	8d0b0000 	lw	t3,0(t0)
20000814:	00000000 	nop
20000818:	10eb0009 	beq	a3,t3,20000840 <Read_Enc_Update+0xc0>
2000081c:	00000000 	nop
				{
					switch(EncSignal_A[i])
20000820:	10e00005 	beqz	a3,20000838 <Read_Enc_Update+0xb8>
20000824:	00000000 	nop
20000828:	14e20022 	bne	a3,v0,200008b4 <Read_Enc_Update+0x134>
2000082c:	00ad3821 	addu	a3,a1,t5
					{
						case High:
							WheelDirection[i] = Reverse;
							break;
20000830:	0800022d 	j	200008b4 <Read_Enc_Update+0x134>
20000834:	acca0000 	sw	t2,0(a2)
						case Low:
							WheelDirection[i] = Forwards;
20000838:	0800022c 	j	200008b0 <Read_Enc_Update+0x130>
2000083c:	acc20000 	sw	v0,0(a2)
							break;
					}
				}

				/* Full cycle detection when both signals dropped off */
				else if((EncSignal_A[i] == Low) && (EncSignal_B[i] == Low))
20000840:	14e0001c 	bnez	a3,200008b4 <Read_Enc_Update+0x134>
20000844:	00ad3821 	addu	a3,a1,t5
				{
					switch(WheelDirection[i])
20000848:	8cc70000 	lw	a3,0(a2)
2000084c:	00000000 	nop
20000850:	10e20005 	beq	a3,v0,20000868 <Read_Enc_Update+0xe8>
20000854:	00000000 	nop
20000858:	14ea000a 	bne	a3,t2,20000884 <Read_Enc_Update+0x104>
2000085c:	00000000 	nop
20000860:	0800021d 	j	20000874 <Read_Enc_Update+0xf4>
20000864:	00000000 	nop
					{
						case Forwards:
							EncoderCount[i] ++;
20000868:	8c670000 	lw	a3,0(v1)
2000086c:	08000220 	j	20000880 <Read_Enc_Update+0x100>
20000870:	24e70001 	addiu	a3,a3,1
							break;
						case Reverse:
							EncoderCount[i] --;
20000874:	8c670000 	lw	a3,0(v1)
20000878:	00000000 	nop
2000087c:	24e7ffff 	addiu	a3,a3,-1
20000880:	ac670000 	sw	a3,0(v1)
						case Off:
							break;
						default:
							break;
					}
					Pulse_Flag[i] = Low;
20000884:	0800022c 	j	200008b0 <Read_Enc_Update+0x130>
20000888:	ac800000 	sw	zero,0(a0)
				}
			}
			/* Wait for both A and B to be high to raise Pulse_Flag */
			else if((EncSignal_A[i] == High) && (EncSignal_B[i] == High))
2000088c:	14e20007 	bne	a3,v0,200008ac <Read_Enc_Update+0x12c>
20000890:	00000000 	nop
20000894:	8d070000 	lw	a3,0(t0)
20000898:	00000000 	nop
2000089c:	14e20003 	bne	a3,v0,200008ac <Read_Enc_Update+0x12c>
200008a0:	00000000 	nop
200008a4:	0800022c 	j	200008b0 <Read_Enc_Update+0x130>
200008a8:	ac820000 	sw	v0,0(a0)
			/* ET Padding to reduce jitter */
			else
			{
				EncoderCount[i] = EncoderCount[i];
				WheelDirection[i] = WheelDirection[i];
				Pulse_Flag[i] = Pulse_Flag[i];
200008ac:	ac8b0000 	sw	t3,0(a0)
			}

			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
200008b0:	00ad3821 	addu	a3,a1,t5
200008b4:	8ceb0000 	lw	t3,0(a3)
200008b8:	8c670000 	lw	a3,0(v1)
200008bc:	000b59c0 	sll	t3,t3,0x7
200008c0:	01675821 	addu	t3,t3,a3
200008c4:	00ae3821 	addu	a3,a1,t6
200008c8:	24a50004 	addiu	a1,a1,4
200008cc:	aceb0000 	sw	t3,0(a3)
200008d0:	24840004 	addiu	a0,a0,4
200008d4:	24630004 	addiu	v1,v1,4
200008d8:	24c60004 	addiu	a2,a2,4
200008dc:	25290004 	addiu	t1,t1,4

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
200008e0:	14acffc7 	bne	a1,t4,20000800 <Read_Enc_Update+0x80>
200008e4:	25080004 	addiu	t0,t0,4
			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
		}

		/* Output distance wheels have travelled to global variable */
		WheelCounts_Left_G = WheelCount[0];
200008e8:	8f820104 	lw	v0,260(gp)
200008ec:	00000000 	nop
200008f0:	af820088 	sw	v0,136(gp)
		WheelCounts_Right_G = WheelCount[1];
200008f4:	8f820108 	lw	v0,264(gp)
200008f8:	03e00008 	jr	ra
200008fc:	af8200c8 	sw	v0,200(gp)
	}
	else
	{
		WheelCount[0] = 0;
20000900:	af800104 	sw	zero,260(gp)
		WheelCount[1] = 0;
20000904:	03e00008 	jr	ra
20000908:	af800108 	sw	zero,264(gp)

2000090c <speedControlRight>:

uint16_t speedControlRight(Bool correctionL, Bool correctionR)
{
	static uint16_t speed;

	if(Right_motor_speed_G == 0)
2000090c:	978200b2 	lhu	v0,178(gp)
20000910:	00000000 	nop
20000914:	14400002 	bnez	v0,20000920 <speedControlRight+0x14>
20000918:	2402000c 	li	v0,12
	{
		Right_motor_speed_G = CRAWL_SPEED;
2000091c:	a78200b2 	sh	v0,178(gp)
	}

	if((correctionL == False) && (correctionR == True))
20000920:	14800006 	bnez	a0,2000093c <speedControlRight+0x30>
20000924:	24020001 	li	v0,1
20000928:	14a2000c 	bne	a1,v0,2000095c <speedControlRight+0x50>
2000092c:	00000000 	nop
	{
		Right_motor_speed_G++;
20000930:	978200b2 	lhu	v0,178(gp)
20000934:	08000256 	j	20000958 <speedControlRight+0x4c>
20000938:	24420001 	addiu	v0,v0,1
	}
	else if((correctionL == True) && (correctionR == False))
2000093c:	14820007 	bne	a0,v0,2000095c <speedControlRight+0x50>
20000940:	00000000 	nop
20000944:	14a00005 	bnez	a1,2000095c <speedControlRight+0x50>
20000948:	00000000 	nop
	{
		Right_motor_speed_G--;
2000094c:	978200b2 	lhu	v0,178(gp)
20000950:	00000000 	nop
20000954:	2442ffff 	addiu	v0,v0,-1
20000958:	a78200b2 	sh	v0,178(gp)
	}

	if(Right_motor_speed_G < (CRAWL_SPEED - CORRECTION_VALUE_LOWER))
2000095c:	978200b2 	lhu	v0,178(gp)
20000960:	00000000 	nop
20000964:	2c42000c 	sltiu	v0,v0,12
20000968:	10400002 	beqz	v0,20000974 <speedControlRight+0x68>
2000096c:	2402000c 	li	v0,12
	{
		Right_motor_speed_G = (CRAWL_SPEED - CORRECTION_VALUE_LOWER);
20000970:	a78200b2 	sh	v0,178(gp)
	}

	if(Right_motor_speed_G > (CRAWL_SPEED + CORRECTION_VALUE_UPPER))
20000974:	978200b2 	lhu	v0,178(gp)
20000978:	00000000 	nop
2000097c:	2c42000f 	sltiu	v0,v0,15
20000980:	14400003 	bnez	v0,20000990 <speedControlRight+0x84>
20000984:	00000000 	nop
	{
		Right_motor_speed_G = CRAWL_SPEED + CORRECTION_VALUE_UPPER;
20000988:	2402000e 	li	v0,14
2000098c:	a78200b2 	sh	v0,178(gp)
	}

	return speed;
}
20000990:	03e00008 	jr	ra
20000994:	00001021 	move	v0,zero

20000998 <visualsRt>:
	return result;
}

void visualsRt(void)
{
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000998:	8f8200fc 	lw	v0,252(gp)
	result = (uint16_t)(speed);
	return result;
}

void visualsRt(void)
{
2000099c:	27bdffe0 	addiu	sp,sp,-32
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
200009a0:	24030002 	li	v1,2
	result = (uint16_t)(speed);
	return result;
}

void visualsRt(void)
{
200009a4:	afbf001c 	sw	ra,28(sp)
200009a8:	afb10018 	sw	s1,24(sp)
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
200009ac:	10430004 	beq	v0,v1,200009c0 <visualsRt+0x28>
200009b0:	afb00014 	sw	s0,20(sp)
200009b4:	24030004 	li	v1,4
200009b8:	14430009 	bne	v0,v1,200009e0 <visualsRt+0x48>
200009bc:	00000000 	nop
	{
		Segment_Set_Decimal(displayA);
200009c0:	8f84ffdc 	lw	a0,-36(gp)
200009c4:	0c000af2 	jal	20002bc8 <Segment_Set_Decimal>
200009c8:	00000000 	nop
		Segment_Set_Decimal(displayB);
200009cc:	8f84ffe0 	lw	a0,-32(gp)
200009d0:	0c000af2 	jal	20002bc8 <Segment_Set_Decimal>
200009d4:	00000000 	nop
	return result;
}

void visualsRt(void)
{
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
200009d8:	0800027e 	j	200009f8 <visualsRt+0x60>
200009dc:	00000000 	nop
		Segment_Set_Decimal(displayA);
		Segment_Set_Decimal(displayB);
	}
	else
	{
		Segment_Clear_Decimal(displayA);
200009e0:	8f84ffdc 	lw	a0,-36(gp)
200009e4:	0c000acc 	jal	20002b30 <Segment_Clear_Decimal>
200009e8:	00000000 	nop
		Segment_Clear_Decimal(displayB);
200009ec:	8f84ffe0 	lw	a0,-32(gp)
200009f0:	0c000acc 	jal	20002b30 <Segment_Clear_Decimal>
200009f4:	00000000 	nop
	}

	if(
		Right_motor_direction_G == Forwards
		&& Right_motor_speed_G != 0
200009f8:	8f830084 	lw	v1,132(gp)
	{
		Segment_Clear_Decimal(displayA);
		Segment_Clear_Decimal(displayB);
	}

	if(
200009fc:	24020001 	li	v0,1
20000a00:	1462000f 	bne	v1,v0,20000a40 <visualsRt+0xa8>
20000a04:	3c028000 	lui	v0,0x8000
20000a08:	978200b2 	lhu	v0,178(gp)
20000a0c:	00000000 	nop
20000a10:	1040000b 	beqz	v0,20000a40 <visualsRt+0xa8>
20000a14:	3c028000 	lui	v0,0x8000
		Right_motor_direction_G == Forwards
		&& Right_motor_speed_G != 0
		)
	{
		GPIO_Write(LED_Pin_RtFd, GPIO_HIGH);
20000a18:	34420200 	ori	v0,v0,0x200
20000a1c:	8c430000 	lw	v1,0(v0)
20000a20:	00000000 	nop
20000a24:	ac430000 	sw	v1,0(v0)
20000a28:	8c430000 	lw	v1,0(v0)
20000a2c:	00000000 	nop
20000a30:	34630002 	ori	v1,v1,0x2
20000a34:	ac430000 	sw	v1,0(v0)
20000a38:	0800029f 	j	20000a7c <visualsRt+0xe4>
20000a3c:	00000000 	nop
	}
	else
	{
		GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000a40:	34420200 	ori	v0,v0,0x200
20000a44:	8c450000 	lw	a1,0(v0)
20000a48:	2404fffd 	li	a0,-3
20000a4c:	00a42024 	and	a0,a1,a0
20000a50:	ac440000 	sw	a0,0(v0)
20000a54:	8c440000 	lw	a0,0(v0)
20000a58:	00000000 	nop
20000a5c:	ac440000 	sw	a0,0(v0)
	}

	if(( Right_motor_direction_G == Reverse && Right_motor_speed_G != 0) || (Course_correction_Rt == True))
20000a60:	24020002 	li	v0,2
20000a64:	14620005 	bne	v1,v0,20000a7c <visualsRt+0xe4>
20000a68:	00000000 	nop
20000a6c:	978200b2 	lhu	v0,178(gp)
20000a70:	00000000 	nop
20000a74:	14400005 	bnez	v0,20000a8c <visualsRt+0xf4>
20000a78:	3c028000 	lui	v0,0x8000
20000a7c:	8f830064 	lw	v1,100(gp)
20000a80:	24020001 	li	v0,1
20000a84:	14620008 	bne	v1,v0,20000aa8 <visualsRt+0x110>
20000a88:	3c028000 	lui	v0,0x8000
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_HIGH);
20000a8c:	34420200 	ori	v0,v0,0x200
20000a90:	8c430000 	lw	v1,0(v0)
20000a94:	00000000 	nop
20000a98:	ac430000 	sw	v1,0(v0)
20000a9c:	8c430000 	lw	v1,0(v0)
20000aa0:	080002b0 	j	20000ac0 <visualsRt+0x128>
20000aa4:	34630001 	ori	v1,v1,0x1
	}
	else
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000aa8:	34420200 	ori	v0,v0,0x200
20000aac:	8c440000 	lw	a0,0(v0)
20000ab0:	2403fffe 	li	v1,-2
20000ab4:	00831824 	and	v1,a0,v1
20000ab8:	ac430000 	sw	v1,0(v0)
20000abc:	8c430000 	lw	v1,0(v0)
	}

	Segment_Write(displayA, (sensorReadings.USFwd & 0x000F) >> 0);
20000ac0:	3c114000 	lui	s1,0x4000
20000ac4:	263003d4 	addiu	s0,s1,980
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_HIGH);
	}
	else
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000ac8:	ac430000 	sw	v1,0(v0)
	}

	Segment_Write(displayA, (sensorReadings.USFwd & 0x000F) >> 0);
20000acc:	92050008 	lbu	a1,8(s0)
20000ad0:	8f84ffdc 	lw	a0,-36(gp)
20000ad4:	0c000b17 	jal	20002c5c <Segment_Write>
20000ad8:	30a5000f 	andi	a1,a1,0xf
	Segment_Write(displayB, (sensorReadings.USFwd & 0x00F0) >> 4);
20000adc:	8e050008 	lw	a1,8(s0)
20000ae0:	8f84ffe0 	lw	a0,-32(gp)
20000ae4:	30a500f0 	andi	a1,a1,0xf0
20000ae8:	0c000b17 	jal	20002c5c <Segment_Write>
20000aec:	00052902 	srl	a1,a1,0x4
	Segment_Write(displayC, (sensorReadings.USFwd & 0x0F00) >> 8);
20000af0:	8e050008 	lw	a1,8(s0)
20000af4:	8f84ffe4 	lw	a0,-28(gp)
20000af8:	30a50f00 	andi	a1,a1,0xf00
20000afc:	0c000b17 	jal	20002c5c <Segment_Write>
20000b00:	00052a02 	srl	a1,a1,0x8

//	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
//	Segment_Write(displayB, (sensorReadings.IRRight & 0x00F0) >> 4);
//	Segment_Write(displayC, (sensorReadings.IRLeft & 0x000F) >> 0);
	Segment_Write(displayD, (sensorReadings.IRLeft & 0x00F0) >> 4);
20000b04:	8e2503d4 	lw	a1,980(s1)
20000b08:	8f84ffe8 	lw	a0,-24(gp)
20000b0c:	30a500f0 	andi	a1,a1,0xf0

}
20000b10:	8fbf001c 	lw	ra,28(sp)
20000b14:	8fb10018 	lw	s1,24(sp)
20000b18:	8fb00014 	lw	s0,20(sp)
	Segment_Write(displayC, (sensorReadings.USFwd & 0x0F00) >> 8);

//	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
//	Segment_Write(displayB, (sensorReadings.IRRight & 0x00F0) >> 4);
//	Segment_Write(displayC, (sensorReadings.IRLeft & 0x000F) >> 0);
	Segment_Write(displayD, (sensorReadings.IRLeft & 0x00F0) >> 4);
20000b1c:	00052902 	srl	a1,a1,0x4
20000b20:	08000b17 	j	20002c5c <Segment_Write>
20000b24:	27bd0020 	addiu	sp,sp,32

20000b28 <Motor_Right_Update>:
/**
 * Motor_Right controller operation
 */
void Motor_Right_Update(void)
{
	if(System_Mode_G == Go)
20000b28:	8f8500fc 	lw	a1,252(gp)

/**
 * Motor_Right controller operation
 */
void Motor_Right_Update(void)
{
20000b2c:	27bdffe8 	addiu	sp,sp,-24
	if(System_Mode_G == Go)
20000b30:	24020002 	li	v0,2
20000b34:	14a20036 	bne	a1,v0,20000c10 <Motor_Right_Update+0xe8>
20000b38:	afbf0014 	sw	ra,20(sp)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Rt_Diff = (WheelCounts_Right_G - Enc_Rt_Old);
20000b3c:	8f8400c8 	lw	a0,200(gp)
20000b40:	8f830148 	lw	v1,328(gp)

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Lf)
20000b44:	8f8200ec 	lw	v0,236(gp)
void Motor_Right_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Rt_Diff = (WheelCounts_Right_G - Enc_Rt_Old);
20000b48:	00831823 	subu	v1,a0,v1

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Lf)
20000b4c:	24060001 	li	a2,1
20000b50:	10460004 	beq	v0,a2,20000b64 <Motor_Right_Update+0x3c>
20000b54:	af83014c 	sw	v1,332(gp)
20000b58:	24060003 	li	a2,3
20000b5c:	14460004 	bne	v0,a2,20000b70 <Motor_Right_Update+0x48>
20000b60:	00000000 	nop
		{
			Motor_Rt_Enc_Track += Enc_Rt_Diff;
20000b64:	8f8500d8 	lw	a1,216(gp)
20000b68:	080002e3 	j	20000b8c <Motor_Right_Update+0x64>
20000b6c:	00a31821 	addu	v1,a1,v1
		}
		else if(movement_G == Bd || movement_G == Rt)
20000b70:	10450003 	beq	v0,a1,20000b80 <Motor_Right_Update+0x58>
20000b74:	24050004 	li	a1,4
20000b78:	14450005 	bne	v0,a1,20000b90 <Motor_Right_Update+0x68>
20000b7c:	00000000 	nop
		{
			Motor_Rt_Enc_Track -= Enc_Rt_Diff;
20000b80:	8f8500d8 	lw	a1,216(gp)
20000b84:	00000000 	nop
20000b88:	00a31823 	subu	v1,a1,v1
20000b8c:	af8300d8 	sw	v1,216(gp)
		}

		Enc_Rt_Old = WheelCounts_Right_G;

		/* Script reader */
		switch(movement_G)
20000b90:	24030002 	li	v1,2
20000b94:	10430017 	beq	v0,v1,20000bf4 <Motor_Right_Update+0xcc>
20000b98:	af840148 	sw	a0,328(gp)
20000b9c:	2c430003 	sltiu	v1,v0,3
20000ba0:	10600006 	beqz	v1,20000bbc <Motor_Right_Update+0x94>
20000ba4:	24030003 	li	v1,3
20000ba8:	24030001 	li	v1,1
20000bac:	14430016 	bne	v0,v1,20000c08 <Motor_Right_Update+0xe0>
20000bb0:	00000000 	nop
20000bb4:	080002f5 	j	20000bd4 <Motor_Right_Update+0xac>
20000bb8:	00000000 	nop
20000bbc:	1043000b 	beq	v0,v1,20000bec <Motor_Right_Update+0xc4>
20000bc0:	24030004 	li	v1,4
20000bc4:	14430010 	bne	v0,v1,20000c08 <Motor_Right_Update+0xe0>
20000bc8:	24020002 	li	v0,2
			Right_motor_direction_G = Forwards;
			Right_motor_speed_G = CRAWL_SPEED;
			break;
		case Bd:
		case Rt:
			Right_motor_direction_G = Reverse;
20000bcc:	080002ff 	j	20000bfc <Motor_Right_Update+0xd4>
20000bd0:	af820084 	sw	v0,132(gp)
		/* Script reader */
		switch(movement_G)
		{
		case Fd:
			Right_motor_direction_G = Forwards;
			speedControlRight(Course_correction_Lf, Course_correction_Rt);
20000bd4:	8f840074 	lw	a0,116(gp)
20000bd8:	8f850064 	lw	a1,100(gp)
20000bdc:	0c000243 	jal	2000090c <speedControlRight>
20000be0:	af820084 	sw	v0,132(gp)
			break;
20000be4:	08000309 	j	20000c24 <Motor_Right_Update+0xfc>
20000be8:	00000000 	nop
		case Lf:
			Right_motor_direction_G = Forwards;
20000bec:	080002fe 	j	20000bf8 <Motor_Right_Update+0xd0>
20000bf0:	24020001 	li	v0,1
			Right_motor_speed_G = CRAWL_SPEED;
			break;
		case Bd:
		case Rt:
			Right_motor_direction_G = Reverse;
20000bf4:	24020002 	li	v0,2
20000bf8:	af820084 	sw	v0,132(gp)
			Right_motor_speed_G = CRAWL_SPEED;
20000bfc:	2402000c 	li	v0,12
			break;
20000c00:	08000309 	j	20000c24 <Motor_Right_Update+0xfc>
20000c04:	a78200b2 	sh	v0,178(gp)
		case Stp:
		default:
			Right_motor_speed_G = 0;
20000c08:	08000309 	j	20000c24 <Motor_Right_Update+0xfc>
20000c0c:	a78000b2 	sh	zero,178(gp)
			break;
		}
	}
	else
	{
		Right_motor_direction_G = Off;
20000c10:	af800084 	sw	zero,132(gp)
		Right_motor_speed_G = 0;
20000c14:	a78000b2 	sh	zero,178(gp)
		Motor_Rt_Enc_Track = 0;
20000c18:	af8000d8 	sw	zero,216(gp)
		Enc_Rt_Diff = 0;
20000c1c:	af80014c 	sw	zero,332(gp)
		Enc_Rt_Old = 0;
20000c20:	af800148 	sw	zero,328(gp)
	}

	visualsRt();
}
20000c24:	8fbf0014 	lw	ra,20(sp)
		Motor_Rt_Enc_Track = 0;
		Enc_Rt_Diff = 0;
		Enc_Rt_Old = 0;
	}

	visualsRt();
20000c28:	08000266 	j	20000998 <visualsRt>
20000c2c:	27bd0018 	addiu	sp,sp,24

20000c30 <Motor_Right_Init>:
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
20000c30:	3c038000 	lui	v1,0x8000
20000c34:	34620200 	ori	v0,v1,0x200
20000c38:	8c450004 	lw	a1,4(v0)
20000c3c:	2404fffd 	li	a0,-3
20000c40:	00a42824 	and	a1,a1,a0
20000c44:	ac450004 	sw	a1,4(v0)
20000c48:	8c460004 	lw	a2,4(v0)
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000c4c:	2405fffe 	li	a1,-2
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
20000c50:	34c60002 	ori	a2,a2,0x2
20000c54:	ac460004 	sw	a2,4(v0)
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000c58:	8c460000 	lw	a2,0(v0)
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000c5c:	34630500 	ori	v1,v1,0x500
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000c60:	00c42024 	and	a0,a2,a0
20000c64:	ac440000 	sw	a0,0(v0)
20000c68:	8c440000 	lw	a0,0(v0)
/**
 * Initialisation for the Motor_Right package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
20000c6c:	27bdffe8 	addiu	sp,sp,-24
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000c70:	ac440000 	sw	a0,0(v0)
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000c74:	8c460004 	lw	a2,4(v0)
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);

	Segment_Enable(displayA);
20000c78:	8f84ffdc 	lw	a0,-36(gp)
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000c7c:	00c53024 	and	a2,a2,a1
20000c80:	ac460004 	sw	a2,4(v0)
20000c84:	8c460004 	lw	a2,4(v0)
/**
 * Initialisation for the Motor_Right package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
20000c88:	afbf0014 	sw	ra,20(sp)
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000c8c:	34c60001 	ori	a2,a2,0x1
20000c90:	ac460004 	sw	a2,4(v0)
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c94:	8c460000 	lw	a2,0(v0)
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
20000c98:	af800084 	sw	zero,132(gp)
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c9c:	00c52824 	and	a1,a2,a1
20000ca0:	ac450000 	sw	a1,0(v0)
20000ca4:	8c450000 	lw	a1,0(v0)
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;
20000ca8:	af8000d8 	sw	zero,216(gp)

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000cac:	ac450000 	sw	a1,0(v0)
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000cb0:	8c650004 	lw	a1,4(v1)
20000cb4:	2402ffdf 	li	v0,-33
20000cb8:	00a21024 	and	v0,a1,v0
20000cbc:	ac620004 	sw	v0,4(v1)
20000cc0:	8c620004 	lw	v0,4(v1)
 */
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
20000cc4:	a78000b2 	sh	zero,178(gp)

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000cc8:	ac620004 	sw	v0,4(v1)

	Segment_Enable(displayA);
20000ccc:	0c000b44 	jal	20002d10 <Segment_Enable>
20000cd0:	00000000 	nop
	Segment_Write(displayA, 0x0);
20000cd4:	8f84ffdc 	lw	a0,-36(gp)
20000cd8:	0c000b17 	jal	20002c5c <Segment_Write>
20000cdc:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayA);
20000ce0:	8f84ffdc 	lw	a0,-36(gp)
20000ce4:	0c000acc 	jal	20002b30 <Segment_Clear_Decimal>
20000ce8:	00000000 	nop
	Segment_Enable(displayB);
20000cec:	8f84ffe0 	lw	a0,-32(gp)
20000cf0:	0c000b44 	jal	20002d10 <Segment_Enable>
20000cf4:	00000000 	nop
	Segment_Write(displayB, 0x0);
20000cf8:	8f84ffe0 	lw	a0,-32(gp)
20000cfc:	0c000b17 	jal	20002c5c <Segment_Write>
20000d00:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayB);
20000d04:	8f84ffe0 	lw	a0,-32(gp)
}
20000d08:	8fbf0014 	lw	ra,20(sp)
	Segment_Enable(displayA);
	Segment_Write(displayA, 0x0);
	Segment_Clear_Decimal(displayA);
	Segment_Enable(displayB);
	Segment_Write(displayB, 0x0);
	Segment_Clear_Decimal(displayB);
20000d0c:	08000acc 	j	20002b30 <Segment_Clear_Decimal>
20000d10:	27bd0018 	addiu	sp,sp,24

20000d14 <visualsLf>:
	return result;
}

void visualsLf(void)
{
	if(System_Mode_G == Game_Over)
20000d14:	8f8300fc 	lw	v1,252(gp)
	result = (uint16_t)(speed);
	return result;
}

void visualsLf(void)
{
20000d18:	27bdffe8 	addiu	sp,sp,-24
	if(System_Mode_G == Game_Over)
20000d1c:	24020004 	li	v0,4
20000d20:	14620009 	bne	v1,v0,20000d48 <visualsLf+0x34>
20000d24:	afbf0014 	sw	ra,20(sp)
	{
		Segment_Set_Decimal(displayC);
20000d28:	8f84ffec 	lw	a0,-20(gp)
20000d2c:	0c000af2 	jal	20002bc8 <Segment_Set_Decimal>
20000d30:	00000000 	nop
		Segment_Set_Decimal(displayD);
20000d34:	8f84fff0 	lw	a0,-16(gp)
20000d38:	0c000af2 	jal	20002bc8 <Segment_Set_Decimal>
20000d3c:	00000000 	nop
20000d40:	08000358 	j	20000d60 <visualsLf+0x4c>
20000d44:	00000000 	nop
	}
	else
	{
		Segment_Clear_Decimal(displayC);
20000d48:	8f84ffec 	lw	a0,-20(gp)
20000d4c:	0c000acc 	jal	20002b30 <Segment_Clear_Decimal>
20000d50:	00000000 	nop
		Segment_Clear_Decimal(displayD);
20000d54:	8f84fff0 	lw	a0,-16(gp)
20000d58:	0c000acc 	jal	20002b30 <Segment_Clear_Decimal>
20000d5c:	00000000 	nop
	}

	if(
		Left_motor_direction_G == Forwards
		&& Left_motor_speed_G != 0
20000d60:	8f830094 	lw	v1,148(gp)
	{
		Segment_Clear_Decimal(displayC);
		Segment_Clear_Decimal(displayD);
	}

	if(
20000d64:	24020001 	li	v0,1
20000d68:	1462000f 	bne	v1,v0,20000da8 <visualsLf+0x94>
20000d6c:	3c028000 	lui	v0,0x8000
20000d70:	978200b0 	lhu	v0,176(gp)
20000d74:	00000000 	nop
20000d78:	1040000b 	beqz	v0,20000da8 <visualsLf+0x94>
20000d7c:	3c028000 	lui	v0,0x8000
		Left_motor_direction_G == Forwards
		&& Left_motor_speed_G != 0
		)
	{
		GPIO_Write(LED_Pin_LfFd, GPIO_HIGH);
20000d80:	34420200 	ori	v0,v0,0x200
20000d84:	8c430000 	lw	v1,0(v0)
20000d88:	00000000 	nop
20000d8c:	ac430000 	sw	v1,0(v0)
20000d90:	8c430000 	lw	v1,0(v0)
20000d94:	00000000 	nop
20000d98:	34630008 	ori	v1,v1,0x8
20000d9c:	ac430000 	sw	v1,0(v0)
20000da0:	08000379 	j	20000de4 <visualsLf+0xd0>
20000da4:	00000000 	nop
	}
	else
	{
		GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000da8:	34420200 	ori	v0,v0,0x200
20000dac:	8c450000 	lw	a1,0(v0)
20000db0:	2404fff7 	li	a0,-9
20000db4:	00a42024 	and	a0,a1,a0
20000db8:	ac440000 	sw	a0,0(v0)
20000dbc:	8c440000 	lw	a0,0(v0)
20000dc0:	00000000 	nop
20000dc4:	ac440000 	sw	a0,0(v0)
	}

	if((Left_motor_direction_G == Reverse && Left_motor_speed_G != 0	) || (Course_correction_Lf == True))
20000dc8:	24020002 	li	v0,2
20000dcc:	14620005 	bne	v1,v0,20000de4 <visualsLf+0xd0>
20000dd0:	00000000 	nop
20000dd4:	978200b0 	lhu	v0,176(gp)
20000dd8:	00000000 	nop
20000ddc:	14400005 	bnez	v0,20000df4 <visualsLf+0xe0>
20000de0:	3c028000 	lui	v0,0x8000
20000de4:	8f830074 	lw	v1,116(gp)
20000de8:	24020001 	li	v0,1
20000dec:	14620008 	bne	v1,v0,20000e10 <visualsLf+0xfc>
20000df0:	3c028000 	lui	v0,0x8000
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_HIGH);
20000df4:	34420200 	ori	v0,v0,0x200
20000df8:	8c430000 	lw	v1,0(v0)
20000dfc:	00000000 	nop
20000e00:	ac430000 	sw	v1,0(v0)
20000e04:	8c430000 	lw	v1,0(v0)
20000e08:	0800038a 	j	20000e28 <visualsLf+0x114>
20000e0c:	34630004 	ori	v1,v1,0x4
	}
	else
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000e10:	34420200 	ori	v0,v0,0x200
20000e14:	8c440000 	lw	a0,0(v0)
20000e18:	2403fffb 	li	v1,-5
20000e1c:	00831824 	and	v1,a0,v1
20000e20:	ac430000 	sw	v1,0(v0)
20000e24:	8c430000 	lw	v1,0(v0)
	}

//	Segment_Write(displayC, (Motor_Lf_Enc_Track & 0x000F) >> 0);
//	Segment_Write(displayD, (Motor_Lf_Enc_Track & 0x00F0) >> 4);

}
20000e28:	8fbf0014 	lw	ra,20(sp)
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_HIGH);
	}
	else
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000e2c:	ac430000 	sw	v1,0(v0)
	}

//	Segment_Write(displayC, (Motor_Lf_Enc_Track & 0x000F) >> 0);
//	Segment_Write(displayD, (Motor_Lf_Enc_Track & 0x00F0) >> 4);

}
20000e30:	03e00008 	jr	ra
20000e34:	27bd0018 	addiu	sp,sp,24

20000e38 <Motor_Left_Update>:
 * Motor_Left controller operation.
 */
void Motor_Left_Update(void)
{

	if(System_Mode_G == Go)
20000e38:	8f8300fc 	lw	v1,252(gp)
20000e3c:	24020002 	li	v0,2
20000e40:	14620028 	bne	v1,v0,20000ee4 <Motor_Left_Update+0xac>
20000e44:	24050001 	li	a1,1
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Lf_Diff = (WheelCounts_Left_G - Enc_Lf_Old);
20000e48:	8f840088 	lw	a0,136(gp)
20000e4c:	8f830154 	lw	v1,340(gp)

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Rt)
20000e50:	8f8200ec 	lw	v0,236(gp)
{

	if(System_Mode_G == Go)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Lf_Diff = (WheelCounts_Left_G - Enc_Lf_Old);
20000e54:	00831823 	subu	v1,a0,v1

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Rt)
20000e58:	10450004 	beq	v0,a1,20000e6c <Motor_Left_Update+0x34>
20000e5c:	af830150 	sw	v1,336(gp)
20000e60:	24050004 	li	a1,4
20000e64:	14450004 	bne	v0,a1,20000e78 <Motor_Left_Update+0x40>
20000e68:	2445fffe 	addiu	a1,v0,-2
		{
			Motor_Lf_Enc_Track += Enc_Lf_Diff;
20000e6c:	8f850040 	lw	a1,64(gp)
20000e70:	080003a4 	j	20000e90 <Motor_Left_Update+0x58>
20000e74:	00a31821 	addu	v1,a1,v1
		}
		else if(movement_G == Bd || movement_G == Lf)
20000e78:	2ca50002 	sltiu	a1,a1,2
20000e7c:	10a00005 	beqz	a1,20000e94 <Motor_Left_Update+0x5c>
20000e80:	00000000 	nop
		{
			Motor_Lf_Enc_Track -= Enc_Lf_Diff;
20000e84:	8f850040 	lw	a1,64(gp)
20000e88:	00000000 	nop
20000e8c:	00a31823 	subu	v1,a1,v1
20000e90:	af830040 	sw	v1,64(gp)
		}

		Enc_Lf_Old = WheelCounts_Left_G;

		/* Script reader */
		switch(movement_G)
20000e94:	2c430004 	sltiu	v1,v0,4
20000e98:	10600006 	beqz	v1,20000eb4 <Motor_Left_Update+0x7c>
20000e9c:	af840154 	sw	a0,340(gp)
20000ea0:	2c430002 	sltiu	v1,v0,2
20000ea4:	10600008 	beqz	v1,20000ec8 <Motor_Left_Update+0x90>
20000ea8:	24030001 	li	v1,1
20000eac:	080003ae 	j	20000eb8 <Motor_Left_Update+0x80>
20000eb0:	00000000 	nop
20000eb4:	24030004 	li	v1,4
20000eb8:	14430008 	bne	v0,v1,20000edc <Motor_Left_Update+0xa4>
20000ebc:	24020001 	li	v0,1
			Left_motor_speed_G = CRAWL_SPEED;

			break;
		case Bd:
		case Lf:
			Left_motor_direction_G = Reverse;
20000ec0:	080003b4 	j	20000ed0 <Motor_Left_Update+0x98>
20000ec4:	af820094 	sw	v0,148(gp)
20000ec8:	24020002 	li	v0,2
20000ecc:	af820094 	sw	v0,148(gp)
			Left_motor_speed_G = CRAWL_SPEED;
20000ed0:	2402000c 	li	v0,12

			break;
20000ed4:	080003be 	j	20000ef8 <Motor_Left_Update+0xc0>
20000ed8:	a78200b0 	sh	v0,176(gp)
		case Stp:
		default:
			Left_motor_speed_G = 0;
20000edc:	080003be 	j	20000ef8 <Motor_Left_Update+0xc0>
20000ee0:	a78000b0 	sh	zero,176(gp)
			break;
		}
	}
	else
	{
		Left_motor_direction_G = Off;
20000ee4:	af800094 	sw	zero,148(gp)
		Left_motor_speed_G = 0;
20000ee8:	a78000b0 	sh	zero,176(gp)
		Motor_Lf_Enc_Track = 0;
20000eec:	af800040 	sw	zero,64(gp)
		Enc_Lf_Diff = 0;
20000ef0:	af800150 	sw	zero,336(gp)
		Enc_Lf_Old = 0;
20000ef4:	af800154 	sw	zero,340(gp)
	}

	visualsLf();
20000ef8:	08000345 	j	20000d14 <visualsLf>
20000efc:	00000000 	nop

20000f00 <Motor_Left_Init>:
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
20000f00:	3c038000 	lui	v1,0x8000
20000f04:	34620200 	ori	v0,v1,0x200
20000f08:	8c440004 	lw	a0,4(v0)
20000f0c:	2405fff7 	li	a1,-9
20000f10:	00852024 	and	a0,a0,a1
20000f14:	ac440004 	sw	a0,4(v0)
20000f18:	8c440004 	lw	a0,4(v0)
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000f1c:	2406fffb 	li	a2,-5
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
20000f20:	34840008 	ori	a0,a0,0x8
20000f24:	ac440004 	sw	a0,4(v0)
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000f28:	8c440000 	lw	a0,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20000f2c:	34630500 	ori	v1,v1,0x500
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000f30:	00852024 	and	a0,a0,a1
20000f34:	ac440000 	sw	a0,0(v0)
20000f38:	8c470000 	lw	a3,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);

	Segment_Enable(displayC);
20000f3c:	8f84ffec 	lw	a0,-20(gp)
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000f40:	ac470000 	sw	a3,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000f44:	8c470004 	lw	a3,4(v0)
/**
 * Initialisation for the Motor_Left package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
20000f48:	27bdffe8 	addiu	sp,sp,-24
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000f4c:	00e63824 	and	a3,a3,a2
20000f50:	ac470004 	sw	a3,4(v0)
20000f54:	8c470004 	lw	a3,4(v0)
/**
 * Initialisation for the Motor_Left package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
20000f58:	afbf0014 	sw	ra,20(sp)
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000f5c:	34e70004 	ori	a3,a3,0x4
20000f60:	ac470004 	sw	a3,4(v0)
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000f64:	8c470000 	lw	a3,0(v0)
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;
20000f68:	af800040 	sw	zero,64(gp)

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000f6c:	00e63024 	and	a2,a3,a2
20000f70:	ac460000 	sw	a2,0(v0)
20000f74:	8c460000 	lw	a2,0(v0)
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
20000f78:	af800094 	sw	zero,148(gp)
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000f7c:	ac460000 	sw	a2,0(v0)
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20000f80:	8c620004 	lw	v0,4(v1)
 */
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
20000f84:	a78000b0 	sh	zero,176(gp)

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20000f88:	00452824 	and	a1,v0,a1
20000f8c:	ac650004 	sw	a1,4(v1)
20000f90:	8c620004 	lw	v0,4(v1)
20000f94:	00000000 	nop
20000f98:	ac620004 	sw	v0,4(v1)

	Segment_Enable(displayC);
20000f9c:	0c000b44 	jal	20002d10 <Segment_Enable>
20000fa0:	00000000 	nop
	Segment_Write(displayC, 0x0);
20000fa4:	8f84ffec 	lw	a0,-20(gp)
20000fa8:	0c000b17 	jal	20002c5c <Segment_Write>
20000fac:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayC);
20000fb0:	8f84ffec 	lw	a0,-20(gp)
20000fb4:	0c000acc 	jal	20002b30 <Segment_Clear_Decimal>
20000fb8:	00000000 	nop
	Segment_Enable(displayD);
20000fbc:	8f84fff0 	lw	a0,-16(gp)
20000fc0:	0c000b44 	jal	20002d10 <Segment_Enable>
20000fc4:	00000000 	nop
	Segment_Write(displayD, 0x0);
20000fc8:	8f84fff0 	lw	a0,-16(gp)
20000fcc:	0c000b17 	jal	20002c5c <Segment_Write>
20000fd0:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayD);
20000fd4:	8f84fff0 	lw	a0,-16(gp)
}
20000fd8:	8fbf0014 	lw	ra,20(sp)
	Segment_Enable(displayC);
	Segment_Write(displayC, 0x0);
	Segment_Clear_Decimal(displayC);
	Segment_Enable(displayD);
	Segment_Write(displayD, 0x0);
	Segment_Clear_Decimal(displayD);
20000fdc:	08000acc 	j	20002b30 <Segment_Clear_Decimal>
20000fe0:	27bd0018 	addiu	sp,sp,24

20000fe4 <spi_receive_CAN>:
	uint32_t Byte_counter, length;// displayID;

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
20000fe4:	3c028000 	lui	v0,0x8000
20000fe8:	34420600 	ori	v0,v0,0x600
20000fec:	8c460000 	lw	a2,0(v0)
20000ff0:	2403ffbf 	li	v1,-65
20000ff4:	00c31824 	and	v1,a2,v1
20000ff8:	ac430000 	sw	v1,0(v0)
20000ffc:	8c430000 	lw	v1,0(v0)
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
20001000:	27bdffe0 	addiu	sp,sp,-32

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20001004:	308400ff 	andi	a0,a0,0xff
	uint32_t Byte_counter, length;// displayID;

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
20001008:	ac430000 	sw	v1,0(v0)
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
2000100c:	afb20018 	sw	s2,24(sp)
20001010:	00a09021 	move	s2,a1

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20001014:	00802821 	move	a1,a0
20001018:	00002021 	move	a0,zero
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
2000101c:	afbf001c 	sw	ra,28(sp)
20001020:	afb10014 	sw	s1,20(sp)
20001024:	afb00010 	sw	s0,16(sp)

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20001028:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000102c:	af80017c 	sw	zero,380(gp)

	/* Burn 5 Bytes: EXT_ID and Length */
	SPI_Swap(SPI0, 0xFF);
20001030:	00002021 	move	a0,zero
20001034:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001038:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
2000103c:	00002021 	move	a0,zero
20001040:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001044:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20001048:	00002021 	move	a0,zero
2000104c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001050:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20001054:	00002021 	move	a0,zero
20001058:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000105c:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20001060:	00002021 	move	a0,zero
20001064:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001068:	240500ff 	li	a1,255
2000106c:	00008021 	move	s0,zero

	/* Known length */
	length = 8;

	/* Extract the CAN data and insert into the Receive Buffer */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001070:	24110008 	li	s1,8
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
20001074:	00002021 	move	a0,zero
20001078:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000107c:	240500ff 	li	a1,255
20001080:	02501821 	addu	v1,s2,s0

	/* Known length */
	length = 8;

	/* Extract the CAN data and insert into the Receive Buffer */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001084:	26100001 	addiu	s0,s0,1
20001088:	1611fffa 	bne	s0,s1,20001074 <spi_receive_CAN+0x90>
2000108c:	a0620008 	sb	v0,8(v1)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001090:	3c028000 	lui	v0,0x8000
20001094:	34420600 	ori	v0,v0,0x600
20001098:	8c430000 	lw	v1,0(v0)
}
2000109c:	8fbf001c 	lw	ra,28(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
200010a0:	ac430000 	sw	v1,0(v0)
200010a4:	8c430000 	lw	v1,0(v0)
}
200010a8:	8fb20018 	lw	s2,24(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
200010ac:	34630040 	ori	v1,v1,0x40
}
200010b0:	8fb10014 	lw	s1,20(sp)
200010b4:	8fb00010 	lw	s0,16(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
200010b8:	ac430000 	sw	v1,0(v0)
}
200010bc:	03e00008 	jr	ra
200010c0:	27bd0020 	addiu	sp,sp,32

200010c4 <spi_buffer_CAN>:

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
200010c4:	3c020003 	lui	v0,0x3

	/* Mask 4 bytes of CAN ID */
	MaskedID = CAN_ID & 0xFFFFFFFF;

	/* Separate Standard ID portion and shift for extra 3 bits */
	SID = MaskedID & 0x1FFC0000;
200010c8:	3c031ffc 	lui	v1,0x1ffc

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
200010cc:	3442ffff 	ori	v0,v0,0xffff
200010d0:	00821024 	and	v0,a0,v0

	/* Mask 4 bytes of CAN ID */
	MaskedID = CAN_ID & 0xFFFFFFFF;

	/* Separate Standard ID portion and shift for extra 3 bits */
	SID = MaskedID & 0x1FFC0000;
200010d4:	00832024 	and	a0,a0,v1

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
200010d8:	3c030008 	lui	v1,0x8
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
200010dc:	27bdffd8 	addiu	sp,sp,-40

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
200010e0:	00431025 	or	v0,v0,v1
200010e4:	000420c0 	sll	a0,a0,0x3
200010e8:	00442025 	or	a0,v0,a0
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
200010ec:	afb10018 	sw	s1,24(sp)
200010f0:	30b100ff 	andi	s1,a1,0xff
200010f4:	afb00014 	sw	s0,20(sp)
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
200010f8:	00041e02 	srl	v1,a0,0x18
		PAD_ID >>= 8;
200010fc:	00043a02 	srl	a3,a0,0x8
20001100:	00042c02 	srl	a1,a0,0x10
	}

	/* add data length to byte array */
	ID_Array[4] = (DL & 0x0F);
20001104:	3222000f 	andi	v0,s1,0xf
20001108:	27900160 	addiu	s0,gp,352
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
2000110c:	afb30020 	sw	s3,32(sp)
20001110:	afb2001c 	sw	s2,28(sp)
20001114:	afbf0024 	sw	ra,36(sp)
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
20001118:	a3870162 	sb	a3,354(gp)
2000111c:	a3850161 	sb	a1,353(gp)
20001120:	a3830160 	sb	v1,352(gp)
		PAD_ID >>= 8;
	}

	/* add data length to byte array */
	ID_Array[4] = (DL & 0x0F);
20001124:	a3820164 	sb	v0,356(gp)
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
20001128:	00c09021 	move	s2,a2
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
2000112c:	a3840163 	sb	a0,355(gp)
 * Send CAN message into SPI buffer
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
20001130:	26130005 	addiu	s3,s0,5
	build_EXT_ID_bytes(EXT_ID, EXT_ID_Bytes, length);

	/* Send padded CAN ID */
	for (Byte_counter = 0; Byte_counter < 5; Byte_counter++)
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
20001134:	92050000 	lbu	a1,0(s0)
20001138:	00002021 	move	a0,zero
2000113c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001140:	26100001 	addiu	s0,s0,1

	/* Pad ID with LOAD_TX0_INS info (see MCP2515 datasheet) */
	build_EXT_ID_bytes(EXT_ID, EXT_ID_Bytes, length);

	/* Send padded CAN ID */
	for (Byte_counter = 0; Byte_counter < 5; Byte_counter++)
20001144:	1613fffb 	bne	s0,s3,20001134 <spi_buffer_CAN+0x70>
20001148:	00000000 	nop
2000114c:	08000458 	j	20001160 <spi_buffer_CAN+0x9c>
20001150:	00008021 	move	s0,zero
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
20001154:	90650000 	lbu	a1,0(v1)
20001158:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000115c:	26100001 	addiu	s0,s0,1
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001160:	0211102b 	sltu	v0,s0,s1
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
20001164:	02501821 	addu	v1,s2,s0
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001168:	1440fffa 	bnez	v0,20001154 <spi_buffer_CAN+0x90>
2000116c:	00002021 	move	a0,zero
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
	}
}
20001170:	8fbf0024 	lw	ra,36(sp)
20001174:	8fb30020 	lw	s3,32(sp)
20001178:	8fb2001c 	lw	s2,28(sp)
2000117c:	8fb10018 	lw	s1,24(sp)
20001180:	8fb00014 	lw	s0,20(sp)
20001184:	03e00008 	jr	ra
20001188:	27bd0028 	addiu	sp,sp,40

2000118c <Message_Sender_Update>:
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
	/* Test values */
	ticked++;
2000118c:	97830188 	lhu	v1,392(gp)
	if(ticked % 4000 == 0)
20001190:	24020fa0 	li	v0,4000
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
	/* Test values */
	ticked++;
20001194:	24630001 	addiu	v1,v1,1
20001198:	3063ffff 	andi	v1,v1,0xffff
	if(ticked % 4000 == 0)
2000119c:	14400002 	bnez	v0,200011a8 <Message_Sender_Update+0x1c>
200011a0:	0062001b 	divu	zero,v1,v0
200011a4:	0007000d 	break	0x7

/**
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
200011a8:	27bdffe0 	addiu	sp,sp,-32
200011ac:	afbf001c 	sw	ra,28(sp)
200011b0:	afb10018 	sw	s1,24(sp)
200011b4:	afb00014 	sw	s0,20(sp)
	/* Test values */
	ticked++;
	if(ticked % 4000 == 0)
200011b8:	00002010 	mfhi	a0
200011bc:	14800003 	bnez	a0,200011cc <Message_Sender_Update+0x40>
200011c0:	a7830188 	sh	v1,392(gp)
	{
		servo[0] = 0x20;
200011c4:	0800047a 	j	200011e8 <Message_Sender_Update+0x5c>
200011c8:	24020020 	li	v0,32
		servo[1] = 0x20;
	}
	else if ((ticked + 2000) % 4000 == 0)
200011cc:	246307d0 	addiu	v1,v1,2000
200011d0:	14400002 	bnez	v0,200011dc <Message_Sender_Update+0x50>
200011d4:	0062001a 	div	zero,v1,v0
200011d8:	0007000d 	break	0x7
200011dc:	00001010 	mfhi	v0
200011e0:	14400003 	bnez	v0,200011f0 <Message_Sender_Update+0x64>
200011e4:	2402ffa0 	li	v0,-96
	{
		servo[0] = 0xA0;
		servo[1] = 0xA0;
200011e8:	a38200a9 	sb	v0,169(gp)
		servo[0] = 0x20;
		servo[1] = 0x20;
	}
	else if ((ticked + 2000) % 4000 == 0)
	{
		servo[0] = 0xA0;
200011ec:	a38200a8 	sb	v0,168(gp)
		servo[1] = 0xA0;
	}

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
200011f0:	8f820168 	lw	v0,360(gp)
200011f4:	00000000 	nop
200011f8:	1440011e 	bnez	v0,20001674 <Message_Sender_Update+0x4e8>
200011fc:	3c108000 	lui	s0,0x8000
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001200:	36100600 	ori	s0,s0,0x600
20001204:	8e020000 	lw	v0,0(s0)
20001208:	2411ffbf 	li	s1,-65
2000120c:	00511024 	and	v0,v0,s1
20001210:	ae020000 	sw	v0,0(s0)
20001214:	8e020000 	lw	v0,0(s0)
		SPI_Swap(SPI0, 0xC0);
20001218:	00002021 	move	a0,zero
2000121c:	240500c0 	li	a1,192

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001220:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0xC0);
20001224:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001228:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000122c:	8e020000 	lw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001230:	00002021 	move	a0,zero
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0xC0);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001234:	ae020000 	sw	v0,0(s0)
20001238:	8e020000 	lw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000123c:	24050002 	li	a1,2
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0xC0);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001240:	34420040 	ori	v0,v0,0x40
20001244:	ae020000 	sw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001248:	8e020000 	lw	v0,0(s0)
2000124c:	00000000 	nop
20001250:	00511024 	and	v0,v0,s1
20001254:	ae020000 	sw	v0,0(s0)
20001258:	8e020000 	lw	v0,0(s0)
2000125c:	00000000 	nop
20001260:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001264:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001268:	00000000 	nop
		SPI_Swap(SPI0, 0x0F);
2000126c:	00002021 	move	a0,zero
20001270:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001274:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0x80);
20001278:	00002021 	move	a0,zero
2000127c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001280:	24050080 	li	a1,128
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001284:	8e020000 	lw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
20001288:	00002021 	move	a0,zero
		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x80);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000128c:	ae020000 	sw	v0,0(s0)
20001290:	8e020000 	lw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
20001294:	24050003 	li	a1,3
		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x80);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001298:	34420040 	ori	v0,v0,0x40
2000129c:	ae020000 	sw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
200012a0:	8e020000 	lw	v0,0(s0)
200012a4:	00000000 	nop
200012a8:	00511024 	and	v0,v0,s1
200012ac:	ae020000 	sw	v0,0(s0)
200012b0:	8e020000 	lw	v0,0(s0)
200012b4:	00000000 	nop
200012b8:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x03);
200012bc:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200012c0:	00000000 	nop
		SPI_Swap(SPI0, 0x0E);
200012c4:	00002021 	move	a0,zero
200012c8:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200012cc:	2405000e 	li	a1,14
		GPIO_Write(CS_PIN, GPIO_HIGH);
200012d0:	8e020000 	lw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200012d4:	00002021 	move	a0,zero

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x0E);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200012d8:	ae020000 	sw	v0,0(s0)
200012dc:	8e020000 	lw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200012e0:	24050002 	li	a1,2

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x0E);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200012e4:	34420040 	ori	v0,v0,0x40
200012e8:	ae020000 	sw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
200012ec:	8e020000 	lw	v0,0(s0)
200012f0:	00000000 	nop
200012f4:	00511024 	and	v0,v0,s1
200012f8:	ae020000 	sw	v0,0(s0)
200012fc:	8e020000 	lw	v0,0(s0)
20001300:	00000000 	nop
20001304:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001308:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000130c:	00000000 	nop
		SPI_Swap(SPI0, 0x28);
20001310:	00002021 	move	a0,zero
20001314:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001318:	24050028 	li	a1,40
		SPI_Swap(SPI0, 0x02);
2000131c:	00002021 	move	a0,zero
20001320:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001324:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x90);
20001328:	00002021 	move	a0,zero
2000132c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001330:	24050090 	li	a1,144
		SPI_Swap(SPI0, 0x03);
20001334:	00002021 	move	a0,zero
20001338:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000133c:	24050003 	li	a1,3
		SPI_Swap(SPI0, 0x00);
20001340:	00002021 	move	a0,zero
20001344:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001348:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000134c:	8e020000 	lw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
20001350:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x28);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x90);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001354:	ae020000 	sw	v0,0(s0)
20001358:	8e020000 	lw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
2000135c:	24050003 	li	a1,3
		SPI_Swap(SPI0, 0x28);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x90);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001360:	34420040 	ori	v0,v0,0x40
20001364:	ae020000 	sw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001368:	8e020000 	lw	v0,0(s0)
2000136c:	00000000 	nop
20001370:	00511024 	and	v0,v0,s1
20001374:	ae020000 	sw	v0,0(s0)
20001378:	8e020000 	lw	v0,0(s0)
2000137c:	00000000 	nop
20001380:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x03);
20001384:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001388:	00000000 	nop
		SPI_Swap(SPI0, 0x2A);
2000138c:	00002021 	move	a0,zero
20001390:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001394:	2405002a 	li	a1,42
		speedPin = SPI_Swap(SPI0, 0xFF);
20001398:	00002021 	move	a0,zero
2000139c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200013a0:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013a4:	8e030000 	lw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200013a8:	00002021 	move	a0,zero
		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013ac:	ae030000 	sw	v1,0(s0)
200013b0:	8e030000 	lw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200013b4:	24050002 	li	a1,2
		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013b8:	34630040 	ori	v1,v1,0x40
200013bc:	ae030000 	sw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
200013c0:	8e030000 	lw	v1,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
200013c4:	a3820165 	sb	v0,357(gp)
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
200013c8:	00711824 	and	v1,v1,s1
200013cc:	ae030000 	sw	v1,0(s0)
200013d0:	8e020000 	lw	v0,0(s0)
200013d4:	00000000 	nop
200013d8:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200013dc:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200013e0:	00000000 	nop
		SPI_Swap(SPI0, 0x0C);
200013e4:	00002021 	move	a0,zero
200013e8:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200013ec:	2405000c 	li	a1,12
		SPI_Swap(SPI0, 0x00);
200013f0:	00002021 	move	a0,zero
200013f4:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200013f8:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013fc:	8e020000 	lw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001400:	00002021 	move	a0,zero
		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0C);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001404:	ae020000 	sw	v0,0(s0)
20001408:	8e020000 	lw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000140c:	24050002 	li	a1,2
		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0C);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001410:	34420040 	ori	v0,v0,0x40
20001414:	ae020000 	sw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001418:	8e020000 	lw	v0,0(s0)
2000141c:	00000000 	nop
20001420:	00511024 	and	v0,v0,s1
20001424:	ae020000 	sw	v0,0(s0)
20001428:	8e020000 	lw	v0,0(s0)
2000142c:	00000000 	nop
20001430:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001434:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001438:	00000000 	nop
		SPI_Swap(SPI0, 0x0D);
2000143c:	00002021 	move	a0,zero
20001440:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001444:	2405000d 	li	a1,13
		SPI_Swap(SPI0, 0x00);
20001448:	00002021 	move	a0,zero
2000144c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001450:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001454:	8e020000 	lw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001458:	00002021 	move	a0,zero
		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0D);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000145c:	ae020000 	sw	v0,0(s0)
20001460:	8e020000 	lw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001464:	24050002 	li	a1,2
		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0D);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001468:	34420040 	ori	v0,v0,0x40
2000146c:	ae020000 	sw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001470:	8e020000 	lw	v0,0(s0)
20001474:	00000000 	nop
20001478:	00511024 	and	v0,v0,s1
2000147c:	ae020000 	sw	v0,0(s0)
20001480:	8e020000 	lw	v0,0(s0)
20001484:	00000000 	nop
20001488:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
2000148c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001490:	00000000 	nop
		SPI_Swap(SPI0, 0x60);
20001494:	00002021 	move	a0,zero
20001498:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000149c:	24050060 	li	a1,96
		SPI_Swap(SPI0, 0x60);
200014a0:	00002021 	move	a0,zero
200014a4:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200014a8:	24050060 	li	a1,96
		GPIO_Write(CS_PIN, GPIO_HIGH);
200014ac:	8e020000 	lw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200014b0:	00002021 	move	a0,zero
		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x60);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200014b4:	ae020000 	sw	v0,0(s0)
200014b8:	8e020000 	lw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200014bc:	24050002 	li	a1,2
		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x60);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200014c0:	34420040 	ori	v0,v0,0x40
200014c4:	ae020000 	sw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
200014c8:	8e020000 	lw	v0,0(s0)
200014cc:	00000000 	nop
200014d0:	00511024 	and	v0,v0,s1
200014d4:	ae020000 	sw	v0,0(s0)
200014d8:	8e020000 	lw	v0,0(s0)
200014dc:	00000000 	nop
200014e0:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200014e4:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200014e8:	00000000 	nop
		SPI_Swap(SPI0, 0x70);
200014ec:	00002021 	move	a0,zero
200014f0:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200014f4:	24050070 	li	a1,112
		SPI_Swap(SPI0, 0x60);
200014f8:	00002021 	move	a0,zero
200014fc:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001500:	24050060 	li	a1,96
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001504:	8e020000 	lw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001508:	00002021 	move	a0,zero
		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x70);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000150c:	ae020000 	sw	v0,0(s0)
20001510:	8e020000 	lw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001514:	24050002 	li	a1,2
		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x70);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001518:	34420040 	ori	v0,v0,0x40
2000151c:	ae020000 	sw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001520:	8e020000 	lw	v0,0(s0)
20001524:	00000000 	nop
20001528:	00511024 	and	v0,v0,s1
2000152c:	ae020000 	sw	v0,0(s0)
20001530:	8e020000 	lw	v0,0(s0)
20001534:	00000000 	nop
20001538:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
2000153c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001540:	00000000 	nop
		SPI_Swap(SPI0, 0x08);
20001544:	00002021 	move	a0,zero
20001548:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000154c:	24050008 	li	a1,8
		SPI_Swap(SPI0, 0x3F);
20001550:	00002021 	move	a0,zero
20001554:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001558:	2405003f 	li	a1,63
		SPI_Swap(SPI0, 0x0F);
2000155c:	00002021 	move	a0,zero
20001560:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001564:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0xFF);
20001568:	00002021 	move	a0,zero
2000156c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001570:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
20001574:	00002021 	move	a0,zero
20001578:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000157c:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001580:	8e020000 	lw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001584:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x08);
		SPI_Swap(SPI0, 0x3F);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001588:	ae020000 	sw	v0,0(s0)
2000158c:	8e020000 	lw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001590:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x08);
		SPI_Swap(SPI0, 0x3F);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001594:	34420040 	ori	v0,v0,0x40
20001598:	ae020000 	sw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000159c:	8e020000 	lw	v0,0(s0)
200015a0:	00000000 	nop
200015a4:	00511024 	and	v0,v0,s1
200015a8:	ae020000 	sw	v0,0(s0)
200015ac:	8e020000 	lw	v0,0(s0)
200015b0:	00000000 	nop
200015b4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200015b8:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200015bc:	00000000 	nop
		SPI_Swap(SPI0, 0x24);
200015c0:	00002021 	move	a0,zero
200015c4:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200015c8:	24050024 	li	a1,36
		SPI_Swap(SPI0, 0xFF);
200015cc:	00002021 	move	a0,zero
200015d0:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200015d4:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
200015d8:	00002021 	move	a0,zero
200015dc:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200015e0:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
200015e4:	00002021 	move	a0,zero
200015e8:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200015ec:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
200015f0:	00002021 	move	a0,zero
200015f4:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200015f8:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015fc:	8e020000 	lw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001600:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x24);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001604:	ae020000 	sw	v0,0(s0)
20001608:	8e020000 	lw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000160c:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x24);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001610:	34420040 	ori	v0,v0,0x40
20001614:	ae020000 	sw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001618:	8e020000 	lw	v0,0(s0)
2000161c:	00000000 	nop
20001620:	00518824 	and	s1,v0,s1
20001624:	ae110000 	sw	s1,0(s0)
20001628:	8e020000 	lw	v0,0(s0)
2000162c:	00000000 	nop
20001630:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001634:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001638:	00000000 	nop
		SPI_Swap(SPI0, 0x0F);
2000163c:	00002021 	move	a0,zero
20001640:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001644:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0x00);
20001648:	00002021 	move	a0,zero
2000164c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001650:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001654:	8e020000 	lw	v0,0(s0)

		init = True;
20001658:	24030001 	li	v1,1
		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000165c:	ae020000 	sw	v0,0(s0)
20001660:	8e020000 	lw	v0,0(s0)

		init = True;
20001664:	af830168 	sw	v1,360(gp)
		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001668:	34420040 	ori	v0,v0,0x40
2000166c:	ae020000 	sw	v0,0(s0)
	/* Transmit "proper" CAN messages only when the Mode is GO */
	//if(System_Mode_G == Go || System_Mode_G == Game_Over)
	{
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001670:	3c108000 	lui	s0,0x8000
20001674:	36100600 	ori	s0,s0,0x600
20001678:	8e020000 	lw	v0,0(s0)
2000167c:	2411ffbf 	li	s1,-65
20001680:	00511024 	and	v0,v0,s1
20001684:	ae020000 	sw	v0,0(s0)
20001688:	8e020000 	lw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX0_INS);
2000168c:	00002021 	move	a0,zero
20001690:	24050040 	li	a1,64
	/* Transmit "proper" CAN messages only when the Mode is GO */
	//if(System_Mode_G == Go || System_Mode_G == Game_Over)
	{
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001694:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX0_INS);
20001698:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000169c:	00000000 	nop
		spi_buffer_CAN(canIDLf, 8, candataLf);
200016a0:	8f8400e8 	lw	a0,232(gp)
200016a4:	2786006c 	addiu	a2,gp,108
200016a8:	0c000431 	jal	200010c4 <spi_buffer_CAN>
200016ac:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016b0:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
200016b4:	00002021 	move	a0,zero
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX0_INS);
		spi_buffer_CAN(canIDLf, 8, candataLf);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016b8:	ae020000 	sw	v0,0(s0)
200016bc:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
200016c0:	24050042 	li	a1,66
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX0_INS);
		spi_buffer_CAN(canIDLf, 8, candataLf);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016c4:	34420040 	ori	v0,v0,0x40
200016c8:	ae020000 	sw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
200016cc:	8e020000 	lw	v0,0(s0)
200016d0:	00000000 	nop
200016d4:	00511024 	and	v0,v0,s1
200016d8:	ae020000 	sw	v0,0(s0)
200016dc:	8e020000 	lw	v0,0(s0)
200016e0:	00000000 	nop
200016e4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX1_INS);
200016e8:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200016ec:	00000000 	nop
		spi_buffer_CAN(canIDRt, 8, candataRt);
200016f0:	8f840068 	lw	a0,104(gp)
200016f4:	27860098 	addiu	a2,gp,152
200016f8:	0c000431 	jal	200010c4 <spi_buffer_CAN>
200016fc:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001700:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001704:	00002021 	move	a0,zero

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
		spi_buffer_CAN(canIDRt, 8, candataRt);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001708:	ae020000 	sw	v0,0(s0)
2000170c:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001710:	24050044 	li	a1,68

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
		spi_buffer_CAN(canIDRt, 8, candataRt);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001714:	34420040 	ori	v0,v0,0x40
20001718:	ae020000 	sw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000171c:	8e020000 	lw	v0,0(s0)
20001720:	00000000 	nop
20001724:	00511024 	and	v0,v0,s1
20001728:	ae020000 	sw	v0,0(s0)
2000172c:	8e020000 	lw	v0,0(s0)
20001730:	00000000 	nop
20001734:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001738:	0c000ab8 	jal	20002ae0 <SPI_Swap>
2000173c:	00000000 	nop
		spi_buffer_CAN(0x05A5EEEE, 8, servo);
20001740:	3c0405a5 	lui	a0,0x5a5
20001744:	278600a8 	addiu	a2,gp,168
20001748:	3484eeee 	ori	a0,a0,0xeeee
2000174c:	0c000431 	jal	200010c4 <spi_buffer_CAN>
20001750:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001754:	8e020000 	lw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
20001758:	00002021 	move	a0,zero

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
		spi_buffer_CAN(0x05A5EEEE, 8, servo);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000175c:	ae020000 	sw	v0,0(s0)
20001760:	8e020000 	lw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
20001764:	24050081 	li	a1,129

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
		spi_buffer_CAN(0x05A5EEEE, 8, servo);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001768:	34420040 	ori	v0,v0,0x40
2000176c:	ae020000 	sw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001770:	8e020000 	lw	v0,0(s0)
20001774:	00000000 	nop
20001778:	00511024 	and	v0,v0,s1
2000177c:	ae020000 	sw	v0,0(s0)
20001780:	8e020000 	lw	v0,0(s0)
20001784:	00000000 	nop
20001788:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX0_INS);
2000178c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001790:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001794:	8e020000 	lw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
20001798:	00002021 	move	a0,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000179c:	ae020000 	sw	v0,0(s0)
200017a0:	8e020000 	lw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
200017a4:	24050082 	li	a1,130
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017a8:	34420040 	ori	v0,v0,0x40
200017ac:	ae020000 	sw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
200017b0:	8e020000 	lw	v0,0(s0)
200017b4:	00000000 	nop
200017b8:	00511024 	and	v0,v0,s1
200017bc:	ae020000 	sw	v0,0(s0)
200017c0:	8e020000 	lw	v0,0(s0)
200017c4:	00000000 	nop
200017c8:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX1_INS);
200017cc:	0c000ab8 	jal	20002ae0 <SPI_Swap>
200017d0:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017d4:	8e020000 	lw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
200017d8:	00002021 	move	a0,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017dc:	ae020000 	sw	v0,0(s0)
200017e0:	8e020000 	lw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
200017e4:	24050084 	li	a1,132
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017e8:	34420040 	ori	v0,v0,0x40
200017ec:	ae020000 	sw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
200017f0:	8e020000 	lw	v0,0(s0)
200017f4:	00000000 	nop
200017f8:	00518824 	and	s1,v0,s1
200017fc:	ae110000 	sw	s1,0(s0)
20001800:	8e020000 	lw	v0,0(s0)
20001804:	00000000 	nop
20001808:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX2_INS);
2000180c:	0c000ab8 	jal	20002ae0 <SPI_Swap>
20001810:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001814:	8e020000 	lw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
20001818:	3c054000 	lui	a1,0x4000
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000181c:	ae020000 	sw	v0,0(s0)
20001820:	8e020000 	lw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
	}

}
20001824:	8fbf001c 	lw	ra,28(sp)
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001828:	34420040 	ori	v0,v0,0x40
2000182c:	ae020000 	sw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
	}

}
20001830:	8fb10018 	lw	s1,24(sp)
20001834:	8fb00014 	lw	s0,20(sp)
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
20001838:	24a503b4 	addiu	a1,a1,948
2000183c:	24040090 	li	a0,144
20001840:	080003f9 	j	20000fe4 <spi_receive_CAN>
20001844:	27bd0020 	addiu	sp,sp,32

20001848 <Message_Sender_Init>:
/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
{
20001848:	27bdffe8 	addiu	sp,sp,-24
	/* Task initialisation */
	// SPI  0
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);
2000184c:	00002021 	move	a0,zero
20001850:	00002821 	move	a1,zero
/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
{
20001854:	afbf0014 	sw	ra,20(sp)
	/* Task initialisation */
	// SPI  0
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);
20001858:	0c000aab 	jal	20002aac <SPI_Init>
2000185c:	24060005 	li	a2,5
	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
20001860:	3c028000 	lui	v0,0x8000
20001864:	34420600 	ori	v0,v0,0x600
20001868:	8c440004 	lw	a0,4(v0)
2000186c:	2403ffbf 	li	v1,-65
20001870:	00831824 	and	v1,a0,v1
20001874:	ac430004 	sw	v1,4(v0)
20001878:	8c430004 	lw	v1,4(v0)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
2000187c:	24040001 	li	a0,1
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
20001880:	34630040 	ori	v1,v1,0x40
20001884:	ac430004 	sw	v1,4(v0)
	GPIO_Write(CS_PIN, GPIO_HIGH);
20001888:	8c430000 	lw	v1,0(v0)
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;
2000188c:	3c064000 	lui	a2,0x4000

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);
20001890:	ac430000 	sw	v1,0(v0)
20001894:	8c430000 	lw	v1,0(v0)
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;
20001898:	acc403c4 	sw	a0,964(a2)

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);
2000189c:	34630040 	ori	v1,v1,0x40
200018a0:	ac430000 	sw	v1,0(v0)

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
200018a4:	8c450004 	lw	a1,4(v0)
200018a8:	2403fffb 	li	v1,-5
200018ac:	00a31824 	and	v1,a1,v1
200018b0:	ac430004 	sw	v1,4(v0)
200018b4:	8c430004 	lw	v1,4(v0)
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;
200018b8:	af800168 	sw	zero,360(gp)
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
200018bc:	34630004 	ori	v1,v1,0x4
200018c0:	ac430004 	sw	v1,4(v0)
	GPIO_Write(RST_PIN, GPIO_HIGH);
200018c4:	8c450000 	lw	a1,0(v0)

	init = False;
200018c8:	278300a8 	addiu	v1,gp,168

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);
200018cc:	ac450000 	sw	a1,0(v0)
200018d0:	8c450000 	lw	a1,0(v0)
200018d4:	00000000 	nop
200018d8:	34a50004 	ori	a1,a1,0x4
200018dc:	ac450000 	sw	a1,0(v0)
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;
200018e0:	24020033 	li	v0,51
200018e4:	a3820165 	sb	v0,357(gp)

	bufferRX0.status = Used;
200018e8:	3c024000 	lui	v0,0x4000
200018ec:	ac4403b4 	sw	a0,948(v0)

/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
200018f0:	24620008 	addiu	v0,v1,8

	init = False;

	for(uint8_t i = 0; i < 8; i++)
	{
		servo[i] = 0x0;
200018f4:	a0600000 	sb	zero,0(v1)
200018f8:	24630001 	addiu	v1,v1,1
	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;

	for(uint8_t i = 0; i < 8; i++)
200018fc:	1462fffd 	bne	v1,v0,200018f4 <Message_Sender_Init+0xac>
20001900:	00000000 	nop
	{
		servo[i] = 0x0;
	}

	ticked = 0;
}
20001904:	8fbf0014 	lw	ra,20(sp)
	for(uint8_t i = 0; i < 8; i++)
	{
		servo[i] = 0x0;
	}

	ticked = 0;
20001908:	a7800188 	sh	zero,392(gp)
}
2000190c:	03e00008 	jr	ra
20001910:	27bd0018 	addiu	sp,sp,24

20001914 <Flashing_LED_Init>:
/**
 * Initialises the GPIO pin and outputs the initial value to the LED.
 */
void Flashing_LED_Init(void)
{
	GPIO_Set_Direction(LED_Pin, GPIO_OUTPUT);
20001914:	3c028000 	lui	v0,0x8000
20001918:	34420200 	ori	v0,v0,0x200
2000191c:	8c440004 	lw	a0,4(v0)
20001920:	2403fdff 	li	v1,-513
20001924:	00831824 	and	v1,a0,v1
20001928:	ac430004 	sw	v1,4(v0)
2000192c:	8c440004 	lw	a0,4(v0)
	GPIO_Write(LED_Pin, led_state);
20001930:	8f830004 	lw	v1,4(gp)
/**
 * Initialises the GPIO pin and outputs the initial value to the LED.
 */
void Flashing_LED_Init(void)
{
	GPIO_Set_Direction(LED_Pin, GPIO_OUTPUT);
20001934:	34840200 	ori	a0,a0,0x200
20001938:	ac440004 	sw	a0,4(v0)
	GPIO_Write(LED_Pin, led_state);
2000193c:	2c640001 	sltiu	a0,v1,1
20001940:	8c450000 	lw	a1,0(v0)
20001944:	00042240 	sll	a0,a0,0x9
20001948:	00042027 	nor	a0,zero,a0
2000194c:	00852024 	and	a0,a0,a1
20001950:	ac440000 	sw	a0,0(v0)
20001954:	8c440000 	lw	a0,0(v0)
20001958:	00031a40 	sll	v1,v1,0x9
2000195c:	00641825 	or	v1,v1,a0
20001960:	ac430000 	sw	v1,0(v0)
}
20001964:	03e00008 	jr	ra
20001968:	00000000 	nop

2000196c <Flashing_LED_Toggle>:
/**
 * Toggles the state of the GPIO pin and its LED.
 */
void Flashing_LED_Toggle(void)
{
	GPIO_Write(LED_Pin, led_state);
2000196c:	8f830004 	lw	v1,4(gp)
20001970:	3c028000 	lui	v0,0x8000
20001974:	34420200 	ori	v0,v0,0x200
20001978:	2c640001 	sltiu	a0,v1,1
2000197c:	8c460000 	lw	a2,0(v0)
20001980:	00042a40 	sll	a1,a0,0x9
20001984:	00052827 	nor	a1,zero,a1
20001988:	00a62824 	and	a1,a1,a2
2000198c:	ac450000 	sw	a1,0(v0)
20001990:	8c450000 	lw	a1,0(v0)
20001994:	00033240 	sll	a2,v1,0x9
20001998:	00c52825 	or	a1,a2,a1
	if(System_Mode_G == Set)
2000199c:	8f8600fc 	lw	a2,252(gp)
/**
 * Toggles the state of the GPIO pin and its LED.
 */
void Flashing_LED_Toggle(void)
{
	GPIO_Write(LED_Pin, led_state);
200019a0:	ac450000 	sw	a1,0(v0)
	if(System_Mode_G == Set)
200019a4:	24050001 	li	a1,1
200019a8:	14c5000a 	bne	a2,a1,200019d4 <Flashing_LED_Toggle+0x68>
200019ac:	00000000 	nop
	{
		GPIO_Write(Error_Lamp, led_state);
200019b0:	8c450000 	lw	a1,0(v0)
200019b4:	00042200 	sll	a0,a0,0x8
200019b8:	00042027 	nor	a0,zero,a0
200019bc:	00852024 	and	a0,a0,a1
200019c0:	ac440000 	sw	a0,0(v0)
200019c4:	8c440000 	lw	a0,0(v0)
200019c8:	00032a00 	sll	a1,v1,0x8
200019cc:	0800067a 	j	200019e8 <Flashing_LED_Toggle+0x7c>
200019d0:	00a42025 	or	a0,a1,a0
	}
	else
	{
		GPIO_Write(Error_Lamp, GPIO_LOW);
200019d4:	8c450000 	lw	a1,0(v0)
200019d8:	2404feff 	li	a0,-257
200019dc:	00a42024 	and	a0,a1,a0
200019e0:	ac440000 	sw	a0,0(v0)
200019e4:	8c440000 	lw	a0,0(v0)
	}
	led_state = !led_state;
200019e8:	2c630001 	sltiu	v1,v1,1
	{
		GPIO_Write(Error_Lamp, led_state);
	}
	else
	{
		GPIO_Write(Error_Lamp, GPIO_LOW);
200019ec:	ac440000 	sw	a0,0(v0)
	}
	led_state = !led_state;
}
200019f0:	03e00008 	jr	ra
200019f4:	af830004 	sw	v1,4(gp)

200019f8 <Course_Corrector_Init>:
 * This will be called from Tasks_Init by default.
 */
void Course_Corrector_Init(void)
{
	/* Initialisation of course correction values */
	Course_correction_Lf = False;
200019f8:	af800074 	sw	zero,116(gp)
	Course_correction_Rt = False;
}
200019fc:	03e00008 	jr	ra
20001a00:	af800064 	sw	zero,100(gp)

20001a04 <Course_Corrector_Update>:
 * Basic implementation: To reduce the speed of the faster side.
 * Advanced requirement: To recalculate the Script to compensate for deviation.
 */
void Course_Corrector_Update(void)
{
	if(System_Mode_G == Go)
20001a04:	8f8300fc 	lw	v1,252(gp)
20001a08:	24020002 	li	v0,2
20001a0c:	14620011 	bne	v1,v0,20001a54 <Course_Corrector_Update+0x50>
20001a10:	00000000 	nop
	{
		/* Encoder monitor task */
		/* If the Left side is faster than the Right, activate the Left CC flag */
		if((Motor_Lf_Enc_Track - Motor_Rt_Enc_Track) > COURSE_CORRECTION_BUFFER)
20001a14:	8f820040 	lw	v0,64(gp)
20001a18:	8f8300d8 	lw	v1,216(gp)
20001a1c:	00000000 	nop
20001a20:	00432023 	subu	a0,v0,v1
20001a24:	28840002 	slti	a0,a0,2
20001a28:	14800005 	bnez	a0,20001a40 <Course_Corrector_Update+0x3c>
20001a2c:	00621023 	subu	v0,v1,v0
		{
			Course_correction_Lf = False;
			Course_correction_Rt = True;
20001a30:	24020001 	li	v0,1
20001a34:	af820064 	sw	v0,100(gp)
	{
		/* Encoder monitor task */
		/* If the Left side is faster than the Right, activate the Left CC flag */
		if((Motor_Lf_Enc_Track - Motor_Rt_Enc_Track) > COURSE_CORRECTION_BUFFER)
		{
			Course_correction_Lf = False;
20001a38:	03e00008 	jr	ra
20001a3c:	af800074 	sw	zero,116(gp)
			Course_correction_Rt = True;
		}
		/* If the Right side is faster than the Left, activate the Right CC flag */
		else if((Motor_Rt_Enc_Track - Motor_Lf_Enc_Track) > COURSE_CORRECTION_BUFFER)
20001a40:	28420002 	slti	v0,v0,2
20001a44:	14400003 	bnez	v0,20001a54 <Course_Corrector_Update+0x50>
20001a48:	24020001 	li	v0,1
		{
			Course_correction_Lf = True;
20001a4c:	08000696 	j	20001a58 <Course_Corrector_Update+0x54>
20001a50:	af820074 	sw	v0,116(gp)

	}
	/* Ensure default is False */
	else
	{
		Course_correction_Lf = False;
20001a54:	af800074 	sw	zero,116(gp)
		Course_correction_Rt = False;
20001a58:	03e00008 	jr	ra
20001a5c:	af800064 	sw	zero,100(gp)

20001a60 <CAN_relay_Init>:
 * This will be called from Tasks_Init by default.
 */
void CAN_relay_Init(void)
{
	/* Initialisation of variables */
	motor_speed_Lf = 0x0;
20001a60:	a780018e 	sh	zero,398(gp)
	motor_speed_Rt = 0x0;
20001a64:	a780018c 	sh	zero,396(gp)
	motor_direction_Lf = 0x0;
20001a68:	a3800190 	sb	zero,400(gp)
	motor_direction_Rt = 0x0;
20001a6c:	a380018a 	sb	zero,394(gp)
	canIDLf = 0;
20001a70:	af8000e8 	sw	zero,232(gp)
	canIDRt = 0;
20001a74:	af800068 	sw	zero,104(gp)
20001a78:	00001021 	move	v0,zero
	for(uint8_t i = 0; i < 8; i++)
	{
		candataLf[i] = 0;
20001a7c:	2785006c 	addiu	a1,gp,108
		candataRt[i] = 0;
20001a80:	27840098 	addiu	a0,gp,152
	motor_speed_Rt = 0x0;
	motor_direction_Lf = 0x0;
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
20001a84:	24030008 	li	v1,8
	{
		candataLf[i] = 0;
20001a88:	00453821 	addu	a3,v0,a1
		candataRt[i] = 0;
20001a8c:	00443021 	addu	a2,v0,a0
20001a90:	24420001 	addiu	v0,v0,1
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
	{
		candataLf[i] = 0;
20001a94:	a0e00000 	sb	zero,0(a3)
	motor_speed_Rt = 0x0;
	motor_direction_Lf = 0x0;
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
20001a98:	1443fffb 	bne	v0,v1,20001a88 <CAN_relay_Init+0x28>
20001a9c:	a0c00000 	sb	zero,0(a2)
		candataLf[i] = 0;
		candataRt[i] = 0;
	}

	/* Initialisation of Sensor Readings */
	sensorReadings.IRLeft = 0xFF;
20001aa0:	3c044000 	lui	a0,0x4000
20001aa4:	240200ff 	li	v0,255
	sensorReadings.IRRight = 0xFF;
20001aa8:	248303d4 	addiu	v1,a0,980
	sensorReadings.USFwd = 0xFF;
20001aac:	ac620008 	sw	v0,8(v1)
		candataLf[i] = 0;
		candataRt[i] = 0;
	}

	/* Initialisation of Sensor Readings */
	sensorReadings.IRLeft = 0xFF;
20001ab0:	ac8203d4 	sw	v0,980(a0)
	sensorReadings.IRRight = 0xFF;
	sensorReadings.USFwd = 0xFF;
}
20001ab4:	03e00008 	jr	ra
20001ab8:	ac620004 	sw	v0,4(v1)

20001abc <CAN_relay_Update>:
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001abc:	3c024000 	lui	v0,0x4000
20001ac0:	244203b4 	addiu	v0,v0,948
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001ac4:	9047000e 	lbu	a3,14(v0)
20001ac8:	9043000f 	lbu	v1,15(v0)

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001acc:	9045000d 	lbu	a1,13(v0)

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001ad0:	30e7003f 	andi	a3,a3,0x3f
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001ad4:	9046000b 	lbu	a2,11(v0)
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001ad8:	3063003f 	andi	v1,v1,0x3f
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001adc:	3c044000 	lui	a0,0x4000
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001ae0:	00073980 	sll	a3,a3,0x6
20001ae4:	00e33825 	or	a3,a3,v1

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001ae8:	30a5003f 	andi	a1,a1,0x3f
20001aec:	248303d4 	addiu	v1,a0,980
	{
		/* Read CAN buffer */
		readCAN();

		/* Motor direction control */
		switch(Left_motor_direction_G)
20001af0:	8f820094 	lw	v0,148(gp)
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001af4:	30c6003f 	andi	a2,a2,0x3f
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001af8:	ac670008 	sw	a3,8(v1)

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001afc:	ac650004 	sw	a1,4(v1)
	{
		/* Read CAN buffer */
		readCAN();

		/* Motor direction control */
		switch(Left_motor_direction_G)
20001b00:	24030001 	li	v1,1
20001b04:	10430004 	beq	v0,v1,20001b18 <CAN_relay_Update+0x5c>
20001b08:	ac8603d4 	sw	a2,980(a0)
20001b0c:	24030002 	li	v1,2
20001b10:	14430003 	bne	v0,v1,20001b20 <CAN_relay_Update+0x64>
20001b14:	00000000 	nop
		case Forwards:
			motor_direction_Lf = 0x1;
			break;
		case Reverse:
			motor_direction_Lf = 0x2;
			break;
20001b18:	080006c9 	j	20001b24 <CAN_relay_Update+0x68>
20001b1c:	a3820190 	sb	v0,400(gp)
		case Off:
		default:
			motor_direction_Lf = 0x0;
20001b20:	a3800190 	sb	zero,400(gp)
			break;
		}

		switch(Right_motor_direction_G)
20001b24:	8f820084 	lw	v0,132(gp)
20001b28:	24030001 	li	v1,1
20001b2c:	10430003 	beq	v0,v1,20001b3c <CAN_relay_Update+0x80>
20001b30:	24030002 	li	v1,2
20001b34:	14430003 	bne	v0,v1,20001b44 <CAN_relay_Update+0x88>
20001b38:	00000000 	nop
		case Forwards:
			motor_direction_Rt = 0x1;
			break;
		case Reverse:
			motor_direction_Rt = 0x2;
			break;
20001b3c:	080006d2 	j	20001b48 <CAN_relay_Update+0x8c>
20001b40:	a382018a 	sb	v0,394(gp)
		case Off:
		default:
			motor_direction_Rt = 0x0;
20001b44:	a380018a 	sb	zero,394(gp)
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001b48:	978300b0 	lhu	v1,176(gp)
		motor_speed_Rt = Right_motor_speed_G * 2;
20001b4c:	978200b2 	lhu	v0,178(gp)
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001b50:	00031840 	sll	v1,v1,0x1
		motor_speed_Rt = Right_motor_speed_G * 2;
20001b54:	00021040 	sll	v0,v0,0x1

		if(Opponent_detected == True)
20001b58:	8f850044 	lw	a1,68(gp)
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001b5c:	3063ffff 	andi	v1,v1,0xffff
		motor_speed_Rt = Right_motor_speed_G * 2;
20001b60:	3042ffff 	andi	v0,v0,0xffff

		if(Opponent_detected == True)
20001b64:	24040001 	li	a0,1
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001b68:	a783018e 	sh	v1,398(gp)
		motor_speed_Rt = Right_motor_speed_G * 2;

		if(Opponent_detected == True)
20001b6c:	14a40003 	bne	a1,a0,20001b7c <CAN_relay_Update+0xc0>
20001b70:	a782018c 	sh	v0,396(gp)
		{
			motor_direction_Rt = 0x0;
20001b74:	a380018a 	sb	zero,394(gp)
			motor_direction_Lf = 0x0;
20001b78:	a3800190 	sb	zero,400(gp)
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
	candataLf[3] = motor_speed_Lf >> 8;
20001b7c:	00033202 	srl	a2,v1,0x8
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001b80:	93870190 	lbu	a3,400(gp)
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
	candataRt[0] = motor_direction_Rt & 0x3;
20001b84:	9385018a 	lbu	a1,394(gp)
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001b88:	3c0814ef 	lui	t0,0x14ef
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
	candataLf[3] = motor_speed_Lf >> 8;
20001b8c:	a386006f 	sb	a2,111(gp)
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001b90:	3c0610ef 	lui	a2,0x10ef
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001b94:	30e70003 	andi	a3,a3,0x3
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
	candataRt[0] = motor_direction_Rt & 0x3;
20001b98:	30a50003 	andi	a1,a1,0x3
	candataRt[2] = motor_speed_Rt & 0xFF;
	candataRt[3] = motor_speed_Rt >> 8;
20001b9c:	00022202 	srl	a0,v0,0x8
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001ba0:	3508d000 	ori	t0,t0,0xd000
	candataLf[3] = motor_speed_Lf >> 8;
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001ba4:	34c6d100 	ori	a2,a2,0xd100
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001ba8:	af8800e8 	sw	t0,232(gp)
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001bac:	a387006c 	sb	a3,108(gp)
	candataLf[3] = motor_speed_Lf >> 8;
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001bb0:	af860068 	sw	a2,104(gp)
	candataRt[0] = motor_direction_Rt & 0x3;
20001bb4:	a3850098 	sb	a1,152(gp)
	candataRt[2] = motor_speed_Rt & 0xFF;
	candataRt[3] = motor_speed_Rt >> 8;
20001bb8:	a384009b 	sb	a0,155(gp)
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
20001bbc:	a383006e 	sb	v1,110(gp)
	/* Force the Robot to stop by flooding the CAN with the STOP message */
	//else
	{
		//constructStopCAN();
	}
}
20001bc0:	03e00008 	jr	ra
20001bc4:	a382009a 	sb	v0,154(gp)

20001bc8 <Handler>:
        .section .text.Handler
        .ent Handler
        .set noat
        .set noreorder
Handler:
        mfc0   $26, $13			# Read CP0 Cause register
20001bc8:	401a6800 	mfc0	k0,c0_cause
		nop
20001bcc:	00000000 	nop
		and    $27, $26, 0x3f
20001bd0:	335b003f 	andi	k1,k0,0x3f
		la	   $26, TableBase
20001bd4:	3c1a4000 	lui	k0,0x4000
20001bd8:	275a0138 	addiu	k0,k0,312
		addu   $26, $26, $27
20001bdc:	035bd021 	addu	k0,k0,k1
		lw     $27, 0($26)
20001be0:	8f5b0000 	lw	k1,0(k0)
		nop
20001be4:	00000000 	nop
		j	   $27
20001be8:	03600008 	jr	k1
        nop
20001bec:	00000000 	nop

20001bf0 <End_Handler>:
        .end Handler

      .globl End_Handler
      .ent End_Handler
End_Handler:
 		mfc0   $26,$14         # Read CP0 EPC return address Reg
20001bf0:	401a7000 	mfc0	k0,c0_epc
        nop
20001bf4:	00000000 	nop
        j      $26             # Return from handler
20001bf8:	03400008 	jr	k0
        rfe
20001bfc:	42000010 	rfe

20001c00 <Excpt_Unused>:
	.set noreorder
	.set noat

	.globl Excpt_Unused
Excpt_Unused:
        j    Excpt_Unused 	# Loop
20001c00:	08000700 00000000                       ........

20001c08 <Excpt_IAbort>:
        nop

	.globl Excpt_IAbort
Excpt_IAbort:
		mfc0   $26,$14         # Read CP0 EPC return address Reg
20001c08:	401a7000 08000702 00000000              .p.@........

20001c14 <Excpt_DAbort>:
        j    Excpt_IAbort 	   # Loop
        nop

	.globl Excpt_DAbort
Excpt_DAbort:
        j    Excpt_DAbort 	   # Loop
20001c14:	08000705 00000000                       ........

20001c1c <Excpt_Syscall>:
        nop

	.globl Excpt_Syscall
Excpt_Syscall:
        j    Excpt_Syscall 	   # Loop
20001c1c:	08000707 00000000                       ........

20001c24 <Excpt_UndefInst>:
        nop

	.globl Excpt_UndefInst
Excpt_UndefInst:
        j    Excpt_UndefInst   # Loop
20001c24:	08000709 00000000                       ........

20001c2c <Excpt_Overflow>:
        nop

	.globl Excpt_Overflow
Excpt_Overflow:
        j    Excpt_Overflow	   # Loop
20001c2c:	0800070b 00000000                       ........

20001c34 <Excpt_CoPro>:
        nop

	.globl Excpt_CoPro
Excpt_CoPro:
        j    Excpt_CoPro	   # Loop
20001c34:	0800070d 00000000                       ........

20001c3c <Excpt_Break>:
        nop

	.globl Excpt_Break
Excpt_Break:
        j    Excpt_Break	   # Loop
20001c3c:	0800070f 00000000                       ........

20001c44 <InterruptHandler>:
        .ent InterruptHandler
        .set noat
        .set noreorder
InterruptHandler:
		/* Temporarily store the User Stack Pointer */
		move $k1, $sp
20001c44:	03a0d821 	move	k1,sp

		/* Load the IRQ Stack Pointer */
		la $k0, IRQ_Stk_Base_Val
20001c48:	3c1a4000 	lui	k0,0x4000
20001c4c:	375a4000 	ori	k0,k0,0x4000
		move $sp, $k0
20001c50:	0340e821 	move	sp,k0

		/* Allocate stack space */
#ifndef FPU
		subu $sp, 120
20001c54:	27bdff88 	addiu	sp,sp,-120
#else
		subu $sp, 252
#endif

		/* Save all the key general purpose registers */
		sw $ra,   4($sp)
20001c58:	afbf0004 	sw	ra,4(sp)
        sw $t9,   8($sp)
20001c5c:	afb90008 	sw	t9,8(sp)
        sw $t8,  12($sp)
20001c60:	afb8000c 	sw	t8,12(sp)
        sw $s7,  16($sp)
20001c64:	afb70010 	sw	s7,16(sp)
        sw $s6,  20($sp)
20001c68:	afb60014 	sw	s6,20(sp)
        sw $s5,  24($sp)
20001c6c:	afb50018 	sw	s5,24(sp)
        sw $s4,  28($sp)
20001c70:	afb4001c 	sw	s4,28(sp)
        sw $s3,  32($sp)
20001c74:	afb30020 	sw	s3,32(sp)
        sw $s2,  36($sp)
20001c78:	afb20024 	sw	s2,36(sp)
        sw $s1,  40($sp)
20001c7c:	afb10028 	sw	s1,40(sp)
        sw $s0,  44($sp)
20001c80:	afb0002c 	sw	s0,44(sp)
        sw $t7,  48($sp)
20001c84:	afaf0030 	sw	t7,48(sp)
        sw $t6,  52($sp)
20001c88:	afae0034 	sw	t6,52(sp)
        sw $t5,  56($sp)
20001c8c:	afad0038 	sw	t5,56(sp)
        sw $t4,  60($sp)
20001c90:	afac003c 	sw	t4,60(sp)
        sw $t3,  64($sp)
20001c94:	afab0040 	sw	t3,64(sp)
        sw $t2,  68($sp)
20001c98:	afaa0044 	sw	t2,68(sp)
        sw $t1,  72($sp)
20001c9c:	afa90048 	sw	t1,72(sp)
        sw $t0,  76($sp)
20001ca0:	afa8004c 	sw	t0,76(sp)
        sw $a3,  80($sp)
20001ca4:	afa70050 	sw	a3,80(sp)
        sw $a2,  84($sp)
20001ca8:	afa60054 	sw	a2,84(sp)
        sw $a1,  88($sp)
20001cac:	afa50058 	sw	a1,88(sp)
        sw $a0,  92($sp)
20001cb0:	afa4005c 	sw	a0,92(sp)
        sw $v1,  96($sp)
20001cb4:	afa30060 	sw	v1,96(sp)
        sw $v0, 100($sp)
20001cb8:	afa20064 	sw	v0,100(sp)
        sw $at, 104($sp)
20001cbc:	afa10068 	sw	at,104(sp)
        sw $k1, 108($sp)
20001cc0:	afbb006c 	sw	k1,108(sp)
		swc1 $f31, 236($sp)
		sw $t1, 240($sp)
#endif

        /* Get the Return Address (EPC) */
        mfc0 $k0, $14
20001cc4:	401a7000 	mfc0	k0,c0_epc

		/* Store the stack frame */
#ifndef FPU
		sw $fp, 112($sp)
20001cc8:	afbe0070 	sw	s8,112(sp)
		sw $k0, 116($sp)
20001ccc:	afba0074 	sw	k0,116(sp)
#else
		sw $fp, 244($sp)
		sw $k0, 248($sp)
#endif
		move $fp,$sp
20001cd0:	03a0f021 	move	s8,sp

		/* Clear pending interrupts */
		mfc0 $26,$13
20001cd4:	401a6800 	mfc0	k0,c0_cause
        nop
20001cd8:	00000000 	nop
        li   $26,0xFF00
20001cdc:	341aff00 	li	k0,0xff00
        mtc0 $26,$13
20001ce0:	409a6800 	mtc0	k0,c0_cause

 		subu $sp, 24
20001ce4:	27bdffe8 	addiu	sp,sp,-24

		/* Call C handler */
 		jal   Handle_Interrupts
20001ce8:	0c000a57 	jal	2000295c <Handle_Interrupts>
        nop
20001cec:	00000000 	nop

        addu $sp, 24
20001cf0:	27bd0018 	addiu	sp,sp,24
		lwc1 $f31, 236($sp)
		ctc1 $t0, $31
#endif

		/* Restore all the key general purpose registers */
		lw $ra,   4($sp)
20001cf4:	8fbf0004 	lw	ra,4(sp)
        lw $t9,   8($sp)
20001cf8:	8fb90008 	lw	t9,8(sp)
        lw $t8,  12($sp)
20001cfc:	8fb8000c 	lw	t8,12(sp)
        lw $s7,  16($sp)
20001d00:	8fb70010 	lw	s7,16(sp)
        lw $s6,  20($sp)
20001d04:	8fb60014 	lw	s6,20(sp)
        lw $s5,  24($sp)
20001d08:	8fb50018 	lw	s5,24(sp)
        lw $s4,  28($sp)
20001d0c:	8fb4001c 	lw	s4,28(sp)
        lw $s3,  32($sp)
20001d10:	8fb30020 	lw	s3,32(sp)
        lw $s2,  36($sp)
20001d14:	8fb20024 	lw	s2,36(sp)
        lw $s1,  40($sp)
20001d18:	8fb10028 	lw	s1,40(sp)
        lw $s0,  44($sp)
20001d1c:	8fb0002c 	lw	s0,44(sp)
        lw $t7,  48($sp)
20001d20:	8faf0030 	lw	t7,48(sp)
        lw $t6,  52($sp)
20001d24:	8fae0034 	lw	t6,52(sp)
        lw $t5,  56($sp)
20001d28:	8fad0038 	lw	t5,56(sp)
        lw $t4,  60($sp)
20001d2c:	8fac003c 	lw	t4,60(sp)
        lw $t3,  64($sp)
20001d30:	8fab0040 	lw	t3,64(sp)
        lw $t2,  68($sp)
20001d34:	8faa0044 	lw	t2,68(sp)
        lw $t1,  72($sp)
20001d38:	8fa90048 	lw	t1,72(sp)
        lw $t0,  76($sp)
20001d3c:	8fa8004c 	lw	t0,76(sp)
        lw $a3,  80($sp)
20001d40:	8fa70050 	lw	a3,80(sp)
        lw $a2,  84($sp)
20001d44:	8fa60054 	lw	a2,84(sp)
        lw $a1,  88($sp)
20001d48:	8fa50058 	lw	a1,88(sp)
        lw $a0,  92($sp)
20001d4c:	8fa4005c 	lw	a0,92(sp)
        lw $v1,  96($sp)
20001d50:	8fa30060 	lw	v1,96(sp)
        lw $v0, 100($sp)
20001d54:	8fa20064 	lw	v0,100(sp)
        lw $at, 104($sp)
20001d58:	8fa10068 	lw	at,104(sp)
        lw $k0, 108($sp)
20001d5c:	8fba006c 	lw	k0,108(sp)

#ifndef FPU
		/* Restore the stack frame */
		lw	$fp,112($sp)
20001d60:	8fbe0070 	lw	s8,112(sp)

        /* Get the Return Address (EPC) */
        lw $k1, 116($sp)
20001d64:	8fbb0074 	lw	k1,116(sp)
        
        /* Restore the stack pointer */
        addu $sp, 120
20001d68:	27bd0078 	addiu	sp,sp,120

        /* Restore the stack pointer */
        addu $sp, 252
#endif
        /* Load the User Stack Pointer */
        move $sp, $k0
20001d6c:	0340e821 	move	sp,k0

        /* Return from interrupt */
        j  $k1
20001d70:	03600008 	jr	k1

20001d74 <End_IRQ_Ptr>:
End_IRQ_Ptr:
        rfe
20001d74:	42000010                                ...B

20001d78 <Enable_Interrupts>:
	.global Enable_Interrupts
	.ent Enable_Interrupts

        .set noreorder
Enable_Interrupts:
        addiu   $29, $29, -24
20001d78:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001d7c:	afa80004 	sw	t0,4(sp)

        mfc0   $8, $12
20001d80:	40086000 	mfc0	t0,c0_sr
        nop
20001d84:	00000000 	nop
        ori   $8, $8, 0x01
20001d88:	35080001 	ori	t0,t0,0x1
        nop
20001d8c:	00000000 	nop
        mtc0   $8, $12
20001d90:	40886000 	mtc0	t0,c0_sr
        nop
20001d94:	00000000 	nop

        lw   $8, 4($29)
20001d98:	8fa80004 	lw	t0,4(sp)
        addiu   $29, $29, 24
20001d9c:	27bd0018 	addiu	sp,sp,24
        jr   $31
20001da0:	03e00008 	jr	ra
        nop
20001da4:	00000000 	nop

20001da8 <Disable_Interrupts>:
	.global Disable_Interrupts
	.ent Disable_Interrupts

    	.set noreorder
Disable_Interrupts:
        addiu   $29, $29, -24
20001da8:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001dac:	afa80004 	sw	t0,4(sp)

        mfc0    $8, $12
20001db0:	40086000 	mfc0	t0,c0_sr
        lui     $9, 0xFFFF
20001db4:	3c09ffff 	lui	t1,0xffff
        ori     $9, 0xFFFE
20001db8:	3529fffe 	ori	t1,t1,0xfffe
        nop
20001dbc:	00000000 	nop
        and     $8, $8, $9
20001dc0:	01094024 	and	t0,t0,t1
        nop
20001dc4:	00000000 	nop
        mtc0   $8, $12
20001dc8:	40886000 	mtc0	t0,c0_sr
        nop
20001dcc:	00000000 	nop

        lw   $8, 4($29)
20001dd0:	8fa80004 	lw	t0,4(sp)
        addiu   $29, $29, 24
20001dd4:	27bd0018 	addiu	sp,sp,24
        jr   $31
20001dd8:	03e00008 	jr	ra
        nop
20001ddc:	00000000 	nop

20001de0 <Enter_Sleep_Mode>:
	.global Sleep_Ptr
	.ent Enter_Sleep_Mode

    	.set noreorder
Enter_Sleep_Mode:
        addiu   $29, $29, -24
20001de0:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001de4:	afa80004 	sw	t0,4(sp)

        mfc0   $8, $16
20001de8:	40088000 	mfc0	t0,$16
        ori    $8, $8, 1
20001dec:	35080001 	ori	t0,t0,0x1

20001df0 <Sleep_Ptr>:
Sleep_Ptr:
        mtc0   $8, $16
20001df0:	40888000 00000000 8fa80004 27bd0018     ...@...........'
        nop

        lw   $8, 4($29)
        addiu   $29, $29, 24
        jr   $31
20001e00:	03e00008 00000000                       ........

20001e08 <LOG_Trigger_Breakpoint>:
	.section .text.LOG_Trigger_Breakpoint
	.global LOG_Trigger_Breakpoint
	.ent LOG_Trigger_Breakpoint
	
LOG_Trigger_Breakpoint:
	jr $31
20001e08:	03e00008 	jr	ra
20001e0c:	00000000 	nop

20001e10 <Scheduler_Tick>:

void Scheduler_Tick(void)
{
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
20001e10:	8f840008 	lw	a0,8(gp)

// Found in Scheduler_Tick, below.
extern void Hybrid_End_Label(void);

void Scheduler_Tick(void)
{
20001e14:	27bdffd0 	addiu	sp,sp,-48
20001e18:	afb60028 	sw	s6,40(sp)
20001e1c:	afb50024 	sw	s5,36(sp)
20001e20:	afb40020 	sw	s4,32(sp)
20001e24:	afb3001c 	sw	s3,28(sp)
20001e28:	afb20018 	sw	s2,24(sp)
20001e2c:	afb00010 	sw	s0,16(sp)
20001e30:	afbf002c 	sw	ra,44(sp)
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
20001e34:	0c000974 	jal	200025d0 <Log_Tick_Start>
20001e38:	afb10014 	sw	s1,20(sp)
#endif

	system_time += tick_skip_time;
20001e3c:	8f82000c 	lw	v0,12(gp)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001e40:	3c124000 	lui	s2,0x4000
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;
20001e44:	24420001 	addiu	v0,v0,1
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001e48:	3c162000 	lui	s6,0x2000
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001e4c:	00008021 	move	s0,zero
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;
20001e50:	af82000c 	sw	v0,12(gp)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001e54:	26520058 	addiu	s2,s2,88
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001e58:	26d61ee4 	addiu	s6,s6,7908
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001e5c:	8f95ffd8 	lw	s5,-40(gp)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001e60:	24140003 	li	s4,3
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001e64:	080007be 	j	20001ef8 <Hybrid_End_Label+0x14>
20001e68:	24130018 	li	s3,24
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001e6c:	00001012 	mflo	v0
20001e70:	24420001 	addiu	v0,v0,1
20001e74:	000210c0 	sll	v0,v0,0x3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001e78:	02130018 	mult	s0,s3

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001e7c:	00521021 	addu	v0,v0,s2
20001e80:	8c430000 	lw	v1,0(v0)
20001e84:	00000000 	nop
20001e88:	2463ffff 	addiu	v1,v1,-1
20001e8c:	ac430000 	sw	v1,0(v0)

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001e90:	00008812 	mflo	s1
20001e94:	02328821 	addu	s1,s1,s2
20001e98:	8e250000 	lw	a1,0(s1)
	ready &= Tasks[task_index].delay_counter <= 0;
20001e9c:	8c430000 	lw	v1,0(v0)
20001ea0:	0005282b 	sltu	a1,zero,a1
20001ea4:	28630001 	slti	v1,v1,1
#if (Config_Hybrid_Tasks == TRUE)
	ready &= Tasks[task_index].exec_from_isr == in_isr;
20001ea8:	92240014 	lbu	a0,20(s1)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
20001eac:	00651824 	and	v1,v1,a1
20001eb0:	00641824 	and	v1,v1,a0
20001eb4:	1060000f 	beqz	v1,20001ef4 <Hybrid_End_Label+0x10>
20001eb8:	00000000 	nop
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
20001ebc:	8e230004 	lw	v1,4(s1)
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001ec0:	24040001 	li	a0,1
	{
		Tasks[i].delay_counter -= tick_skip_time;
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
20001ec4:	ac430000 	sw	v1,0(v0)
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001ec8:	8e250000 	lw	a1,0(s1)
20001ecc:	0c0008df 	jal	2000237c <Log_Set_Address>
20001ed0:	02c03021 	move	a2,s6
							(uint32_t) Hybrid_End_Label);
#endif

			(*Tasks[i].task_function)();
20001ed4:	8e220000 	lw	v0,0(s1)
20001ed8:	00000000 	nop
20001edc:	0040f809 	jalr	v0
20001ee0:	00000000 	nop

20001ee4 <Hybrid_End_Label>:

			__asm__ volatile(".global Hybrid_End_Label");
			__asm__ volatile("Hybrid_End_Label:");

#if (Config_Logging == TRUE)
			Log_Hybrid_Start(i);
20001ee4:	0c00099e 02002021 0c000992 02002021     ....! ......! ..
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001ef4:	26100001 0215102b 1440ffdb 02140018     ...&+.....@.....
		}
#endif
	}

#if (Config_Logging == TRUE)
	Log_Reset_Addresses();
20001f04:	0c0008c5 00000000 8f840008 8fbf002c     ............,...
	tick_skip_time = Next_Tick();
	Timer_Set_Match(Config_Scheduler_Timer_Number,
			tick_skip_time * single_tick_time);
#endif
#endif
}
20001f14:	8fb60028 8fb50024 8fb40020 8fb3001c     (...$... .......
20001f24:	8fb20018 8fb10014 8fb00010 08000a2f     ............/...
#endif
	}

#if (Config_Logging == TRUE)
	Log_Reset_Addresses();
	Log_Tick_End(current_task);
20001f34:	27bd0030                                0..'

20001f38 <Scheduler_Dispatch>:

// Found in Scheduler_Dispatch, below.
extern void Task_End_Label(void);

void Scheduler_Dispatch(void)
{
20001f38:	27bdffd0 	addiu	sp,sp,-48
20001f3c:	afb60028 	sw	s6,40(sp)
20001f40:	afb3001c 	sw	s3,28(sp)
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001f44:	3c162000 	lui	s6,0x2000

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001f48:	3c134000 	lui	s3,0x4000

// Found in Scheduler_Dispatch, below.
extern void Task_End_Label(void);

void Scheduler_Dispatch(void)
{
20001f4c:	afb50024 	sw	s5,36(sp)
20001f50:	afb40020 	sw	s4,32(sp)
20001f54:	afb20018 	sw	s2,24(sp)
20001f58:	afbf002c 	sw	ra,44(sp)
20001f5c:	afb10014 	sw	s1,20(sp)
20001f60:	afb00010 	sw	s0,16(sp)
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
20001f64:	0c000a67 	jal	2000299c <Disable_Interrupt>
20001f68:	26730058 	addiu	s3,s3,88
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001f6c:	26d61ff8 	addiu	s6,s6,8184
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001f70:	8f92ffd8 	lw	s2,-40(gp)

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001f74:	24150018 	li	s5,24

void Scheduler_Dispatch(void)
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
20001f78:	08000809 	j	20002024 <Task_End_Label+0x2c>
20001f7c:	24140003 	li	s4,3
static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
	ready &= Tasks[task_index].delay_counter <= 0;
20001f80:	00001012 	mflo	v0
20001f84:	24420001 	addiu	v0,v0,1
20001f88:	000210c0 	sll	v0,v0,0x3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001f8c:	02150018 	mult	s0,s5
	ready &= Tasks[task_index].delay_counter <= 0;
20001f90:	00531021 	addu	v0,v0,s3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001f94:	00008812 	mflo	s1
20001f98:	02338821 	addu	s1,s1,s3
20001f9c:	8e230000 	lw	v1,0(s1)
	ready &= Tasks[task_index].delay_counter <= 0;
20001fa0:	8c450000 	lw	a1,0(v0)
#if (Config_Hybrid_Tasks == TRUE)
	ready &= Tasks[task_index].exec_from_isr == in_isr;
20001fa4:	92240014 	lbu	a0,20(s1)
static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
	ready &= Tasks[task_index].delay_counter <= 0;
20001fa8:	28a50001 	slti	a1,a1,1
20001fac:	0003182b 	sltu	v1,zero,v1
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
		{
			if (Task_Ready(i, FALSE))
20001fb0:	00a31824 	and	v1,a1,v1
20001fb4:	2c840001 	sltiu	a0,a0,1
20001fb8:	00641824 	and	v1,v1,a0
20001fbc:	10600015 	beqz	v1,20002014 <Task_End_Label+0x1c>
20001fc0:	00000000 	nop
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
20001fc4:	8e230004 	lw	v1,4(s1)
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001fc8:	00002021 	move	a0,zero
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
20001fcc:	ac430000 	sw	v1,0(v0)
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001fd0:	8e250000 	lw	a1,0(s1)
20001fd4:	0c0008df 	jal	2000237c <Log_Set_Address>
20001fd8:	02c03021 	move	a2,s6
								(uint32_t) Task_End_Label);
#endif

				current_task = i;
20001fdc:	af900008 	sw	s0,8(gp)
				Enable_Interrupt();
20001fe0:	0c000a59 	jal	20002964 <Enable_Interrupt>
20001fe4:	00000000 	nop

				(*Tasks[i].task_function)();
20001fe8:	8e220000 	lw	v0,0(s1)
20001fec:	00000000 	nop
20001ff0:	0040f809 	jalr	v0
20001ff4:	00000000 	nop

20001ff8 <Task_End_Label>:

				__asm__ volatile(".global Task_End_Label");
				__asm__ volatile("Task_End_Label:");

				Disable_Interrupt();
20001ff8:	0c000a67 00000000 02002021 0c0009e6     g.......! ......
				current_task = Config_Num_Tasks;

#if (Config_Logging == TRUE)
				Log_Task_Start(i);
20002008:	af920008 0c0009da 02002021 26100001     ........! .....&
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002018:	0212102b 1440ffd8 02140018 0c000a67     +.....@.....g...

static inline boolean_t Update_Required(void)
{
	boolean_t update = FALSE;

	Disable_Interrupt();
20002028:	00000000 8f82000c 00000000 10400005     ..............@.
	if (system_time > 0)
20002038:	00008021 8f82000c 24100001 2442ffff     !..........$..B$
	{
		update = TRUE;
		system_time--;
20002048:	af82000c 0c000a59 00000000 1600fff0     ....Y...........

void Scheduler_Dispatch(void)
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
20002058:	00008021 0c0008d5 00000000 0c000a59     !...........Y...

#if (Config_Logging == TRUE)
	Log_Idle();
#endif

	Enable_Interrupt();
20002068:	00000000 8fbf002c 8fb60028 8fb50024     ....,...(...$...
	Enter_Sleep_Mode();
#endif
}
20002078:	8fb40020 8fb3001c 8fb20018 8fb10014      ...............
20002088:	8fb00010 08000778 27bd0030              ....x...0..'

20002094 <Shutdown_System>:

// Found in the startup.strt assembly file.
extern void Enter_Sleep_Mode(void);

void Shutdown_System(void)
{
20002094:	27bdffe8 	addiu	sp,sp,-24
20002098:	afbf0014 	sw	ra,20(sp)
#if (Config_Hardware_Scheduler == TRUE)
	hwsch_register[0].enable = 0;
#endif

	Disable_Interrupt();
2000209c:	0c000a67 	jal	2000299c <Disable_Interrupt>
200020a0:	00000000 	nop
	Enter_Sleep_Mode();
}
200020a4:	8fbf0014 	lw	ra,20(sp)
#if (Config_Hardware_Scheduler == TRUE)
	hwsch_register[0].enable = 0;
#endif

	Disable_Interrupt();
	Enter_Sleep_Mode();
200020a8:	08000778 	j	20001de0 <Enter_Sleep_Mode>
200020ac:	27bd0018 	addiu	sp,sp,24

200020b0 <Scheduler_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Start(void)
{
200020b0:	27bdffe8 	addiu	sp,sp,-24
200020b4:	afbf0014 	sw	ra,20(sp)
#if (Config_Logging == TRUE && Config_Hardware_Scheduler != TRUE)
	Log_Init();
200020b8:	0c0009f2 	jal	200027c8 <Log_Init>
200020bc:	00000000 	nop
		tmrbuf_register[1] = (Config_Log_Buffer_Size / 8) - 1;
	}
	tmrbuf_register[2] = Config_Log_Num_Ticks;
#endif
#else
	Enable_Interrupt();
200020c0:	0c000a59 	jal	20002964 <Enable_Interrupt>
200020c4:	00000000 	nop
#endif

	Timer_Start(Config_Scheduler_Timer_Number);
}
200020c8:	8fbf0014 	lw	ra,20(sp)
#endif
#else
	Enable_Interrupt();
#endif

	Timer_Start(Config_Scheduler_Timer_Number);
200020cc:	00002021 	move	a0,zero
200020d0:	08000aa1 	j	20002a84 <Timer_Start>
200020d4:	27bd0018 	addiu	sp,sp,24

200020d8 <Scheduler_Init>:

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
200020d8:	3c0602fa 	lui	a2,0x2fa
200020dc:	00802821 	move	a1,a0
#endif

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
200020e0:	27bdffe8 	addiu	sp,sp,-24
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
200020e4:	00002021 	move	a0,zero
200020e8:	34c6f080 	ori	a2,a2,0xf080
#endif

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
200020ec:	afbf0014 	sw	ra,20(sp)
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
200020f0:	0c000a71 	jal	200029c4 <Timer_Init>
200020f4:	24070001 	li	a3,1
		}
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
200020f8:	0c000a4e 	jal	20002938 <Init_Interrupt>
200020fc:	af820010 	sw	v0,16(gp)
	current_task = Config_Num_Tasks;
20002100:	8f83ffd8 	lw	v1,-40(gp)
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter++;
20002104:	3c054000 	lui	a1,0x4000
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
20002108:	af830008 	sw	v1,8(gp)
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter++;
2000210c:	24a50058 	addiu	a1,a1,88
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
20002110:	00001021 	move	v0,zero
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002114:	08000850 	j	20002140 <Scheduler_Init+0x68>
20002118:	24040003 	li	a0,3
2000211c:	24420001 	addiu	v0,v0,1
	{
		Tasks[i].delay_counter++;
20002120:	00003012 	mflo	a2
20002124:	24c60001 	addiu	a2,a2,1
20002128:	000630c0 	sll	a2,a2,0x3
2000212c:	00c53021 	addu	a2,a2,a1
20002130:	8cc70000 	lw	a3,0(a2)
20002134:	00000000 	nop
20002138:	24e70001 	addiu	a3,a3,1
2000213c:	acc70000 	sw	a3,0(a2)
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002140:	0043302b 	sltu	a2,v0,v1
20002144:	14c0fff5 	bnez	a2,2000211c <Scheduler_Init+0x44>
20002148:	00440018 	mult	v0,a0
	{
		Tasks[i].delay_counter++;
	}
#endif
}
2000214c:	8fbf0014 	lw	ra,20(sp)
20002150:	00000000 	nop
20002154:	03e00008 	jr	ra
20002158:	27bd0018 	addiu	sp,sp,24

2000215c <Write_32>:

///////////////////////////////////////////////////////////////////////////////

void Write_32(const uint32_t value)
{
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 24);
2000215c:	8f820024 	lw	v0,36(gp)
20002160:	3c034000 	lui	v1,0x4000
20002164:	246305e0 	addiu	v1,v1,1504
20002168:	24450001 	addiu	a1,v0,1
2000216c:	00043602 	srl	a2,a0,0x18
20002170:	00431021 	addu	v0,v0,v1
20002174:	a0460000 	sb	a2,0(v0)
20002178:	af850024 	sw	a1,36(gp)
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 16);
2000217c:	8f820024 	lw	v0,36(gp)
20002180:	00043402 	srl	a2,a0,0x10
20002184:	24450001 	addiu	a1,v0,1
20002188:	30c600ff 	andi	a2,a2,0xff
2000218c:	00431021 	addu	v0,v0,v1
20002190:	a0460000 	sb	a2,0(v0)
20002194:	af850024 	sw	a1,36(gp)
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 8);
20002198:	8f820024 	lw	v0,36(gp)
2000219c:	00043202 	srl	a2,a0,0x8
200021a0:	24450001 	addiu	a1,v0,1
200021a4:	30c600ff 	andi	a2,a2,0xff
200021a8:	00431021 	addu	v0,v0,v1
200021ac:	a0460000 	sb	a2,0(v0)
200021b0:	af850024 	sw	a1,36(gp)
	Log_Buffer[buffer_index++] = (uint8_t) value;
200021b4:	8f820024 	lw	v0,36(gp)
200021b8:	308400ff 	andi	a0,a0,0xff
200021bc:	00431821 	addu	v1,v0,v1
200021c0:	24420001 	addiu	v0,v0,1
200021c4:	a0640000 	sb	a0,0(v1)
200021c8:	af820024 	sw	v0,36(gp)
}
200021cc:	03e00008 	jr	ra
200021d0:	00000000 	nop

200021d4 <Set_Watch>:

///////////////////////////////////////////////////////////////////////////////

void Set_Watch(const uint8_t number, const uint32_t value)
{
200021d4:	308400ff 	andi	a0,a0,0xff
	switch (number)
200021d8:	24020002 	li	v0,2
200021dc:	10820017 	beq	a0,v0,2000223c <Set_Watch+0x68>
200021e0:	2c820003 	sltiu	v0,a0,3
200021e4:	10400007 	beqz	v0,20002204 <Set_Watch+0x30>
200021e8:	24020004 	li	v0,4
200021ec:	1080000d 	beqz	a0,20002224 <Set_Watch+0x50>
200021f0:	24020001 	li	v0,1
200021f4:	1482001b 	bne	a0,v0,20002264 <Set_Watch+0x90>
200021f8:	00000000 	nop
200021fc:	0800088c 	j	20002230 <Set_Watch+0x5c>
20002200:	00000000 	nop
20002204:	10820013 	beq	a0,v0,20002254 <Set_Watch+0x80>
20002208:	2c820004 	sltiu	v0,a0,4
2000220c:	1440000e 	bnez	v0,20002248 <Set_Watch+0x74>
20002210:	24020005 	li	v0,5
20002214:	14820013 	bne	a0,v0,20002264 <Set_Watch+0x90>
20002218:	00000000 	nop
2000221c:	08000898 	j	20002260 <Set_Watch+0x8c>
20002220:	00000000 	nop
	{
	case 0:
		__asm__ volatile ("mtc0 %0, $18"::"r"(value));
20002224:	40859000 	mtc0	a1,$18
		break;
20002228:	03e00008 	jr	ra
2000222c:	00000000 	nop
	case 1:
		__asm__ volatile ("mtc0 %0, $19"::"r"(value));
20002230:	40859800 	mtc0	a1,$19
		break;
20002234:	03e00008 	jr	ra
20002238:	00000000 	nop
	case 2:
		__asm__ volatile ("mtc0 %0, $20"::"r"(value));
2000223c:	4085a000 	mtc0	a1,$20
		break;
20002240:	03e00008 	jr	ra
20002244:	00000000 	nop
	case 3:
		__asm__ volatile ("mtc0 %0, $21"::"r"(value));
20002248:	4085a800 	mtc0	a1,$21
		break;
2000224c:	03e00008 	jr	ra
20002250:	00000000 	nop
	case 4:
		__asm__ volatile ("mtc0 %0, $22"::"r"(value));
20002254:	4085b000 	mtc0	a1,$22
		break;
20002258:	03e00008 	jr	ra
2000225c:	00000000 	nop
	case 5:
		__asm__ volatile ("mtc0 %0, $23"::"r"(value));
20002260:	4085b800 	mtc0	a1,$23
20002264:	03e00008 	jr	ra
20002268:	00000000 	nop

2000226c <Get_Watch>:
}

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Watch(const uint8_t number)
{
2000226c:	308400ff 	andi	a0,a0,0xff
	uint32_t value = 0;

	switch (number)
20002270:	24020002 	li	v0,2
20002274:	1082001b 	beq	a0,v0,200022e4 <Get_Watch+0x78>
20002278:	00000000 	nop
2000227c:	2c820003 	sltiu	v0,a0,3
20002280:	10400008 	beqz	v0,200022a4 <Get_Watch+0x38>
20002284:	24020004 	li	v0,4
20002288:	10800010 	beqz	a0,200022cc <Get_Watch+0x60>
2000228c:	00000000 	nop
20002290:	24020001 	li	v0,1
20002294:	1482000b 	bne	a0,v0,200022c4 <Get_Watch+0x58>
20002298:	00000000 	nop
2000229c:	080008b6 	j	200022d8 <Get_Watch+0x6c>
200022a0:	00000000 	nop
200022a4:	10820015 	beq	a0,v0,200022fc <Get_Watch+0x90>
200022a8:	00000000 	nop
200022ac:	2c820004 	sltiu	v0,a0,4
200022b0:	1440000f 	bnez	v0,200022f0 <Get_Watch+0x84>
200022b4:	00000000 	nop
200022b8:	24020005 	li	v0,5
200022bc:	10820012 	beq	a0,v0,20002308 <Get_Watch+0x9c>
200022c0:	00000000 	nop
200022c4:	03e00008 	jr	ra
200022c8:	00001021 	move	v0,zero
	{
	case 0:
		__asm__ volatile ("mfc0 %0, $18":"=r"(value));
200022cc:	40029000 	mfc0	v0,$18
		break;
200022d0:	03e00008 	jr	ra
200022d4:	00000000 	nop
	case 1:
		__asm__ volatile ("mfc0 %0, $19":"=r"(value));
200022d8:	40029800 	mfc0	v0,$19
		break;
200022dc:	03e00008 	jr	ra
200022e0:	00000000 	nop
	case 2:
		__asm__ volatile ("mfc0 %0, $20":"=r"(value));
200022e4:	4002a000 	mfc0	v0,$20
		break;
200022e8:	03e00008 	jr	ra
200022ec:	00000000 	nop
	case 3:
		__asm__ volatile ("mfc0 %0, $21":"=r"(value));
200022f0:	4002a800 	mfc0	v0,$21
		break;
200022f4:	03e00008 	jr	ra
200022f8:	00000000 	nop
	case 4:
		__asm__ volatile ("mfc0 %0, $22":"=r"(value));
200022fc:	4002b000 	mfc0	v0,$22
		break;
20002300:	03e00008 	jr	ra
20002304:	00000000 	nop
	case 5:
		__asm__ volatile ("mfc0 %0, $23":"=r"(value));
20002308:	4002b800 	mfc0	v0,$23
	default:
		value = 0;
	}

	return value;
}
2000230c:	03e00008 	jr	ra
20002310:	00000000 	nop

20002314 <Log_Reset_Addresses>:
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
	Set_Watch(0, 0x20000008);
20002314:	3c052000 	lui	a1,0x2000
// Found in the startup.strt assembly file.
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
20002318:	27bdffe8 	addiu	sp,sp,-24
	Set_Watch(0, 0x20000008);
2000231c:	34a50008 	ori	a1,a1,0x8
// Found in the startup.strt assembly file.
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
20002320:	afbf0014 	sw	ra,20(sp)
	Set_Watch(0, 0x20000008);
20002324:	0c000875 	jal	200021d4 <Set_Watch>
20002328:	00002021 	move	a0,zero
	Set_Watch(1, (uint32_t) End_IRQ_Ptr);
2000232c:	3c052000 	lui	a1,0x2000
20002330:	24a51d74 	addiu	a1,a1,7540
20002334:	0c000875 	jal	200021d4 <Set_Watch>
20002338:	24040001 	li	a0,1
	Set_Watch(4, (uint32_t) Sleep_Ptr);
2000233c:	3c052000 	lui	a1,0x2000
}
20002340:	8fbf0014 	lw	ra,20(sp)

void Log_Reset_Addresses(void)
{
	Set_Watch(0, 0x20000008);
	Set_Watch(1, (uint32_t) End_IRQ_Ptr);
	Set_Watch(4, (uint32_t) Sleep_Ptr);
20002344:	24a51df0 	addiu	a1,a1,7664
20002348:	24040004 	li	a0,4
2000234c:	08000875 	j	200021d4 <Set_Watch>
20002350:	27bd0018 	addiu	sp,sp,24

20002354 <Log_Idle>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Idle(void)
{
20002354:	27bdffe8 	addiu	sp,sp,-24
20002358:	afbf0014 	sw	ra,20(sp)
	Disable_Interrupt();
2000235c:	0c000a67 	jal	2000299c <Disable_Interrupt>
20002360:	00000000 	nop
	idle_index = Config_Num_Tasks;
20002364:	8f82ffd8 	lw	v0,-40(gp)
	Enable_Interrupt();
}
20002368:	8fbf0014 	lw	ra,20(sp)
2000236c:	27bd0018 	addiu	sp,sp,24
///////////////////////////////////////////////////////////////////////////////

void Log_Idle(void)
{
	Disable_Interrupt();
	idle_index = Config_Num_Tasks;
20002370:	af82fff4 	sw	v0,-12(gp)
	Enable_Interrupt();
20002374:	08000a59 	j	20002964 <Enable_Interrupt>
20002378:	00000000 	nop

2000237c <Log_Set_Address>:

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
2000237c:	27bdffe0 	addiu	sp,sp,-32
	idle_index = UINT8_MAX;
20002380:	240200ff 	li	v0,255

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
20002384:	308400ff 	andi	a0,a0,0xff
20002388:	afb10018 	sw	s1,24(sp)
2000238c:	afb00014 	sw	s0,20(sp)
20002390:	afbf001c 	sw	ra,28(sp)
	idle_index = UINT8_MAX;
20002394:	af82fff4 	sw	v0,-12(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
20002398:	00c08021 	move	s0,a2
	idle_index = UINT8_MAX;
	if (in_isr)
2000239c:	1080000a 	beqz	a0,200023c8 <Log_Set_Address+0x4c>
200023a0:	00a08821 	move	s1,a1
	{
		Set_Watch(1, start);
200023a4:	0c000875 	jal	200021d4 <Set_Watch>
200023a8:	24040001 	li	a0,1
		Set_Watch(0, finish);
200023ac:	02002821 	move	a1,s0
		Disable_Interrupt();
		Set_Watch(2, start);
		Set_Watch(3, finish);
		Enable_Interrupt();
	}
}
200023b0:	8fbf001c 	lw	ra,28(sp)
200023b4:	8fb10018 	lw	s1,24(sp)
200023b8:	8fb00014 	lw	s0,20(sp)
{
	idle_index = UINT8_MAX;
	if (in_isr)
	{
		Set_Watch(1, start);
		Set_Watch(0, finish);
200023bc:	00002021 	move	a0,zero
200023c0:	08000875 	j	200021d4 <Set_Watch>
200023c4:	27bd0020 	addiu	sp,sp,32
	}
	else
	{
		Disable_Interrupt();
200023c8:	0c000a67 	jal	2000299c <Disable_Interrupt>
200023cc:	00000000 	nop
		Set_Watch(2, start);
200023d0:	02202821 	move	a1,s1
200023d4:	0c000875 	jal	200021d4 <Set_Watch>
200023d8:	24040002 	li	a0,2
		Set_Watch(3, finish);
200023dc:	02002821 	move	a1,s0
200023e0:	0c000875 	jal	200021d4 <Set_Watch>
200023e4:	24040003 	li	a0,3
		Enable_Interrupt();
	}
}
200023e8:	8fbf001c 	lw	ra,28(sp)
200023ec:	8fb10018 	lw	s1,24(sp)
200023f0:	8fb00014 	lw	s0,20(sp)
	else
	{
		Disable_Interrupt();
		Set_Watch(2, start);
		Set_Watch(3, finish);
		Enable_Interrupt();
200023f4:	08000a59 	j	20002964 <Enable_Interrupt>
200023f8:	27bd0020 	addiu	sp,sp,32

200023fc <Check_Buffer>:
// Found in the startup.strt assembly file.
extern void LOG_Trigger_Breakpoint(void);

void Check_Buffer(const uint32_t size)
{
	if (Config_Log_Buffer_Size - buffer_index < size + 1)
200023fc:	8f820024 	lw	v0,36(gp)
20002400:	240303e8 	li	v1,1000
20002404:	00621023 	subu	v0,v1,v0
20002408:	24840001 	addiu	a0,a0,1

// Found in the startup.strt assembly file.
extern void LOG_Trigger_Breakpoint(void);

void Check_Buffer(const uint32_t size)
{
2000240c:	27bdffe8 	addiu	sp,sp,-24
	if (Config_Log_Buffer_Size - buffer_index < size + 1)
20002410:	0044102b 	sltu	v0,v0,a0
20002414:	1040000a 	beqz	v0,20002440 <Check_Buffer+0x44>
20002418:	afbf0014 	sw	ra,20(sp)
	{
		Log_Buffer[buffer_index] = 'z';
2000241c:	8f830024 	lw	v1,36(gp)
20002420:	3c024000 	lui	v0,0x4000
20002424:	244205e0 	addiu	v0,v0,1504
20002428:	00621021 	addu	v0,v1,v0
2000242c:	2403007a 	li	v1,122
20002430:	a0430000 	sb	v1,0(v0)
		LOG_Trigger_Breakpoint();
20002434:	0c000782 	jal	20001e08 <LOG_Trigger_Breakpoint>
20002438:	00000000 	nop
		buffer_index = 0;
2000243c:	af800024 	sw	zero,36(gp)
	}
}
20002440:	8fbf0014 	lw	ra,20(sp)
20002444:	00000000 	nop
20002448:	03e00008 	jr	ra
2000244c:	27bd0018 	addiu	sp,sp,24

20002450 <Log_Task_Address>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
20002450:	27bdffe0 	addiu	sp,sp,-32
20002454:	afb00010 	sw	s0,16(sp)
20002458:	00808021 	move	s0,a0
	Check_Buffer(7);
2000245c:	24040007 	li	a0,7
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
20002460:	afbf001c 	sw	ra,28(sp)
20002464:	afb20018 	sw	s2,24(sp)
20002468:	afb10014 	sw	s1,20(sp)
2000246c:	30b200ff 	andi	s2,a1,0xff
	Check_Buffer(7);
20002470:	0c0008ff 	jal	200023fc <Check_Buffer>
20002474:	3c114000 	lui	s1,0x4000

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002478:	8f820024 	lw	v0,36(gp)
2000247c:	263105e0 	addiu	s1,s1,1504
20002480:	24430001 	addiu	v1,v0,1
20002484:	24050058 	li	a1,88
20002488:	00511021 	addu	v0,v0,s1

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
2000248c:	02002021 	move	a0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002490:	a0450000 	sb	a1,0(v0)
20002494:	af830024 	sw	v1,36(gp)

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
20002498:	0c000857 	jal	2000215c <Write_32>
2000249c:	00000000 	nop

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024a0:	8f820024 	lw	v0,36(gp)
200024a4:	24040070 	li	a0,112
200024a8:	24430001 	addiu	v1,v0,1
200024ac:	00511021 	addu	v0,v0,s1
200024b0:	a0440000 	sb	a0,0(v0)
200024b4:	af830024 	sw	v1,36(gp)
200024b8:	8f820024 	lw	v0,36(gp)
200024bc:	00000000 	nop
200024c0:	00518821 	addu	s1,v0,s1
200024c4:	a2320000 	sb	s2,0(s1)
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
200024c8:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024cc:	24420001 	addiu	v0,v0,1
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
200024d0:	8fb20018 	lw	s2,24(sp)
200024d4:	8fb10014 	lw	s1,20(sp)
200024d8:	8fb00010 	lw	s0,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024dc:	af820024 	sw	v0,36(gp)
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
200024e0:	03e00008 	jr	ra
200024e4:	27bd0020 	addiu	sp,sp,32

200024e8 <Log_ISR_Time>:
///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
200024e8:	8f82001c 	lw	v0,28(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
200024ec:	27bdffd8 	addiu	sp,sp,-40

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
200024f0:	00c2182b 	sltu	v1,a2,v0

///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
200024f4:	afb20020 	sw	s2,32(sp)
200024f8:	afb1001c 	sw	s1,28(sp)
200024fc:	afb00018 	sw	s0,24(sp)
20002500:	afbf0024 	sw	ra,36(sp)
20002504:	00808021 	move	s0,a0
20002508:	00a08821 	move	s1,a1

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
2000250c:	10600003 	beqz	v1,2000251c <Log_ISR_Time+0x34>
20002510:	00c29023 	subu	s2,a2,v0
	{
		return second - first;
	}

	return second + (UINT32_MAX - first);
20002514:	00029027 	nor	s2,zero,v0
20002518:	00d29021 	addu	s2,a2,s2

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
2000251c:	24040007 	li	a0,7
20002520:	0c0008ff 	jal	200023fc <Check_Buffer>
20002524:	afa60010 	sw	a2,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002528:	8f820024 	lw	v0,36(gp)
2000252c:	3c034000 	lui	v1,0x4000
20002530:	246305e0 	addiu	v1,v1,1504
20002534:	24440001 	addiu	a0,v0,1
20002538:	24050079 	li	a1,121
2000253c:	00431021 	addu	v0,v0,v1
20002540:	a0450000 	sb	a1,0(v0)
20002544:	af840024 	sw	a0,36(gp)
20002548:	8f820024 	lw	v0,36(gp)
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
2000254c:	322500ff 	andi	a1,s1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002550:	24440001 	addiu	a0,v0,1
20002554:	00431021 	addu	v0,v0,v1
20002558:	a0450000 	sb	a1,0(v0)
2000255c:	af840024 	sw	a0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
20002560:	2782fff8 	addiu	v0,gp,-8
20002564:	00508021 	addu	s0,v0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002568:	8f820024 	lw	v0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
2000256c:	92050000 	lbu	a1,0(s0)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002570:	00431821 	addu	v1,v0,v1
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
20002574:	3a3100ff 	xori	s1,s1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002578:	24420001 	addiu	v0,v0,1
2000257c:	a0650000 	sb	a1,0(v1)
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
20002580:	02402021 	move	a0,s2

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
20002584:	0011882b 	sltu	s1,zero,s1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002588:	af820024 	sw	v0,36(gp)
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
2000258c:	0c000857 	jal	2000215c <Write_32>
20002590:	00000000 	nop

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002594:	3a220001 	xori	v0,s1,0x1
20002598:	8f83001c 	lw	v1,28(gp)
2000259c:	8fa60010 	lw	a2,16(sp)
200025a0:	00118823 	negu	s1,s1
200025a4:	00021023 	negu	v0,v0
200025a8:	02263024 	and	a2,s1,a2
200025ac:	00431024 	and	v0,v0,v1
						(-no_update & previous_isr_time);
}
200025b0:	8fbf0024 	lw	ra,36(sp)
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
200025b4:	00463025 	or	a2,v0,a2
						(-no_update & previous_isr_time);
}
200025b8:	8fb20020 	lw	s2,32(sp)
200025bc:	8fb1001c 	lw	s1,28(sp)
200025c0:	8fb00018 	lw	s0,24(sp)
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
200025c4:	af86001c 	sw	a2,28(gp)
						(-no_update & previous_isr_time);
}
200025c8:	03e00008 	jr	ra
200025cc:	27bd0028 	addiu	sp,sp,40

200025d0 <Log_Tick_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
200025d0:	27bdffe0 	addiu	sp,sp,-32
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
200025d4:	8f850014 	lw	a1,20(gp)
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
200025d8:	afb00018 	sw	s0,24(sp)
200025dc:	00808021 	move	s0,a0
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
200025e0:	24040001 	li	a0,1
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
200025e4:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
200025e8:	0c00089b 	jal	2000226c <Get_Watch>
200025ec:	afa50010 	sw	a1,16(sp)
200025f0:	8fa50010 	lw	a1,16(sp)
200025f4:	00403021 	move	a2,v0
200025f8:	0c00093a 	jal	200024e8 <Log_ISR_Time>
200025fc:	24040003 	li	a0,3
	Log_ISR_Time(LOG_INTERRUPT_END, idle_index, Get_Watch(4));
20002600:	8f85fff4 	lw	a1,-12(gp)
20002604:	24040004 	li	a0,4
20002608:	0c00089b 	jal	2000226c <Get_Watch>
2000260c:	afa50010 	sw	a1,16(sp)
20002610:	8fa50010 	lw	a1,16(sp)
20002614:	00403021 	move	a2,v0
20002618:	0c00093a 	jal	200024e8 <Log_ISR_Time>
2000261c:	24040003 	li	a0,3

	last_index = task_index;

	Log_ISR_Time(LOG_INTERRUPT_START, task_index, Get_Watch(0));
20002620:	00002021 	move	a0,zero
20002624:	0c00089b 	jal	2000226c <Get_Watch>
20002628:	af900014 	sw	s0,20(gp)
2000262c:	00403021 	move	a2,v0
20002630:	02002821 	move	a1,s0
}
20002634:	8fbf001c 	lw	ra,28(sp)
20002638:	8fb00018 	lw	s0,24(sp)
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
	Log_ISR_Time(LOG_INTERRUPT_END, idle_index, Get_Watch(4));

	last_index = task_index;

	Log_ISR_Time(LOG_INTERRUPT_START, task_index, Get_Watch(0));
2000263c:	24040002 	li	a0,2
20002640:	0800093a 	j	200024e8 <Log_ISR_Time>
20002644:	27bd0020 	addiu	sp,sp,32

20002648 <Log_Hybrid_End>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
20002648:	27bdffe0 	addiu	sp,sp,-32
2000264c:	00802821 	move	a1,a0
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
20002650:	00002021 	move	a0,zero
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
20002654:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
20002658:	0c00089b 	jal	2000226c <Get_Watch>
2000265c:	afa50010 	sw	a1,16(sp)
20002660:	8fa50010 	lw	a1,16(sp)
}
20002664:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
20002668:	00403021 	move	a2,v0
2000266c:	24040005 	li	a0,5
20002670:	0800093a 	j	200024e8 <Log_ISR_Time>
20002674:	27bd0020 	addiu	sp,sp,32

20002678 <Log_Hybrid_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
20002678:	27bdffe0 	addiu	sp,sp,-32
2000267c:	00802821 	move	a1,a0
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002680:	24040001 	li	a0,1
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
20002684:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002688:	0c00089b 	jal	2000226c <Get_Watch>
2000268c:	afa50010 	sw	a1,16(sp)
20002690:	8fa50010 	lw	a1,16(sp)
}
20002694:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002698:	00403021 	move	a2,v0
2000269c:	24040004 	li	a0,4
200026a0:	0800093a 	j	200024e8 <Log_ISR_Time>
200026a4:	27bd0020 	addiu	sp,sp,32

200026a8 <Log_Time>:
///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
200026a8:	8f820018 	lw	v0,24(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
200026ac:	27bdffd8 	addiu	sp,sp,-40

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
200026b0:	00c2182b 	sltu	v1,a2,v0

///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
200026b4:	afb10020 	sw	s1,32(sp)
200026b8:	afb0001c 	sw	s0,28(sp)
200026bc:	afbf0024 	sw	ra,36(sp)
200026c0:	00808021 	move	s0,a0

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
200026c4:	10600003 	beqz	v1,200026d4 <Log_Time+0x2c>
200026c8:	00c28823 	subu	s1,a2,v0
	{
		return second - first;
	}

	return second + (UINT32_MAX - first);
200026cc:	00028827 	nor	s1,zero,v0
200026d0:	00d18821 	addu	s1,a2,s1

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
200026d4:	24040007 	li	a0,7
200026d8:	afa60014 	sw	a2,20(sp)
200026dc:	0c0008ff 	jal	200023fc <Check_Buffer>
200026e0:	afa50010 	sw	a1,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026e4:	8f820024 	lw	v0,36(gp)
200026e8:	3c034000 	lui	v1,0x4000
200026ec:	246305e0 	addiu	v1,v1,1504
200026f0:	24440001 	addiu	a0,v0,1
200026f4:	24070079 	li	a3,121
200026f8:	00431021 	addu	v0,v0,v1
200026fc:	a0470000 	sb	a3,0(v0)
20002700:	af840024 	sw	a0,36(gp)
20002704:	8f820024 	lw	v0,36(gp)
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
20002708:	8fa50010 	lw	a1,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000270c:	24440001 	addiu	a0,v0,1
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
20002710:	30a500ff 	andi	a1,a1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002714:	00431021 	addu	v0,v0,v1
20002718:	a0450000 	sb	a1,0(v0)
2000271c:	af840024 	sw	a0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
20002720:	2782fff8 	addiu	v0,gp,-8
20002724:	00508021 	addu	s0,v0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002728:	8f820024 	lw	v0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
2000272c:	92050000 	lbu	a1,0(s0)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002730:	00431821 	addu	v1,v0,v1
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
20002734:	02202021 	move	a0,s1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002738:	24420001 	addiu	v0,v0,1
2000273c:	a0650000 	sb	a1,0(v1)
20002740:	af820024 	sw	v0,36(gp)
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
20002744:	0c000857 	jal	2000215c <Write_32>
20002748:	00000000 	nop
	previous_time = cycle_count;
2000274c:	8fa60014 	lw	a2,20(sp)
}
20002750:	8fbf0024 	lw	ra,36(sp)
20002754:	8fb10020 	lw	s1,32(sp)
20002758:	8fb0001c 	lw	s0,28(sp)
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
	previous_time = cycle_count;
2000275c:	af860018 	sw	a2,24(gp)
}
20002760:	03e00008 	jr	ra
20002764:	27bd0028 	addiu	sp,sp,40

20002768 <Log_Task_End>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
20002768:	27bdffe0 	addiu	sp,sp,-32
2000276c:	00802821 	move	a1,a0
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
20002770:	24040003 	li	a0,3
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
20002774:	afbf001c 	sw	ra,28(sp)
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
20002778:	0c00089b 	jal	2000226c <Get_Watch>
2000277c:	afa50010 	sw	a1,16(sp)
20002780:	8fa50010 	lw	a1,16(sp)
}
20002784:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
20002788:	00403021 	move	a2,v0
2000278c:	24040001 	li	a0,1
20002790:	080009aa 	j	200026a8 <Log_Time>
20002794:	27bd0020 	addiu	sp,sp,32

20002798 <Log_Task_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
20002798:	27bdffe0 	addiu	sp,sp,-32
2000279c:	00802821 	move	a1,a0
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
200027a0:	24040002 	li	a0,2
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
200027a4:	afbf001c 	sw	ra,28(sp)
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
200027a8:	0c00089b 	jal	2000226c <Get_Watch>
200027ac:	afa50010 	sw	a1,16(sp)
200027b0:	8fa50010 	lw	a1,16(sp)
}
200027b4:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
200027b8:	00403021 	move	a2,v0
200027bc:	00002021 	move	a0,zero
200027c0:	080009aa 	j	200026a8 <Log_Time>
200027c4:	27bd0020 	addiu	sp,sp,32

200027c8 <Log_Init>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Init(void)
{
200027c8:	27bdffd8 	addiu	sp,sp,-40
	Check_Buffer(5);
200027cc:	24040005 	li	a0,5
}

///////////////////////////////////////////////////////////////////////////////

void Log_Init(void)
{
200027d0:	afbf0024 	sw	ra,36(sp)
200027d4:	afb30020 	sw	s3,32(sp)
200027d8:	afb2001c 	sw	s2,28(sp)
200027dc:	afb10018 	sw	s1,24(sp)
	Check_Buffer(5);
200027e0:	0c0008ff 	jal	200023fc <Check_Buffer>
200027e4:	afb00014 	sw	s0,20(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200027e8:	8f820024 	lw	v0,36(gp)
200027ec:	3c034000 	lui	v1,0x4000
200027f0:	246305e0 	addiu	v1,v1,1504
200027f4:	00431821 	addu	v1,v0,v1
200027f8:	24050057 	li	a1,87

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
200027fc:	3c0402fa 	lui	a0,0x2fa

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002800:	24420001 	addiu	v0,v0,1
20002804:	a0650000 	sb	a1,0(v1)

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
20002808:	3484f080 	ori	a0,a0,0xf080

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000280c:	af820024 	sw	v0,36(gp)

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
20002810:	0c000857 	jal	2000215c <Write_32>
20002814:	3c124000 	lui	s2,0x4000

	last_index = Config_Num_Tasks;
20002818:	8f93ffd8 	lw	s3,-40(gp)
2000281c:	00000000 	nop
20002820:	af930014 	sw	s3,20(gp)

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		if (Tasks[i].exec_from_isr == TRUE)
20002824:	26520058 	addiu	s2,s2,88
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);

	last_index = Config_Num_Tasks;
20002828:	00008021 	move	s0,zero

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
2000282c:	08000a1c 	j	20002870 <Log_Init+0xa8>
20002830:	24110018 	li	s1,24
20002834:	8f850014 	lw	a1,20(gp)
20002838:	00000000 	nop
	{
		if (Tasks[i].exec_from_isr == TRUE)
		{
			priority = (last_index * 2) - i;
2000283c:	00051040 	sll	v0,a1,0x1
		}
		else
		{
			priority = last_index - i;
20002840:	00b02823 	subu	a1,a1,s0
		}
		Log_Task_Address(Tasks[i].task_function, priority);
20002844:	00001812 	mflo	v1
20002848:	00721821 	addu	v1,v1,s2
	last_index = Config_Num_Tasks;

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		if (Tasks[i].exec_from_isr == TRUE)
2000284c:	90640014 	lbu	a0,20(v1)
20002850:	00000000 	nop
20002854:	10800002 	beqz	a0,20002860 <Log_Init+0x98>
20002858:	00000000 	nop
		{
			priority = (last_index * 2) - i;
2000285c:	00502823 	subu	a1,v0,s0
		}
		else
		{
			priority = last_index - i;
		}
		Log_Task_Address(Tasks[i].task_function, priority);
20002860:	8c640000 	lw	a0,0(v1)
20002864:	0c000914 	jal	20002450 <Log_Task_Address>
20002868:	30a500ff 	andi	a1,a1,0xff
	Write_32(Config_Oscillator_Frequency);

	last_index = Config_Num_Tasks;

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
2000286c:	26100001 	addiu	s0,s0,1
20002870:	0213102b 	sltu	v0,s0,s3
20002874:	1440ffef 	bnez	v0,20002834 <Log_Init+0x6c>
20002878:	02110018 	mult	s0,s1
			priority = last_index - i;
		}
		Log_Task_Address(Tasks[i].task_function, priority);
	}

	Log_Reset_Addresses();
2000287c:	0c0008c5 	jal	20002314 <Log_Reset_Addresses>
20002880:	00000000 	nop

	previous_time = Get_Watch(0);
20002884:	0c00089b 	jal	2000226c <Get_Watch>
20002888:	00002021 	move	a0,zero
	previous_isr_time = previous_time;
	Log_Time(LOG_TASK_START, last_index, 0);
2000288c:	8f850014 	lw	a1,20(gp)
}
20002890:	8fbf0024 	lw	ra,36(sp)
20002894:	8fb30020 	lw	s3,32(sp)
20002898:	8fb2001c 	lw	s2,28(sp)
2000289c:	8fb10018 	lw	s1,24(sp)
200028a0:	8fb00014 	lw	s0,20(sp)

	Log_Reset_Addresses();

	previous_time = Get_Watch(0);
	previous_isr_time = previous_time;
	Log_Time(LOG_TASK_START, last_index, 0);
200028a4:	00002021 	move	a0,zero
200028a8:	00003021 	move	a2,zero
}
200028ac:	27bd0028 	addiu	sp,sp,40
	}

	Log_Reset_Addresses();

	previous_time = Get_Watch(0);
	previous_isr_time = previous_time;
200028b0:	af82001c 	sw	v0,28(gp)
	Log_Time(LOG_TASK_START, last_index, 0);
200028b4:	080009aa 	j	200026a8 <Log_Time>
200028b8:	af820018 	sw	v0,24(gp)

200028bc <Log_Tick_End>:

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
	current_tick++;
200028bc:	8f820020 	lw	v0,32(gp)
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
200028c0:	27bdffe8 	addiu	sp,sp,-24
	current_tick++;
200028c4:	24420001 	addiu	v0,v0,1
	if (current_tick > Config_Log_Num_Ticks)
200028c8:	2c430065 	sltiu	v1,v0,101
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
200028cc:	afb00010 	sw	s0,16(sp)
200028d0:	afbf0014 	sw	ra,20(sp)
200028d4:	00808021 	move	s0,a0
	current_tick++;
	if (current_tick > Config_Log_Num_Ticks)
200028d8:	1460000d 	bnez	v1,20002910 <Log_Tick_End+0x54>
200028dc:	af820020 	sw	v0,32(gp)
	{
		Check_Buffer(1);
200028e0:	0c0008ff 	jal	200023fc <Check_Buffer>
200028e4:	24040001 	li	a0,1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200028e8:	8f820024 	lw	v0,36(gp)
200028ec:	3c034000 	lui	v1,0x4000
200028f0:	246305e0 	addiu	v1,v1,1504
200028f4:	00431821 	addu	v1,v0,v1
200028f8:	24040067 	li	a0,103
200028fc:	24420001 	addiu	v0,v0,1
20002900:	a0640000 	sb	a0,0(v1)
20002904:	af820024 	sw	v0,36(gp)
	current_tick++;
	if (current_tick > Config_Log_Num_Ticks)
	{
		Check_Buffer(1);
		Write_8('g');
		LOG_Trigger_Breakpoint();
20002908:	0c000782 	jal	20001e08 <LOG_Trigger_Breakpoint>
2000290c:	00000000 	nop
	}

	if (task_index >= Config_Num_Tasks)
20002910:	8f82ffd8 	lw	v0,-40(gp)
20002914:	00000000 	nop
20002918:	0202802b 	sltu	s0,s0,v0
2000291c:	16000002 	bnez	s0,20002928 <Log_Tick_End+0x6c>
20002920:	240200ff 	li	v0,255
	{
		idle_index = UINT8_MAX;
20002924:	af82fff4 	sw	v0,-12(gp)
	}
}
20002928:	8fbf0014 	lw	ra,20(sp)
2000292c:	8fb00010 	lw	s0,16(sp)
20002930:	03e00008 	jr	ra
20002934:	27bd0018 	addiu	sp,sp,24

20002938 <Init_Interrupt>:
///////////////////////////////////////////////////////////////////////////////


void Init_Interrupt(void)
{
	TableBase = (uint32_t)InterruptHandler;
20002938:	3c022000 	lui	v0,0x2000
2000293c:	24421c44 	addiu	v0,v0,7236
20002940:	af82ff98 	sw	v0,-104(gp)
 *
 */
uint32_t Status_Reg_Get()
{
	uint32_t regValue;
	__asm volatile("mfc0 %0, $12" : "=d" (regValue) :);
20002944:	40026000 	mfc0	v0,c0_sr
20002948:	00000000 	nop
 *
 * \param[in] The value to write.
 */
void Status_Reg_Set(uint32_t value)
{
	__asm volatile("mtc0 %0, $12" :: "d" ((unsigned long)(value)));
2000294c:	34420700 	ori	v0,v0,0x700
20002950:	40826000 	mtc0	v0,c0_sr

void Init_Interrupt(void)
{
	TableBase = (uint32_t)InterruptHandler;
	Enable_System_Interrupt(Config_Scheduler_Interrupt_Number);
}
20002954:	03e00008 	jr	ra
20002958:	00000000 	nop

2000295c <Handle_Interrupts>:

///////////////////////////////////////////////////////////////////////////////

void Handle_Interrupts(void)
{
	Scheduler_Tick();
2000295c:	08000784 	j	20001e10 <Scheduler_Tick>
20002960:	00000000 	nop

20002964 <Enable_Interrupt>:

///////////////////////////////////////////////////////////////////////////////

void Enable_Interrupt(void)
{
	if (nesting_level > 0)
20002964:	8f820028 	lw	v0,40(gp)
20002968:	00000000 	nop
2000296c:	10400005 	beqz	v0,20002984 <Enable_Interrupt+0x20>
20002970:	00000000 	nop
	{
		nesting_level--;
20002974:	2442ffff 	addiu	v0,v0,-1
20002978:	af820028 	sw	v0,40(gp)
	}

	if (nesting_level == 0)
2000297c:	8f820028 	lw	v0,40(gp)
20002980:	00000000 	nop
20002984:	14400003 	bnez	v0,20002994 <Enable_Interrupt+0x30>
20002988:	00000000 	nop
	{
		Enable_Interrupts();
2000298c:	0800075e 	j	20001d78 <Enable_Interrupts>
20002990:	00000000 	nop
20002994:	03e00008 	jr	ra
20002998:	00000000 	nop

2000299c <Disable_Interrupt>:
}

///////////////////////////////////////////////////////////////////////////////

void Disable_Interrupt(void)
{
2000299c:	27bdffe8 	addiu	sp,sp,-24
200029a0:	afbf0014 	sw	ra,20(sp)
	Disable_Interrupts();
200029a4:	0c00076a 	jal	20001da8 <Disable_Interrupts>
200029a8:	00000000 	nop
	nesting_level++;
200029ac:	8f820028 	lw	v0,40(gp)
}
200029b0:	8fbf0014 	lw	ra,20(sp)
///////////////////////////////////////////////////////////////////////////////

void Disable_Interrupt(void)
{
	Disable_Interrupts();
	nesting_level++;
200029b4:	24420001 	addiu	v0,v0,1
200029b8:	af820028 	sw	v0,40(gp)
}
200029bc:	03e00008 	jr	ra
200029c0:	27bd0018 	addiu	sp,sp,24

200029c4 <Timer_Init>:
	Timer_Set_Prescalar(timer, 0);
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
200029c4:	14e00002 	bnez	a3,200029d0 <Timer_Init+0xc>
200029c8:	00c7001b 	divu	zero,a2,a3
200029cc:	0007000d 	break	0x7

///////////////////////////////////////////////////////////////////////////////

uint32_t Timer_Init(const uint8_t timer, const uint32_t tick_us,
		const uint32_t oscillator_frequency, const uint32_t clock_divider)
{
200029d0:	308400ff 	andi	a0,a0,0xff

///////////////////////////////////////////////////////////////////////////////

void Timer_Stop(const uint8_t timer)
{
	timer_register[timer].control &= ~control_start;
200029d4:	3c028000 	lui	v0,0x8000
200029d8:	00042200 	sll	a0,a0,0x8
200029dc:	00822021 	addu	a0,a0,v0
200029e0:	8c870000 	lw	a3,0(a0)
200029e4:	2402fffe 	li	v0,-2
200029e8:	00e21024 	and	v0,a3,v0
200029ec:	ac820000 	sw	v0,0(a0)
///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Prescalar(const uint8_t timer, const uint32_t prescalar)
{
	const uint32_t value = prescalar > 0 ? prescalar - 1 : 0;
	timer_register[timer].prescalar_match = value;
200029f0:	ac800008 	sw	zero,8(a0)

///////////////////////////////////////////////////////////////////////////////

void Timer_Clear(const uint8_t timer)
{
	timer_register[timer].timer_counter = 0;
200029f4:	ac80000c 	sw	zero,12(a0)

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
200029f8:	8c870000 	lw	a3,0(a0)
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
200029fc:	3c06000f 	lui	a2,0xf

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002a00:	2402fffd 	li	v0,-3
20002a04:	00e21024 	and	v0,a3,v0
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002a08:	34c64240 	ori	a2,a2,0x4240

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002a0c:	ac820000 	sw	v0,0(a0)
	Timer_Set_Prescalar(timer, 0);
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
20002a10:	00001812 	mflo	v1
	...
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);

	const uint32_t match = timer_frequency / (timer_frequency / tick_us);
20002a1c:	14a00002 	bnez	a1,20002a28 <Timer_Init+0x64>
20002a20:	0065001b 	divu	zero,v1,a1
20002a24:	0007000d 	break	0x7
20002a28:	00002812 	mflo	a1
	...
20002a34:	14a00002 	bnez	a1,20002a40 <Timer_Init+0x7c>
20002a38:	0065001b 	divu	zero,v1,a1
20002a3c:	0007000d 	break	0x7
20002a40:	00001012 	mflo	v0

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
20002a44:	0002282b 	sltu	a1,zero,v0
20002a48:	00052823 	negu	a1,a1
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002a4c:	14c00002 	bnez	a2,20002a58 <Timer_Init+0x94>
20002a50:	0066001b 	divu	zero,v1,a2
20002a54:	0007000d 	break	0x7

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
20002a58:	2447ffff 	addiu	a3,v0,-1
20002a5c:	00e53824 	and	a3,a3,a1
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002a60:	00001812 	mflo	v1

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Prescalar(const uint8_t timer, const uint32_t prescalar)
{
	const uint32_t value = prescalar > 0 ? prescalar - 1 : 0;
20002a64:	0003282b 	sltu	a1,zero,v1
20002a68:	00052823 	negu	a1,a1
20002a6c:	2463ffff 	addiu	v1,v1,-1
20002a70:	00651824 	and	v1,v1,a1
	timer_register[timer].prescalar_match = value;
20002a74:	ac830008 	sw	v1,8(a0)
///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
	timer_register[timer].timer_match = value;
20002a78:	ac870010 	sw	a3,16(a0)

	const uint32_t match = timer_frequency / (timer_frequency / tick_us);
	Timer_Set_Match(timer, match);

	return match;
}
20002a7c:	03e00008 	jr	ra
20002a80:	00000000 	nop

20002a84 <Timer_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Timer_Start(const uint8_t timer)
{
20002a84:	308400ff 	andi	a0,a0,0xff
	timer_register[timer].control |= control_start;
20002a88:	3c028000 	lui	v0,0x8000
20002a8c:	00042200 	sll	a0,a0,0x8
20002a90:	00822021 	addu	a0,a0,v0
20002a94:	8c820000 	lw	v0,0(a0)
20002a98:	00000000 	nop
20002a9c:	34420001 	ori	v0,v0,0x1
20002aa0:	ac820000 	sw	v0,0(a0)
}
20002aa4:	03e00008 	jr	ra
20002aa8:	00000000 	nop

20002aac <SPI_Init>:
static const uint32_t control_cpol     = (1 << 2);

///////////////////////////////////////////////////////////////////////////////

void SPI_Init(const uint8_t spi, const uint32_t mode, const uint32_t clock_divider)
{
20002aac:	308400ff 	andi	a0,a0,0xff
	spi_register[spi].control = ((mode & 0x03) << 1);
20002ab0:	3c028000 	lui	v0,0x8000
20002ab4:	34420a00 	ori	v0,v0,0xa00
20002ab8:	00042200 	sll	a0,a0,0x8
20002abc:	00822021 	addu	a0,a0,v0
20002ac0:	30a50003 	andi	a1,a1,0x3
	spi_register[spi].clk_div = clock_divider & 0xFFFFFFFC;
20002ac4:	2402fffc 	li	v0,-4
20002ac8:	00c21024 	and	v0,a2,v0

///////////////////////////////////////////////////////////////////////////////

void SPI_Init(const uint8_t spi, const uint32_t mode, const uint32_t clock_divider)
{
	spi_register[spi].control = ((mode & 0x03) << 1);
20002acc:	00052840 	sll	a1,a1,0x1
20002ad0:	ac850000 	sw	a1,0(a0)
	spi_register[spi].clk_div = clock_divider & 0xFFFFFFFC;
20002ad4:	ac820004 	sw	v0,4(a0)
}
20002ad8:	03e00008 	jr	ra
20002adc:	00000000 	nop

20002ae0 <SPI_Swap>:
}

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
20002ae0:	308400ff 	andi	a0,a0,0xff

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002ae4:	3c028000 	lui	v0,0x8000
20002ae8:	00042200 	sll	a0,a0,0x8
20002aec:	34420a00 	ori	v0,v0,0xa00
20002af0:	00822021 	addu	a0,a0,v0
}

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
20002af4:	30a500ff 	andi	a1,a1,0xff

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002af8:	8c820000 	lw	v0,0(a0)
20002afc:	00000000 	nop

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
	while(!SPI_Ready(spi));
20002b00:	30420001 	andi	v0,v0,0x1
20002b04:	1040fffc 	beqz	v0,20002af8 <SPI_Swap+0x18>
20002b08:	00000000 	nop
	spi_register[spi].data = data;
20002b0c:	ac850008 	sw	a1,8(a0)

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002b10:	8c820000 	lw	v0,0(a0)
20002b14:	00000000 	nop

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
	while(!SPI_Ready(spi));
	spi_register[spi].data = data;
	while(!SPI_Ready(spi));
20002b18:	30420001 	andi	v0,v0,0x1
20002b1c:	1040fffc 	beqz	v0,20002b10 <SPI_Swap+0x30>
20002b20:	00000000 	nop
	return spi_register[spi].data;
20002b24:	8c820008 	lw	v0,8(a0)
}
20002b28:	03e00008 	jr	ra
20002b2c:	304200ff 	andi	v0,v0,0xff

20002b30 <Segment_Clear_Decimal>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Clear_Decimal(const segment_digit_t digit)
{
20002b30:	27bdffe0 	addiu	sp,sp,-32
20002b34:	afb10018 	sw	s1,24(sp)
20002b38:	afb00014 	sw	s0,20(sp)
20002b3c:	3091ffff 	andi	s1,a0,0xffff
20002b40:	309000ff 	andi	s0,a0,0xff
20002b44:	afbf001c 	sw	ra,28(sp)
20002b48:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002b4c:	12000005 	beqz	s0,20002b64 <Segment_Clear_Decimal+0x34>
20002b50:	00118a02 	srl	s1,s1,0x8
20002b54:	3c044000 	lui	a0,0x4000
20002b58:	24840000 	addiu	a0,a0,0
20002b5c:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002b60:	24050056 	li	a1,86
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002b64:	2e220004 	sltiu	v0,s1,4
20002b68:	14400006 	bnez	v0,20002b84 <Segment_Clear_Decimal+0x54>
20002b6c:	3c024000 	lui	v0,0x4000
20002b70:	3c044000 	lui	a0,0x4000
20002b74:	24840000 	addiu	a0,a0,0
20002b78:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002b7c:	24050057 	li	a1,87

	segment_register[digit.segment].decimals &= ~segment_decimal[digit.digit];
20002b80:	3c024000 	lui	v0,0x4000
20002b84:	24420028 	addiu	v0,v0,40
20002b88:	00118880 	sll	s1,s1,0x2
20002b8c:	02228821 	addu	s1,s1,v0
20002b90:	3c028000 	lui	v0,0x8000
20002b94:	34420900 	ori	v0,v0,0x900
20002b98:	00108200 	sll	s0,s0,0x8
20002b9c:	02028021 	addu	s0,s0,v0
20002ba0:	8e220000 	lw	v0,0(s1)
20002ba4:	8e030008 	lw	v1,8(s0)
20002ba8:	00021027 	nor	v0,zero,v0
}
20002bac:	8fbf001c 	lw	ra,28(sp)
void Segment_Clear_Decimal(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].decimals &= ~segment_decimal[digit.digit];
20002bb0:	00431024 	and	v0,v0,v1
20002bb4:	ae020008 	sw	v0,8(s0)
}
20002bb8:	8fb10018 	lw	s1,24(sp)
20002bbc:	8fb00014 	lw	s0,20(sp)
20002bc0:	03e00008 	jr	ra
20002bc4:	27bd0020 	addiu	sp,sp,32

20002bc8 <Segment_Set_Decimal>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Set_Decimal(const segment_digit_t digit)
{
20002bc8:	27bdffe0 	addiu	sp,sp,-32
20002bcc:	afb10018 	sw	s1,24(sp)
20002bd0:	afb00014 	sw	s0,20(sp)
20002bd4:	309100ff 	andi	s1,a0,0xff
20002bd8:	3090ffff 	andi	s0,a0,0xffff
20002bdc:	afbf001c 	sw	ra,28(sp)
20002be0:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002be4:	12200005 	beqz	s1,20002bfc <Segment_Set_Decimal+0x34>
20002be8:	00108202 	srl	s0,s0,0x8
20002bec:	3c044000 	lui	a0,0x4000
20002bf0:	24840000 	addiu	a0,a0,0
20002bf4:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002bf8:	2405004c 	li	a1,76
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002bfc:	2e020004 	sltiu	v0,s0,4
20002c00:	14400006 	bnez	v0,20002c1c <Segment_Set_Decimal+0x54>
20002c04:	3c028000 	lui	v0,0x8000
20002c08:	3c044000 	lui	a0,0x4000
20002c0c:	24840000 	addiu	a0,a0,0
20002c10:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002c14:	2405004d 	li	a1,77

	segment_register[digit.segment].decimals |= segment_decimal[digit.digit];
20002c18:	3c028000 	lui	v0,0x8000
20002c1c:	34420900 	ori	v0,v0,0x900
20002c20:	00118a00 	sll	s1,s1,0x8
20002c24:	02228821 	addu	s1,s1,v0
20002c28:	3c024000 	lui	v0,0x4000
20002c2c:	24420028 	addiu	v0,v0,40
20002c30:	00108080 	sll	s0,s0,0x2
20002c34:	02028021 	addu	s0,s0,v0
20002c38:	8e230008 	lw	v1,8(s1)
20002c3c:	8e020000 	lw	v0,0(s0)
}
20002c40:	8fbf001c 	lw	ra,28(sp)
void Segment_Set_Decimal(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].decimals |= segment_decimal[digit.digit];
20002c44:	00621025 	or	v0,v1,v0
20002c48:	ae220008 	sw	v0,8(s1)
}
20002c4c:	8fb00014 	lw	s0,20(sp)
20002c50:	8fb10018 	lw	s1,24(sp)
20002c54:	03e00008 	jr	ra
20002c58:	27bd0020 	addiu	sp,sp,32

20002c5c <Segment_Write>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Write(const segment_digit_t digit, const uint8_t value)
{
20002c5c:	27bdffe0 	addiu	sp,sp,-32
20002c60:	afb10014 	sw	s1,20(sp)
20002c64:	afb00010 	sw	s0,16(sp)
20002c68:	3091ffff 	andi	s1,a0,0xffff
20002c6c:	309000ff 	andi	s0,a0,0xff
20002c70:	afb20018 	sw	s2,24(sp)
20002c74:	afbf001c 	sw	ra,28(sp)
20002c78:	a7a40020 	sh	a0,32(sp)
20002c7c:	30b200ff 	andi	s2,a1,0xff
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002c80:	12000005 	beqz	s0,20002c98 <Segment_Write+0x3c>
20002c84:	00118a02 	srl	s1,s1,0x8
20002c88:	3c044000 	lui	a0,0x4000
20002c8c:	24840000 	addiu	a0,a0,0
20002c90:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002c94:	24050041 	li	a1,65
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002c98:	2e220004 	sltiu	v0,s1,4
20002c9c:	14400006 	bnez	v0,20002cb8 <Segment_Write+0x5c>
20002ca0:	3c024000 	lui	v0,0x4000
20002ca4:	3c044000 	lui	a0,0x4000
20002ca8:	24840000 	addiu	a0,a0,0
20002cac:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002cb0:	24050042 	li	a1,66

	segment_register[digit.segment].values &= ~segment_value[digit.digit];
20002cb4:	3c024000 	lui	v0,0x4000
20002cb8:	00118880 	sll	s1,s1,0x2
20002cbc:	24420038 	addiu	v0,v0,56
20002cc0:	3c038000 	lui	v1,0x8000
20002cc4:	02221021 	addu	v0,s1,v0
20002cc8:	34630900 	ori	v1,v1,0x900
20002ccc:	00108200 	sll	s0,s0,0x8
20002cd0:	02038021 	addu	s0,s0,v1
20002cd4:	8c420000 	lw	v0,0(v0)
20002cd8:	8e030004 	lw	v1,4(s0)
20002cdc:	00021027 	nor	v0,zero,v0
20002ce0:	00431024 	and	v0,v0,v1
20002ce4:	ae020004 	sw	v0,4(s0)
	segment_register[digit.segment].values |= (value << (digit.digit * 4));
20002ce8:	8e020004 	lw	v0,4(s0)
20002cec:	02328804 	sllv	s1,s2,s1
}
20002cf0:	8fbf001c 	lw	ra,28(sp)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].values &= ~segment_value[digit.digit];
	segment_register[digit.segment].values |= (value << (digit.digit * 4));
20002cf4:	02228825 	or	s1,s1,v0
20002cf8:	ae110004 	sw	s1,4(s0)
}
20002cfc:	8fb20018 	lw	s2,24(sp)
20002d00:	8fb10014 	lw	s1,20(sp)
20002d04:	8fb00010 	lw	s0,16(sp)
20002d08:	03e00008 	jr	ra
20002d0c:	27bd0020 	addiu	sp,sp,32

20002d10 <Segment_Enable>:
											(1 << 2), (1 << 3) };

///////////////////////////////////////////////////////////////////////////////

void Segment_Enable(const segment_digit_t digit)
{
20002d10:	27bdffe0 	addiu	sp,sp,-32
20002d14:	afb10018 	sw	s1,24(sp)
20002d18:	afb00014 	sw	s0,20(sp)
20002d1c:	309100ff 	andi	s1,a0,0xff
20002d20:	3090ffff 	andi	s0,a0,0xffff
20002d24:	afbf001c 	sw	ra,28(sp)
20002d28:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002d2c:	12200005 	beqz	s1,20002d44 <Segment_Enable+0x34>
20002d30:	00108202 	srl	s0,s0,0x8
20002d34:	3c044000 	lui	a0,0x4000
20002d38:	24840000 	addiu	a0,a0,0
20002d3c:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002d40:	2405002d 	li	a1,45
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002d44:	2e020004 	sltiu	v0,s0,4
20002d48:	14400006 	bnez	v0,20002d64 <Segment_Enable+0x54>
20002d4c:	3c028000 	lui	v0,0x8000
20002d50:	3c044000 	lui	a0,0x4000
20002d54:	24840000 	addiu	a0,a0,0
20002d58:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002d5c:	2405002e 	li	a1,46

	segment_register[digit.segment].enabled |= segment_enabled[digit.digit];
20002d60:	3c028000 	lui	v0,0x8000
20002d64:	34420900 	ori	v0,v0,0x900
20002d68:	00118a00 	sll	s1,s1,0x8
20002d6c:	02228821 	addu	s1,s1,v0
20002d70:	3c024000 	lui	v0,0x4000
20002d74:	24420048 	addiu	v0,v0,72
20002d78:	00108080 	sll	s0,s0,0x2
20002d7c:	02028021 	addu	s0,s0,v0
20002d80:	8e230000 	lw	v1,0(s1)
20002d84:	8e020000 	lw	v0,0(s0)
}
20002d88:	8fbf001c 	lw	ra,28(sp)
void Segment_Enable(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].enabled |= segment_enabled[digit.digit];
20002d8c:	00621025 	or	v0,v1,v0
20002d90:	ae220000 	sw	v0,0(s1)
}
20002d94:	8fb00014 	lw	s0,20(sp)
20002d98:	8fb10018 	lw	s1,24(sp)
20002d9c:	03e00008 	jr	ra
20002da0:	27bd0020 	addiu	sp,sp,32

20002da4 <Device_Add>:
20002da4:	3c034000 	lui	v1,0x4000
20002da8:	8c6501cc 	lw	a1,460(v1)
20002dac:	00000000 	nop
20002db0:	14a00004 	bnez	a1,20002dc4 <Device_Add+0x20>
20002db4:	2402ffff 	li	v0,-1
20002db8:	ac6401cc 	sw	a0,460(v1)
20002dbc:	00001021 	move	v0,zero
20002dc0:	3c034000 	lui	v1,0x4000
20002dc4:	246301cc 	addiu	v1,v1,460
20002dc8:	8c650004 	lw	a1,4(v1)
20002dcc:	00000000 	nop
20002dd0:	14a00003 	bnez	a1,20002de0 <Device_Add+0x3c>
20002dd4:	00000000 	nop
20002dd8:	ac640004 	sw	a0,4(v1)
20002ddc:	24020001 	li	v0,1
20002de0:	3c034000 	lui	v1,0x4000
20002de4:	246301cc 	addiu	v1,v1,460
20002de8:	8c650008 	lw	a1,8(v1)
20002dec:	00000000 	nop
20002df0:	14a00003 	bnez	a1,20002e00 <Device_Add+0x5c>
20002df4:	00000000 	nop
20002df8:	ac640008 	sw	a0,8(v1)
20002dfc:	24020002 	li	v0,2
20002e00:	3c034000 	lui	v1,0x4000
20002e04:	246301cc 	addiu	v1,v1,460
20002e08:	8c65000c 	lw	a1,12(v1)
20002e0c:	00000000 	nop
20002e10:	14a00003 	bnez	a1,20002e20 <Device_Add+0x7c>
20002e14:	00000000 	nop
20002e18:	ac64000c 	sw	a0,12(v1)
20002e1c:	24020003 	li	v0,3
20002e20:	03e00008 	jr	ra
20002e24:	00000000 	nop
