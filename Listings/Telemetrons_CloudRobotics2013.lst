
Telemetrons_CloudRobotics2013.elf:     file format elf32-littlemips


Disassembly of section .text:

20000000 <_text>:
   .extern _etext
   .extern _ebss
   .extern Handle_Interrupts

   .set noreorder
		nop
20000000:	00000000 	nop
        j _startup            # Reset vector
20000004:	08000005 	j	20000014 <_startup>
        nop
20000008:	00000000 	nop

        j Handler            # Interrupt vector
2000000c:	080006d3 	j	20001b4c <Handler>
        nop
20000010:	00000000 	nop

20000014 <_startup>:

   .func   _startup
_startup:                     # Start of code section
/* Set global pointer register */
        la $28, _gp
20000014:	3c1c4000 	lui	gp,0x4000
20000018:	279c01a0 	addiu	gp,gp,416

/* Set the stack pointer */
        la $t0, USR_Stk_Base_Val
2000001c:	3c084000 	lui	t0,0x4000
20000020:	35083e00 	ori	t0,t0,0x3e00
        move $sp, $t0
20000024:	0100e821 	move	sp,t0

        mtc0 $sp, $25         # Save CP0 Status Reg
20000028:	409dc800 	mtc0	sp,$25

/* Fill the stack */
        la $3, Top_Stack - 4
2000002c:	3c034000 	lui	v1,0x4000
20000030:	34633ffc 	ori	v1,v1,0x3ffc
        la $4, Top_Stack -IRQ_Stk -USR_Stk
20000034:	3c044000 	lui	a0,0x4000
20000038:	34843600 	ori	a0,a0,0x3600
        la $5, 0xDEC0ADDE
2000003c:	3c05dec0 	lui	a1,0xdec0
20000040:	34a5adde 	ori	a1,a1,0xadde

20000044 <Stk_fill>:
Stk_fill:
		sw $5, 0($4)
20000044:	ac850000 	sw	a1,0(a0)
		slt $2, $4, $3
20000048:	0083102a 	slt	v0,a0,v1
		bnez $2, Stk_fill
2000004c:	1440fffd 	bnez	v0,20000044 <Stk_fill>
		addiu $4, $4, 4
20000050:	24840004 	addiu	a0,a0,4
/* End of stack-filler */

		/* Special value at the bottom of the interrupt stack */
		la $4, Top_Stack -IRQ_Stk
20000054:	3c044000 	lui	a0,0x4000
20000058:	34843e00 	ori	a0,a0,0x3e00
		la $5, INT_Stk_Val
2000005c:	3c054000 	lui	a1,0x4000
20000060:	24a50134 	addiu	a1,a1,308
		lw $5, 0($5)
20000064:	8ca50000 	lw	a1,0(a1)
		nop
20000068:	00000000 	nop
		sw $5, 0($4)
2000006c:	ac850000 	sw	a1,0(a0)

		/* Special value at the bottom of the user stack */
		la $4, Top_Stack -IRQ_Stk -USR_Stk
20000070:	3c044000 	lui	a0,0x4000
20000074:	34843600 	ori	a0,a0,0x3600
		la $5, USR_Stk_Val
20000078:	3c054000 	lui	a1,0x4000
2000007c:	24a50130 	addiu	a1,a1,304
		lw $5, 0($5)
20000080:	8ca50000 	lw	a1,0(a1)
		nop
20000084:	00000000 	nop
		sw $5, 0($4)
20000088:	ac850000 	sw	a1,0(a0)

        la $4, _etext
2000008c:	3c042000 	lui	a0,0x2000
20000090:	24842dac 	addiu	a0,a0,11692
        la $5, _text
20000094:	3c052000 	lui	a1,0x2000
20000098:	24a50000 	addiu	a1,a1,0
        subu $4, $4, $5
2000009c:	00852023 	subu	a0,a0,a1
        la $5, _edata
200000a0:	3c054000 	lui	a1,0x4000
200000a4:	24a501a0 	addiu	a1,a1,416
        la $6, _data
200000a8:	3c064000 	lui	a2,0x4000
200000ac:	24c60000 	addiu	a2,a2,0

200000b0 <Data_copy>:
Data_copy:
        lw $2, 0($4)
200000b0:	8c820000 	lw	v0,0(a0)
        nop
200000b4:	00000000 	nop
        slt $3, $6, $5
200000b8:	00c5182a 	slt	v1,a2,a1
        sw $2, 0($6)
200000bc:	acc20000 	sw	v0,0(a2)
        addiu $6, $6, 4
200000c0:	24c60004 	addiu	a2,a2,4
        bnez  $3, Data_copy
200000c4:	1460fffa 	bnez	v1,200000b0 <Data_copy>
        addiu $4, $4, 4
200000c8:	24840004 	addiu	a0,a0,4

/* Clear .bss section (Zero init) */
        la $4, _bss   # Clear BSS Segment
200000cc:	3c044000 	lui	a0,0x4000
200000d0:	248401a0 	addiu	a0,a0,416
        la $5, _ebss  # Clear BSS Segment
200000d4:	3c054000 	lui	a1,0x4000
200000d8:	24a509c0 	addiu	a1,a1,2496

200000dc <BSS_clear>:
BSS_clear:
        sw  $0, 0($4)
200000dc:	ac800000 	sw	zero,0(a0)
        slt $3, $4, $5
200000e0:	0085182a 	slt	v1,a0,a1
        bnez  $3, BSS_clear
200000e4:	1460fffd 	bnez	v1,200000dc <BSS_clear>
        addiu $4, $4, 4
200000e8:	24840004 	addiu	a0,a0,4

        la $4, _stext
200000ec:	3c040000 	lui	a0,0x0
200000f0:	24840000 	addiu	a0,a0,0
        la $5, _etext
200000f4:	3c052000 	lui	a1,0x2000
200000f8:	24a52dac 	addiu	a1,a1,11692
        la $6, _text
200000fc:	3c062000 	lui	a2,0x2000
20000100:	24c60000 	addiu	a2,a2,0

20000104 <Code_copy>:
Code_copy:
        lw $2, 0($4)
20000104:	8c820000 	lw	v0,0(a0)
        nop
20000108:	00000000 	nop
        slt $3, $6, $5
2000010c:	00c5182a 	slt	v1,a2,a1
        sw $2, 0($6)
20000110:	acc20000 	sw	v0,0(a2)
        addiu $6, $6, 4
20000114:	24c60004 	addiu	a2,a2,4
        bnez  $3, Code_copy
20000118:	1460fffa 	bnez	v1,20000104 <Code_copy>
        addiu $4, $4, 4
2000011c:	24840004 	addiu	a0,a0,4


/* Enable system interrupts */
        mfc0 $4, $12         # Read CP0 Status Reg
20000120:	40046000 	mfc0	a0,c0_sr
        nop
20000124:	00000000 	nop
        ori $4, $4, 0x700    # Set IE and IRQ = 7
20000128:	34840700 	ori	a0,a0,0x700
        nop
2000012c:	00000000 	nop
        mtc0 $4, $12         # Save CP0 Status Reg
20000130:	40846000 	mtc0	a0,c0_sr
        nop
20000134:	00000000 	nop
        
        la $4, 0xFF00
20000138:	3404ff00 	li	a0,0xff00
        nop
2000013c:	00000000 	nop
        mtc0 $4, $13
20000140:	40846800 	mtc0	a0,c0_cause
        jalr $t0
		nop
#endif

/* Finally, start running the C code - branch to main() */
		la $t0, main
20000144:	3c082000 	lui	t0,0x2000
20000148:	25080160 	addiu	t0,t0,352
        jalr $t0        # Call main()
2000014c:	0100f809 	jalr	t0
        nop
20000150:	00000000 	nop

20000154 <_exit>:

	.global _exit
_exit:                  # Halt if main returns
        b   _exit
20000154:	1000ffff                                ....

20000158 <DEBUG_Assert_Failed>:
 *
 * \param[in]	file	The name of the file where the assertion failed.
 * \param[in]	line	The line number where the assertion failed.
 */
void DEBUG_Assert_Failed(TTE_UNUSED char* file, TTE_UNUSED int line)
{
20000158:	08000056 	j	20000158 <DEBUG_Assert_Failed>
2000015c:	00000000 	nop

20000160 <main>:
 *
 * This function should never exit, as embedded systems do not have an
 * operating system to return to.
 */
int main(void)
{
20000160:	27bdffe8 	addiu	sp,sp,-24
20000164:	afbf0014 	sw	ra,20(sp)
 * @param
 */
TTE_ALWAYS_INLINE
static inline void Target_Mapping_Init(void)
{
	Device_Add(NULL);
20000168:	0c000b4a 	jal	20002d28 <Device_Add>
2000016c:	00002021 	move	a0,zero
	return 0;
#endif

	Target_Mapping_Init();

	Scheduler_Init(Config_Tick_Period);
20000170:	0c000817 	jal	2000205c <Scheduler_Init>
20000174:	240403e8 	li	a0,1000
	Tasks_Init();
20000178:	0c000066 	jal	20000198 <Tasks_Init>
2000017c:	00000000 	nop

	Scheduler_Start();
20000180:	0c00080d 	jal	20002034 <Scheduler_Start>
20000184:	00000000 	nop

	while (TRUE)
	{
		Scheduler_Dispatch();
20000188:	0c0007af 	jal	20001ebc <Scheduler_Dispatch>
2000018c:	00000000 	nop
20000190:	08000062 	j	20000188 <main+0x28>
20000194:	00000000 	nop

20000198 <Tasks_Init>:

/**
 * Initialise all hardware for all tasks.
 */
void Tasks_Init(void)
{
20000198:	27bdffe8 	addiu	sp,sp,-24
2000019c:	afbf0014 	sw	ra,20(sp)
	Flashing_LED_Init();
200001a0:	0c000626 	jal	20001898 <Flashing_LED_Init>
200001a4:	00000000 	nop
	System_Control_Init();
200001a8:	0c0000c7 	jal	2000031c <System_Control_Init>
200001ac:	00000000 	nop
	Read_Enc_Init();
200001b0:	0c000198 	jal	20000660 <Read_Enc_Init>
200001b4:	00000000 	nop
	Motor_Right_Init();
200001b8:	0c0002ed 	jal	20000bb4 <Motor_Right_Init>
200001bc:	00000000 	nop
	Motor_Left_Init();
200001c0:	0c0003a1 	jal	20000e84 <Motor_Left_Init>
200001c4:	00000000 	nop
	Course_Corrector_Init();
200001c8:	0c00065f 	jal	2000197c <Course_Corrector_Init>
200001cc:	00000000 	nop
	CAN_relay_Init();
200001d0:	0c000679 	jal	200019e4 <CAN_relay_Init>
200001d4:	00000000 	nop
	Message_Sender_Init();
200001d8:	0c0005f3 	jal	200017cc <Message_Sender_Init>
200001dc:	00000000 	nop
	object_detection_Init();
}
200001e0:	8fbf0014 	lw	ra,20(sp)
	Motor_Right_Init();
	Motor_Left_Init();
	Course_Corrector_Init();
	CAN_relay_Init();
	Message_Sender_Init();
	object_detection_Init();
200001e4:	0800007b 	j	200001ec <object_detection_Init>
200001e8:	27bd0018 	addiu	sp,sp,24

200001ec <object_detection_Init>:
 * Initialisation for the object_detection package.
 * This will be called from Tasks_Init by default.
 */
void object_detection_Init(void)
{
	objectFollower = Rt;
200001ec:	24020004 	li	v0,4
}
200001f0:	03e00008 	jr	ra
200001f4:	af8200f0 	sw	v0,240(gp)

200001f8 <object_detection_Update>:
 */
void object_detection_Update(void)
{
	Bool detection = False;

	if((sensorReadings.IRLeft-sensorReadings.IRRight > IR_NOISE)||(sensorReadings.IRRight-sensorReadings.IRLeft > IR_NOISE))
200001f8:	3c024000 	lui	v0,0x4000
200001fc:	244403cc 	addiu	a0,v0,972
20000200:	8c4303cc 	lw	v1,972(v0)
20000204:	8c820004 	lw	v0,4(a0)
20000208:	00000000 	nop
2000020c:	00622823 	subu	a1,v1,v0
20000210:	2ca50003 	sltiu	a1,a1,3
20000214:	10a00004 	beqz	a1,20000228 <object_detection_Update+0x30>
20000218:	00432823 	subu	a1,v0,v1
2000021c:	2ca50003 	sltiu	a1,a1,3
20000220:	14a00026 	bnez	a1,200002bc <object_detection_Update+0xc4>
20000224:	00000000 	nop
	{
		if((sensorReadings.IRLeft < sensorReadings.IRRight) && ((sensorReadings.IRLeft < IR_MIN)||((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > 5))))
20000228:	0062202b 	sltu	a0,v1,v0
2000022c:	10800010 	beqz	a0,20000270 <object_detection_Update+0x78>
20000230:	2c640014 	sltiu	a0,v1,20
20000234:	14800007 	bnez	a0,20000254 <object_detection_Update+0x5c>
20000238:	3c044000 	lui	a0,0x4000
2000023c:	8c8403d4 	lw	a0,980(a0)
20000240:	00000000 	nop
20000244:	2484fffa 	addiu	a0,a0,-6
20000248:	2c840018 	sltiu	a0,a0,24
2000024c:	10800009 	beqz	a0,20000274 <object_detection_Update+0x7c>
20000250:	0043182b 	sltu	v1,v0,v1
		{
			detection = True;
			if(movement_G != Rt)
20000254:	8f8300e8 	lw	v1,232(gp)
20000258:	24020004 	li	v0,4
2000025c:	10620015 	beq	v1,v0,200002b4 <object_detection_Update+0xbc>
20000260:	00000000 	nop
			{
				WheelCounts_Right_G = 0;
20000264:	af8000c4 	sw	zero,196(gp)
				WheelCounts_Left_G = 0;
20000268:	080000ad 	j	200002b4 <object_detection_Update+0xbc>
2000026c:	af800084 	sw	zero,132(gp)
			}
			movement_G = Rt;
			objectFollower = Rt;
		}
		else if((sensorReadings.IRLeft > sensorReadings.IRRight) && ((sensorReadings.IRRight < IR_MIN)||((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > 5))))
20000270:	0043182b 	sltu	v1,v0,v1
20000274:	10600020 	beqz	v1,200002f8 <object_detection_Update+0x100>
20000278:	2c420014 	sltiu	v0,v0,20
2000027c:	14400007 	bnez	v0,2000029c <object_detection_Update+0xa4>
20000280:	3c024000 	lui	v0,0x4000
20000284:	8c4203d4 	lw	v0,980(v0)
20000288:	00000000 	nop
2000028c:	2442fffa 	addiu	v0,v0,-6
20000290:	2c420018 	sltiu	v0,v0,24
20000294:	10400018 	beqz	v0,200002f8 <object_detection_Update+0x100>
20000298:	00000000 	nop
		{
			detection = True;
			if(movement_G != Lf)
2000029c:	8f8300e8 	lw	v1,232(gp)
200002a0:	24020003 	li	v0,3
200002a4:	10620003 	beq	v1,v0,200002b4 <object_detection_Update+0xbc>
200002a8:	00000000 	nop
			{
				WheelCounts_Right_G = 0;
200002ac:	af8000c4 	sw	zero,196(gp)
				WheelCounts_Left_G = 0;
200002b0:	af800084 	sw	zero,132(gp)
			}
			movement_G = Lf;
			objectFollower = Lf;
200002b4:	080000bc 	j	200002f0 <object_detection_Update+0xf8>
200002b8:	af8200f0 	sw	v0,240(gp)
		}
	}
	else if((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > 5))
200002bc:	8c820008 	lw	v0,8(a0)
200002c0:	00000000 	nop
200002c4:	2442fffa 	addiu	v0,v0,-6
200002c8:	2c420018 	sltiu	v0,v0,24
200002cc:	1040000a 	beqz	v0,200002f8 <object_detection_Update+0x100>
200002d0:	00000000 	nop
	{
		detection = True;
		if(movement_G != objectFollower)
200002d4:	8f8200f0 	lw	v0,240(gp)
200002d8:	8f8300e8 	lw	v1,232(gp)
200002dc:	00000000 	nop
200002e0:	10620003 	beq	v1,v0,200002f0 <object_detection_Update+0xf8>
200002e4:	00000000 	nop
		{
			WheelCounts_Right_G = 0;
200002e8:	af8000c4 	sw	zero,196(gp)
			WheelCounts_Left_G = 0;
200002ec:	af800084 	sw	zero,132(gp)
		}

		movement_G = objectFollower;
200002f0:	03e00008 	jr	ra
200002f4:	af8200e8 	sw	v0,232(gp)
	}

	if((detection == False)&&(movement_G != Fd))
200002f8:	8f8300e8 	lw	v1,232(gp)
200002fc:	24020001 	li	v0,1
20000300:	10620004 	beq	v1,v0,20000314 <object_detection_Update+0x11c>
20000304:	00000000 	nop
	{
		WheelCounts_Right_G = 0;
		WheelCounts_Left_G = 0;

		movement_G = Fd;
20000308:	af8200e8 	sw	v0,232(gp)
		movement_G = objectFollower;
	}

	if((detection == False)&&(movement_G != Fd))
	{
		WheelCounts_Right_G = 0;
2000030c:	af8000c4 	sw	zero,196(gp)
		WheelCounts_Left_G = 0;
20000310:	af800084 	sw	zero,132(gp)
20000314:	03e00008 	jr	ra
20000318:	00000000 	nop

2000031c <System_Control_Init>:
 * This will be called from Tasks_Init by default.
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
2000031c:	3c028000 	lui	v0,0x8000
20000320:	34430500 	ori	v1,v0,0x500
20000324:	8c650004 	lw	a1,4(v1)
20000328:	2404fffe 	li	a0,-2
2000032c:	00a42024 	and	a0,a1,a0
20000330:	ac640004 	sw	a0,4(v1)
20000334:	8c640004 	lw	a0,4(v1)
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
20000338:	34420200 	ori	v0,v0,0x200
 * This will be called from Tasks_Init by default.
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
2000033c:	ac640004 	sw	a0,4(v1)
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);
20000340:	8c650004 	lw	a1,4(v1)
20000344:	2404fffd 	li	a0,-3
20000348:	00a42024 	and	a0,a1,a0
2000034c:	ac640004 	sw	a0,4(v1)
20000350:	8c650004 	lw	a1,4(v1)

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
20000354:	2404feff 	li	a0,-257
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);
20000358:	ac650004 	sw	a1,4(v1)

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
2000035c:	8c450004 	lw	a1,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
20000360:	2406ffbf 	li	a2,-65
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
20000364:	00a42824 	and	a1,a1,a0
20000368:	ac450004 	sw	a1,4(v0)
2000036c:	8c470004 	lw	a3,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
20000370:	2405ff7f 	li	a1,-129
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
20000374:	34e70100 	ori	a3,a3,0x100
20000378:	ac470004 	sw	a3,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);
2000037c:	8c470000 	lw	a3,0(v0)
20000380:	00000000 	nop
20000384:	00e42024 	and	a0,a3,a0
20000388:	ac440000 	sw	a0,0(v0)
2000038c:	8c440000 	lw	a0,0(v0)
20000390:	00000000 	nop
20000394:	ac440000 	sw	a0,0(v0)

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
20000398:	8c470004 	lw	a3,4(v0)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
2000039c:	3c040080 	lui	a0,0x80
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
200003a0:	00e63824 	and	a3,a3,a2
200003a4:	ac470004 	sw	a3,4(v0)
200003a8:	8c470004 	lw	a3,4(v0)
200003ac:	00000000 	nop
200003b0:	34e70040 	ori	a3,a3,0x40
200003b4:	ac470004 	sw	a3,4(v0)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200003b8:	8c470000 	lw	a3,0(v0)
200003bc:	00000000 	nop
200003c0:	00e63024 	and	a2,a3,a2
200003c4:	ac460000 	sw	a2,0(v0)
200003c8:	8c460000 	lw	a2,0(v0)
200003cc:	00000000 	nop
200003d0:	ac460000 	sw	a2,0(v0)

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
200003d4:	8c460004 	lw	a2,4(v0)
200003d8:	00000000 	nop
200003dc:	00c53024 	and	a2,a2,a1
200003e0:	ac460004 	sw	a2,4(v0)
200003e4:	8c460004 	lw	a2,4(v0)
200003e8:	00000000 	nop
200003ec:	34c60080 	ori	a2,a2,0x80
200003f0:	ac460004 	sw	a2,4(v0)
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
200003f4:	8c460000 	lw	a2,0(v0)
200003f8:	00000000 	nop
200003fc:	00c52824 	and	a1,a2,a1
20000400:	ac450000 	sw	a1,0(v0)
20000404:	8c450000 	lw	a1,0(v0)
20000408:	00000000 	nop
2000040c:	ac450000 	sw	a1,0(v0)

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
20000410:	8c650004 	lw	a1,4(v1)
20000414:	3c02ff7f 	lui	v0,0xff7f
20000418:	3442ffff 	ori	v0,v0,0xffff
2000041c:	00a21024 	and	v0,a1,v0
20000420:	ac620004 	sw	v0,4(v1)
20000424:	8c620004 	lw	v0,4(v1)
	GPIO_Write(KILL_ALL, GPIO_HIGH);

	/* State and orientation initialisation */
	System_Mode_G = Ready;
20000428:	af8000f4 	sw	zero,244(gp)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
2000042c:	00441025 	or	v0,v0,a0
20000430:	ac620004 	sw	v0,4(v1)
	GPIO_Write(KILL_ALL, GPIO_HIGH);
20000434:	8c620000 	lw	v0,0(v1)

	/* State and orientation initialisation */
	System_Mode_G = Ready;
	debounce = 0;
20000438:	a38000f8 	sb	zero,248(gp)

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
	GPIO_Write(KILL_ALL, GPIO_HIGH);
2000043c:	ac620000 	sw	v0,0(v1)
20000440:	8c620000 	lw	v0,0(v1)
20000444:	00000000 	nop
20000448:	00442025 	or	a0,v0,a0
2000044c:	ac640000 	sw	a0,0(v1)

	/* State and orientation initialisation */
	System_Mode_G = Ready;
	debounce = 0;
}
20000450:	03e00008 	jr	ra
20000454:	00000000 	nop

20000458 <System_Control_Update>:
/**
 * Main system mode control
 */
void System_Control_Update(void)
{
	switch(System_Mode_G)
20000458:	8f8200f4 	lw	v0,244(gp)
2000045c:	24030002 	li	v1,2
20000460:	10430027 	beq	v0,v1,20000500 <System_Control_Update+0xa8>
20000464:	2c440003 	sltiu	a0,v0,3
20000468:	10800007 	beqz	a0,20000488 <System_Control_Update+0x30>
2000046c:	00000000 	nop
20000470:	1040000d 	beqz	v0,200004a8 <System_Control_Update+0x50>
20000474:	24040001 	li	a0,1
20000478:	1444005f 	bne	v0,a0,200005f8 <System_Control_Update+0x1a0>
2000047c:	3c028000 	lui	v0,0x8000
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
20000480:	0800012d 	j	200004b4 <System_Control_Update+0x5c>
20000484:	34420500 	ori	v0,v0,0x500
/**
 * Main system mode control
 */
void System_Control_Update(void)
{
	switch(System_Mode_G)
20000488:	24030003 	li	v1,3
2000048c:	10430024 	beq	v0,v1,20000520 <System_Control_Update+0xc8>
20000490:	00000000 	nop
20000494:	24030004 	li	v1,4
20000498:	14430057 	bne	v0,v1,200005f8 <System_Control_Update+0x1a0>
2000049c:	3c028000 	lui	v0,0x8000
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200004a0:	08000166 	j	20000598 <System_Control_Update+0x140>
200004a4:	34430500 	ori	v1,v0,0x500
{
	switch(System_Mode_G)
	{
	/* Wait for pull cord to determine direction */
	case Ready:
		movement_G = Fd;
200004a8:	24020001 	li	v0,1
200004ac:	0800013e 	j	200004f8 <System_Control_Update+0xa0>
200004b0:	af8200e8 	sw	v0,232(gp)
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
200004b4:	8c440000 	lw	a0,0(v0)
200004b8:	00000000 	nop
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
200004bc:	30840001 	andi	a0,a0,0x1
200004c0:	10800065 	beqz	a0,20000658 <System_Control_Update+0x200>
200004c4:	00000000 	nop
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
				&&
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
200004c8:	8c420000 	lw	v0,0(v0)
200004cc:	00000000 	nop
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
200004d0:	30420002 	andi	v0,v0,0x2
200004d4:	10400060 	beqz	v0,20000658 <System_Control_Update+0x200>
200004d8:	00000000 	nop
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
				&&
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
				&&
				(++debounce > 100)
200004dc:	938200f8 	lbu	v0,248(gp)
200004e0:	00000000 	nop
200004e4:	24420001 	addiu	v0,v0,1
200004e8:	304200ff 	andi	v0,v0,0xff
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
200004ec:	2c440065 	sltiu	a0,v0,101
200004f0:	1480003f 	bnez	a0,200005f0 <System_Control_Update+0x198>
200004f4:	a38200f8 	sb	v0,248(gp)
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
				&&
				(++debounce > 100)
		)
		{
			System_Mode_G = Go;
200004f8:	03e00008 	jr	ra
200004fc:	af8300f4 	sw	v1,244(gp)
		}
		break;

	/* Do nothing */
	case Go:
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000500:	3c028000 	lui	v0,0x8000
20000504:	34420200 	ori	v0,v0,0x200
20000508:	8c430000 	lw	v1,0(v0)
		debounce = 0;
2000050c:	a38000f8 	sb	zero,248(gp)
		}
		break;

	/* Do nothing */
	case Go:
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000510:	ac430000 	sw	v1,0(v0)
20000514:	8c430000 	lw	v1,0(v0)
20000518:	0800017b 	j	200005ec <System_Control_Update+0x194>
2000051c:	34630040 	ori	v1,v1,0x40
		debounce = 0;
		break;

	/* Signal E Stop */
	case E_Stop:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000520:	3c028000 	lui	v0,0x8000
20000524:	34430500 	ori	v1,v0,0x500
20000528:	8c650000 	lw	a1,0(v1)
2000052c:	3c04ff7f 	lui	a0,0xff7f
20000530:	3484ffff 	ori	a0,a0,0xffff
20000534:	00a42024 	and	a0,a1,a0
20000538:	ac640000 	sw	a0,0(v1)
2000053c:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Error_Lamp, GPIO_HIGH);
20000540:	34420200 	ori	v0,v0,0x200
		debounce = 0;
		break;

	/* Signal E Stop */
	case E_Stop:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000544:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Error_Lamp, GPIO_HIGH);
20000548:	8c430000 	lw	v1,0(v0)
2000054c:	00000000 	nop
20000550:	ac430000 	sw	v1,0(v0)
20000554:	8c430000 	lw	v1,0(v0)
20000558:	00000000 	nop
2000055c:	34630100 	ori	v1,v1,0x100
20000560:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000564:	8c430000 	lw	v1,0(v0)
20000568:	00000000 	nop
2000056c:	ac430000 	sw	v1,0(v0)
20000570:	8c430000 	lw	v1,0(v0)
20000574:	00000000 	nop
20000578:	34630040 	ori	v1,v1,0x40
2000057c:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
20000580:	8c430000 	lw	v1,0(v0)
20000584:	00000000 	nop
20000588:	ac430000 	sw	v1,0(v0)
2000058c:	8c430000 	lw	v1,0(v0)
20000590:	0800017b 	j	200005ec <System_Control_Update+0x194>
20000594:	34630080 	ori	v1,v1,0x80
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000598:	8c650000 	lw	a1,0(v1)
2000059c:	3c04ff7f 	lui	a0,0xff7f
200005a0:	3484ffff 	ori	a0,a0,0xffff
200005a4:	00a42024 	and	a0,a1,a0
200005a8:	ac640000 	sw	a0,0(v1)
200005ac:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200005b0:	34420200 	ori	v0,v0,0x200
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200005b4:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200005b8:	8c440000 	lw	a0,0(v0)
200005bc:	2403ffbf 	li	v1,-65
200005c0:	00831824 	and	v1,a0,v1
200005c4:	ac430000 	sw	v1,0(v0)
200005c8:	8c430000 	lw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
		System_Mode_G = Ready; // TODO: Remove!
200005cc:	af8000f4 	sw	zero,244(gp)

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200005d0:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
200005d4:	8c440000 	lw	a0,0(v0)
200005d8:	2403ff7f 	li	v1,-129
200005dc:	00831824 	and	v1,a0,v1
200005e0:	ac430000 	sw	v1,0(v0)
200005e4:	8c430000 	lw	v1,0(v0)
200005e8:	00000000 	nop
200005ec:	ac430000 	sw	v1,0(v0)
		System_Mode_G = Ready; // TODO: Remove!
		break;
200005f0:	03e00008 	jr	ra
200005f4:	00000000 	nop

	default:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200005f8:	3c028000 	lui	v0,0x8000
200005fc:	34430500 	ori	v1,v0,0x500
20000600:	8c650000 	lw	a1,0(v1)
20000604:	3c04ff7f 	lui	a0,0xff7f
20000608:	3484ffff 	ori	a0,a0,0xffff
2000060c:	00a42024 	and	a0,a1,a0
20000610:	ac640000 	sw	a0,0(v1)
20000614:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000618:	34420200 	ori	v0,v0,0x200
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
		System_Mode_G = Ready; // TODO: Remove!
		break;

	default:
		GPIO_Write(KILL_ALL, GPIO_LOW);
2000061c:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000620:	8c430000 	lw	v1,0(v0)
20000624:	00000000 	nop
20000628:	ac430000 	sw	v1,0(v0)
2000062c:	8c430000 	lw	v1,0(v0)
20000630:	00000000 	nop
20000634:	34630040 	ori	v1,v1,0x40
20000638:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
2000063c:	8c430000 	lw	v1,0(v0)
20000640:	00000000 	nop
20000644:	ac430000 	sw	v1,0(v0)
20000648:	8c430000 	lw	v1,0(v0)
2000064c:	00000000 	nop
20000650:	34630080 	ori	v1,v1,0x80
20000654:	ac430000 	sw	v1,0(v0)
20000658:	03e00008 	jr	ra
2000065c:	00000000 	nop

20000660 <Read_Enc_Init>:
 * Initialisation for the Read_Enc package.
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
20000660:	3c028000 	lui	v0,0x8000
20000664:	34420500 	ori	v0,v0,0x500
20000668:	8c440004 	lw	a0,4(v0)
2000066c:	2403fbff 	li	v1,-1025
20000670:	00831824 	and	v1,a0,v1
20000674:	ac430004 	sw	v1,4(v0)
20000678:	8c430004 	lw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
2000067c:	af800104 	sw	zero,260(gp)
 * Initialisation for the Read_Enc package.
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
20000680:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
20000684:	8c440004 	lw	a0,4(v0)
20000688:	2403f7ff 	li	v1,-2049
2000068c:	00831824 	and	v1,a0,v1
20000690:	ac430004 	sw	v1,4(v0)
20000694:	8c430004 	lw	v1,4(v0)

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */
20000698:	af800114 	sw	zero,276(gp)
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
2000069c:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
200006a0:	8c440004 	lw	a0,4(v0)
200006a4:	3c03fff7 	lui	v1,0xfff7
200006a8:	3463ffff 	ori	v1,v1,0xffff
200006ac:	00831824 	and	v1,a0,v1
200006b0:	ac430004 	sw	v1,4(v0)
200006b4:	8c430004 	lw	v1,4(v0)
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
200006b8:	af800108 	sw	zero,264(gp)
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
200006bc:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
200006c0:	8c440004 	lw	a0,4(v0)
200006c4:	3c03fffb 	lui	v1,0xfffb
200006c8:	3463ffff 	ori	v1,v1,0xffff
200006cc:	00831824 	and	v1,a0,v1

	WheelCounts_Left_G = 0;
200006d0:	af800084 	sw	zero,132(gp)
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
200006d4:	ac430004 	sw	v1,4(v0)
200006d8:	8c430004 	lw	v1,4(v0)

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
	EncSignal_B[1] = 0;								/* Signal B from right encoder */
200006dc:	af800118 	sw	zero,280(gp)
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;
200006e0:	af8000c4 	sw	zero,196(gp)
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
200006e4:	ac430004 	sw	v1,4(v0)

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
	EncSignal_B[1] = 0;								/* Signal B from right encoder */

	/* Left */
	RevCount[0] = 0;
200006e8:	af80010c 	sw	zero,268(gp)
	EncoderCount[0] = 0;
200006ec:	af80011c 	sw	zero,284(gp)
	WheelCount[0] = 0;
200006f0:	af8000fc 	sw	zero,252(gp)

	/* Right */
	RevCount[1] = 0;
200006f4:	af800110 	sw	zero,272(gp)
	EncoderCount[1] = 0;
200006f8:	af800120 	sw	zero,288(gp)
	WheelCount[1] = 0;
200006fc:	af800100 	sw	zero,256(gp)

	bufferTime = 0;
}
20000700:	03e00008 	jr	ra
20000704:	a3800124 	sb	zero,292(gp)

20000708 <Read_Enc_Update>:
/**
 * Reads the value of the Encoders
 */
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
20000708:	8f8300f4 	lw	v1,244(gp)
2000070c:	24020002 	li	v0,2
20000710:	1462005d 	bne	v1,v0,20000888 <Read_Enc_Update+0x180>
20000714:	3c028000 	lui	v0,0x8000
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
20000718:	34420500 	ori	v0,v0,0x500
2000071c:	8c450000 	lw	a1,0(v0)
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000720:	8c440000 	lw	a0,0(v0)

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
20000724:	8c430000 	lw	v1,0(v0)
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000728:	8c420000 	lw	v0,0(v0)
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
2000072c:	00052a82 	srl	a1,a1,0xa
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000730:	000422c2 	srl	a0,a0,0xb

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
20000734:	00031cc2 	srl	v1,v1,0x13
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000738:	00021482 	srl	v0,v0,0x12
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
2000073c:	30a50001 	andi	a1,a1,0x1
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000740:	30840001 	andi	a0,a0,0x1

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
20000744:	30630001 	andi	v1,v1,0x1
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000748:	30420001 	andi	v0,v0,0x1
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
2000074c:	af850104 	sw	a1,260(gp)
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000750:	af840114 	sw	a0,276(gp)

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
20000754:	af830108 	sw	v1,264(gp)
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000758:	af820118 	sw	v0,280(gp)
2000075c:	27840130 	addiu	a0,gp,304
20000760:	2783011c 	addiu	v1,gp,284
20000764:	27860128 	addiu	a2,gp,296
20000768:	27890104 	addiu	t1,gp,260
2000076c:	27880114 	addiu	t0,gp,276
20000770:	00002821 	move	a1,zero

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
		{
			if(Pulse_Flag[i] == High)
20000774:	24020001 	li	v0,1
				}

				/* Full cycle detection when both signals dropped off */
				else if((EncSignal_A[i] == Low) && (EncSignal_B[i] == Low))
				{
					switch(WheelDirection[i])
20000778:	240a0002 	li	t2,2
				WheelDirection[i] = WheelDirection[i];
				Pulse_Flag[i] = Pulse_Flag[i];
			}

			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
2000077c:	278e00fc 	addiu	t6,gp,252
20000780:	278d010c 	addiu	t5,gp,268

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
20000784:	240c0008 	li	t4,8
		{
			if(Pulse_Flag[i] == High)
20000788:	8c8b0000 	lw	t3,0(a0)
2000078c:	8d270000 	lw	a3,0(t1)
20000790:	15620020 	bne	t3,v0,20000814 <Read_Enc_Update+0x10c>
20000794:	00000000 	nop
			{
				/* Direction detection on single signal drop-off */
				if(EncSignal_A[i] != EncSignal_B[i])
20000798:	8d0b0000 	lw	t3,0(t0)
2000079c:	00000000 	nop
200007a0:	10eb0009 	beq	a3,t3,200007c8 <Read_Enc_Update+0xc0>
200007a4:	00000000 	nop
				{
					switch(EncSignal_A[i])
200007a8:	10e00005 	beqz	a3,200007c0 <Read_Enc_Update+0xb8>
200007ac:	00000000 	nop
200007b0:	14e20022 	bne	a3,v0,2000083c <Read_Enc_Update+0x134>
200007b4:	00ad3821 	addu	a3,a1,t5
					{
						case High:
							WheelDirection[i] = Reverse;
							break;
200007b8:	0800020f 	j	2000083c <Read_Enc_Update+0x134>
200007bc:	acca0000 	sw	t2,0(a2)
						case Low:
							WheelDirection[i] = Forwards;
200007c0:	0800020e 	j	20000838 <Read_Enc_Update+0x130>
200007c4:	acc20000 	sw	v0,0(a2)
							break;
					}
				}

				/* Full cycle detection when both signals dropped off */
				else if((EncSignal_A[i] == Low) && (EncSignal_B[i] == Low))
200007c8:	14e0001c 	bnez	a3,2000083c <Read_Enc_Update+0x134>
200007cc:	00ad3821 	addu	a3,a1,t5
				{
					switch(WheelDirection[i])
200007d0:	8cc70000 	lw	a3,0(a2)
200007d4:	00000000 	nop
200007d8:	10e20005 	beq	a3,v0,200007f0 <Read_Enc_Update+0xe8>
200007dc:	00000000 	nop
200007e0:	14ea000a 	bne	a3,t2,2000080c <Read_Enc_Update+0x104>
200007e4:	00000000 	nop
200007e8:	080001ff 	j	200007fc <Read_Enc_Update+0xf4>
200007ec:	00000000 	nop
					{
						case Forwards:
							EncoderCount[i] ++;
200007f0:	8c670000 	lw	a3,0(v1)
200007f4:	08000202 	j	20000808 <Read_Enc_Update+0x100>
200007f8:	24e70001 	addiu	a3,a3,1
							break;
						case Reverse:
							EncoderCount[i] --;
200007fc:	8c670000 	lw	a3,0(v1)
20000800:	00000000 	nop
20000804:	24e7ffff 	addiu	a3,a3,-1
20000808:	ac670000 	sw	a3,0(v1)
						case Off:
							break;
						default:
							break;
					}
					Pulse_Flag[i] = Low;
2000080c:	0800020e 	j	20000838 <Read_Enc_Update+0x130>
20000810:	ac800000 	sw	zero,0(a0)
				}
			}
			/* Wait for both A and B to be high to raise Pulse_Flag */
			else if((EncSignal_A[i] == High) && (EncSignal_B[i] == High))
20000814:	14e20007 	bne	a3,v0,20000834 <Read_Enc_Update+0x12c>
20000818:	00000000 	nop
2000081c:	8d070000 	lw	a3,0(t0)
20000820:	00000000 	nop
20000824:	14e20003 	bne	a3,v0,20000834 <Read_Enc_Update+0x12c>
20000828:	00000000 	nop
2000082c:	0800020e 	j	20000838 <Read_Enc_Update+0x130>
20000830:	ac820000 	sw	v0,0(a0)
			/* ET Padding to reduce jitter */
			else
			{
				EncoderCount[i] = EncoderCount[i];
				WheelDirection[i] = WheelDirection[i];
				Pulse_Flag[i] = Pulse_Flag[i];
20000834:	ac8b0000 	sw	t3,0(a0)
			}

			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
20000838:	00ad3821 	addu	a3,a1,t5
2000083c:	8ceb0000 	lw	t3,0(a3)
20000840:	8c670000 	lw	a3,0(v1)
20000844:	000b59c0 	sll	t3,t3,0x7
20000848:	01675821 	addu	t3,t3,a3
2000084c:	00ae3821 	addu	a3,a1,t6
20000850:	24a50004 	addiu	a1,a1,4
20000854:	aceb0000 	sw	t3,0(a3)
20000858:	24840004 	addiu	a0,a0,4
2000085c:	24630004 	addiu	v1,v1,4
20000860:	24c60004 	addiu	a2,a2,4
20000864:	25290004 	addiu	t1,t1,4

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
20000868:	14acffc7 	bne	a1,t4,20000788 <Read_Enc_Update+0x80>
2000086c:	25080004 	addiu	t0,t0,4
			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
		}

		/* Output distance wheels have travelled to global variable */
		WheelCounts_Left_G = WheelCount[0];
20000870:	8f8200fc 	lw	v0,252(gp)
20000874:	00000000 	nop
20000878:	af820084 	sw	v0,132(gp)
		WheelCounts_Right_G = WheelCount[1];
2000087c:	8f820100 	lw	v0,256(gp)
20000880:	03e00008 	jr	ra
20000884:	af8200c4 	sw	v0,196(gp)
	}
	else
	{
		WheelCount[0] = 0;
20000888:	af8000fc 	sw	zero,252(gp)
		WheelCount[1] = 0;
2000088c:	03e00008 	jr	ra
20000890:	af800100 	sw	zero,256(gp)

20000894 <speedControlRight>:

uint16_t speedControlRight(Bool correctionL, Bool correctionR)
{
	static uint16_t speed;

	if(Right_motor_speed_G == 0)
20000894:	978200ae 	lhu	v0,174(gp)
20000898:	00000000 	nop
2000089c:	14400002 	bnez	v0,200008a8 <speedControlRight+0x14>
200008a0:	2402000c 	li	v0,12
	{
		Right_motor_speed_G = CRAWL_SPEED;
200008a4:	a78200ae 	sh	v0,174(gp)
	}

	if((correctionL == False) && (correctionR == True))
200008a8:	14800006 	bnez	a0,200008c4 <speedControlRight+0x30>
200008ac:	24020001 	li	v0,1
200008b0:	14a2000c 	bne	a1,v0,200008e4 <speedControlRight+0x50>
200008b4:	00000000 	nop
	{
		Right_motor_speed_G++;
200008b8:	978200ae 	lhu	v0,174(gp)
200008bc:	08000238 	j	200008e0 <speedControlRight+0x4c>
200008c0:	24420001 	addiu	v0,v0,1
	}
	else if((correctionL == True) && (correctionR == False))
200008c4:	14820007 	bne	a0,v0,200008e4 <speedControlRight+0x50>
200008c8:	00000000 	nop
200008cc:	14a00005 	bnez	a1,200008e4 <speedControlRight+0x50>
200008d0:	00000000 	nop
	{
		Right_motor_speed_G--;
200008d4:	978200ae 	lhu	v0,174(gp)
200008d8:	00000000 	nop
200008dc:	2442ffff 	addiu	v0,v0,-1
200008e0:	a78200ae 	sh	v0,174(gp)
	}

	if(Right_motor_speed_G < (CRAWL_SPEED - CORRECTION_VALUE_LOWER))
200008e4:	978200ae 	lhu	v0,174(gp)
200008e8:	00000000 	nop
200008ec:	2c42000c 	sltiu	v0,v0,12
200008f0:	10400002 	beqz	v0,200008fc <speedControlRight+0x68>
200008f4:	2402000c 	li	v0,12
	{
		Right_motor_speed_G = (CRAWL_SPEED - CORRECTION_VALUE_LOWER);
200008f8:	a78200ae 	sh	v0,174(gp)
	}

	if(Right_motor_speed_G > (CRAWL_SPEED + CORRECTION_VALUE_UPPER))
200008fc:	978200ae 	lhu	v0,174(gp)
20000900:	00000000 	nop
20000904:	2c42000f 	sltiu	v0,v0,15
20000908:	14400003 	bnez	v0,20000918 <speedControlRight+0x84>
2000090c:	00000000 	nop
	{
		Right_motor_speed_G = CRAWL_SPEED + CORRECTION_VALUE_UPPER;
20000910:	2402000e 	li	v0,14
20000914:	a78200ae 	sh	v0,174(gp)
	}

	return speed;
}
20000918:	03e00008 	jr	ra
2000091c:	00001021 	move	v0,zero

20000920 <visualsRt>:
	return result;
}

void visualsRt(void)
{
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000920:	8f8200f4 	lw	v0,244(gp)
	result = (uint16_t)(speed);
	return result;
}

void visualsRt(void)
{
20000924:	27bdffe0 	addiu	sp,sp,-32
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000928:	24030002 	li	v1,2
	result = (uint16_t)(speed);
	return result;
}

void visualsRt(void)
{
2000092c:	afbf001c 	sw	ra,28(sp)
20000930:	afb10018 	sw	s1,24(sp)
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000934:	10430004 	beq	v0,v1,20000948 <visualsRt+0x28>
20000938:	afb00014 	sw	s0,20(sp)
2000093c:	24030004 	li	v1,4
20000940:	14430009 	bne	v0,v1,20000968 <visualsRt+0x48>
20000944:	00000000 	nop
	{
		Segment_Set_Decimal(displayA);
20000948:	8f84ffdc 	lw	a0,-36(gp)
2000094c:	0c000ad3 	jal	20002b4c <Segment_Set_Decimal>
20000950:	00000000 	nop
		Segment_Set_Decimal(displayB);
20000954:	8f84ffe0 	lw	a0,-32(gp)
20000958:	0c000ad3 	jal	20002b4c <Segment_Set_Decimal>
2000095c:	00000000 	nop
	return result;
}

void visualsRt(void)
{
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000960:	08000260 	j	20000980 <visualsRt+0x60>
20000964:	00000000 	nop
		Segment_Set_Decimal(displayA);
		Segment_Set_Decimal(displayB);
	}
	else
	{
		Segment_Clear_Decimal(displayA);
20000968:	8f84ffdc 	lw	a0,-36(gp)
2000096c:	0c000aad 	jal	20002ab4 <Segment_Clear_Decimal>
20000970:	00000000 	nop
		Segment_Clear_Decimal(displayB);
20000974:	8f84ffe0 	lw	a0,-32(gp)
20000978:	0c000aad 	jal	20002ab4 <Segment_Clear_Decimal>
2000097c:	00000000 	nop
	}

	if(
		Right_motor_direction_G == Forwards
		&& Right_motor_speed_G != 0
20000980:	8f830080 	lw	v1,128(gp)
	{
		Segment_Clear_Decimal(displayA);
		Segment_Clear_Decimal(displayB);
	}

	if(
20000984:	24020001 	li	v0,1
20000988:	1462000f 	bne	v1,v0,200009c8 <visualsRt+0xa8>
2000098c:	3c028000 	lui	v0,0x8000
20000990:	978200ae 	lhu	v0,174(gp)
20000994:	00000000 	nop
20000998:	1040000b 	beqz	v0,200009c8 <visualsRt+0xa8>
2000099c:	3c028000 	lui	v0,0x8000
		Right_motor_direction_G == Forwards
		&& Right_motor_speed_G != 0
		)
	{
		GPIO_Write(LED_Pin_RtFd, GPIO_HIGH);
200009a0:	34420200 	ori	v0,v0,0x200
200009a4:	8c430000 	lw	v1,0(v0)
200009a8:	00000000 	nop
200009ac:	ac430000 	sw	v1,0(v0)
200009b0:	8c430000 	lw	v1,0(v0)
200009b4:	00000000 	nop
200009b8:	34630002 	ori	v1,v1,0x2
200009bc:	ac430000 	sw	v1,0(v0)
200009c0:	08000281 	j	20000a04 <visualsRt+0xe4>
200009c4:	00000000 	nop
	}
	else
	{
		GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
200009c8:	34420200 	ori	v0,v0,0x200
200009cc:	8c450000 	lw	a1,0(v0)
200009d0:	2404fffd 	li	a0,-3
200009d4:	00a42024 	and	a0,a1,a0
200009d8:	ac440000 	sw	a0,0(v0)
200009dc:	8c440000 	lw	a0,0(v0)
200009e0:	00000000 	nop
200009e4:	ac440000 	sw	a0,0(v0)
	}

	if(( Right_motor_direction_G == Reverse && Right_motor_speed_G != 0) || (Course_correction_Rt == True))
200009e8:	24020002 	li	v0,2
200009ec:	14620005 	bne	v1,v0,20000a04 <visualsRt+0xe4>
200009f0:	00000000 	nop
200009f4:	978200ae 	lhu	v0,174(gp)
200009f8:	00000000 	nop
200009fc:	14400005 	bnez	v0,20000a14 <visualsRt+0xf4>
20000a00:	3c028000 	lui	v0,0x8000
20000a04:	8f830060 	lw	v1,96(gp)
20000a08:	24020001 	li	v0,1
20000a0c:	14620008 	bne	v1,v0,20000a30 <visualsRt+0x110>
20000a10:	3c028000 	lui	v0,0x8000
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_HIGH);
20000a14:	34420200 	ori	v0,v0,0x200
20000a18:	8c430000 	lw	v1,0(v0)
20000a1c:	00000000 	nop
20000a20:	ac430000 	sw	v1,0(v0)
20000a24:	8c430000 	lw	v1,0(v0)
20000a28:	08000292 	j	20000a48 <visualsRt+0x128>
20000a2c:	34630001 	ori	v1,v1,0x1
	}
	else
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000a30:	34420200 	ori	v0,v0,0x200
20000a34:	8c440000 	lw	a0,0(v0)
20000a38:	2403fffe 	li	v1,-2
20000a3c:	00831824 	and	v1,a0,v1
20000a40:	ac430000 	sw	v1,0(v0)
20000a44:	8c430000 	lw	v1,0(v0)

//	Segment_Write(displayA, (sensorReadings.USFwd & 0x000F) >> 0);
//	Segment_Write(displayB, (sensorReadings.USFwd & 0x00F0) >> 4);
//	Segment_Write(displayC, (sensorReadings.USFwd & 0x0F00) >> 8);

	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
20000a48:	3c104000 	lui	s0,0x4000
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_HIGH);
	}
	else
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000a4c:	ac430000 	sw	v1,0(v0)

//	Segment_Write(displayA, (sensorReadings.USFwd & 0x000F) >> 0);
//	Segment_Write(displayB, (sensorReadings.USFwd & 0x00F0) >> 4);
//	Segment_Write(displayC, (sensorReadings.USFwd & 0x0F00) >> 8);

	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
20000a50:	261103cc 	addiu	s1,s0,972
20000a54:	92250004 	lbu	a1,4(s1)
20000a58:	8f84ffdc 	lw	a0,-36(gp)
20000a5c:	0c000af8 	jal	20002be0 <Segment_Write>
20000a60:	30a5000f 	andi	a1,a1,0xf
	Segment_Write(displayB, (sensorReadings.IRRight & 0x00F0) >> 4);
20000a64:	8e250004 	lw	a1,4(s1)
20000a68:	8f84ffe0 	lw	a0,-32(gp)
20000a6c:	30a500f0 	andi	a1,a1,0xf0
20000a70:	0c000af8 	jal	20002be0 <Segment_Write>
20000a74:	00052902 	srl	a1,a1,0x4
	Segment_Write(displayC, (sensorReadings.IRLeft & 0x000F) >> 0);
20000a78:	920503cc 	lbu	a1,972(s0)
20000a7c:	8f84ffe4 	lw	a0,-28(gp)
20000a80:	0c000af8 	jal	20002be0 <Segment_Write>
20000a84:	30a5000f 	andi	a1,a1,0xf
	Segment_Write(displayD, (sensorReadings.IRLeft & 0x00F0) >> 4);
20000a88:	8e0503cc 	lw	a1,972(s0)
20000a8c:	8f84ffe8 	lw	a0,-24(gp)
20000a90:	30a500f0 	andi	a1,a1,0xf0

}
20000a94:	8fbf001c 	lw	ra,28(sp)
20000a98:	8fb10018 	lw	s1,24(sp)
20000a9c:	8fb00014 	lw	s0,20(sp)
//	Segment_Write(displayC, (sensorReadings.USFwd & 0x0F00) >> 8);

	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
	Segment_Write(displayB, (sensorReadings.IRRight & 0x00F0) >> 4);
	Segment_Write(displayC, (sensorReadings.IRLeft & 0x000F) >> 0);
	Segment_Write(displayD, (sensorReadings.IRLeft & 0x00F0) >> 4);
20000aa0:	00052902 	srl	a1,a1,0x4
20000aa4:	08000af8 	j	20002be0 <Segment_Write>
20000aa8:	27bd0020 	addiu	sp,sp,32

20000aac <Motor_Right_Update>:
/**
 * Motor_Right controller operation
 */
void Motor_Right_Update(void)
{
	if(System_Mode_G == Go)
20000aac:	8f8500f4 	lw	a1,244(gp)

/**
 * Motor_Right controller operation
 */
void Motor_Right_Update(void)
{
20000ab0:	27bdffe8 	addiu	sp,sp,-24
	if(System_Mode_G == Go)
20000ab4:	24020002 	li	v0,2
20000ab8:	14a20036 	bne	a1,v0,20000b94 <Motor_Right_Update+0xe8>
20000abc:	afbf0014 	sw	ra,20(sp)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Rt_Diff = (WheelCounts_Right_G - Enc_Rt_Old);
20000ac0:	8f8400c4 	lw	a0,196(gp)
20000ac4:	8f830140 	lw	v1,320(gp)

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Lf)
20000ac8:	8f8200e8 	lw	v0,232(gp)
void Motor_Right_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Rt_Diff = (WheelCounts_Right_G - Enc_Rt_Old);
20000acc:	00831823 	subu	v1,a0,v1

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Lf)
20000ad0:	24060001 	li	a2,1
20000ad4:	10460004 	beq	v0,a2,20000ae8 <Motor_Right_Update+0x3c>
20000ad8:	af830144 	sw	v1,324(gp)
20000adc:	24060003 	li	a2,3
20000ae0:	14460004 	bne	v0,a2,20000af4 <Motor_Right_Update+0x48>
20000ae4:	00000000 	nop
		{
			Motor_Rt_Enc_Track += Enc_Rt_Diff;
20000ae8:	8f8500d4 	lw	a1,212(gp)
20000aec:	080002c4 	j	20000b10 <Motor_Right_Update+0x64>
20000af0:	00a31821 	addu	v1,a1,v1
		}
		else if(movement_G == Bd || movement_G == Rt)
20000af4:	10450003 	beq	v0,a1,20000b04 <Motor_Right_Update+0x58>
20000af8:	24050004 	li	a1,4
20000afc:	14450005 	bne	v0,a1,20000b14 <Motor_Right_Update+0x68>
20000b00:	00000000 	nop
		{
			Motor_Rt_Enc_Track -= Enc_Rt_Diff;
20000b04:	8f8500d4 	lw	a1,212(gp)
20000b08:	00000000 	nop
20000b0c:	00a31823 	subu	v1,a1,v1
20000b10:	af8300d4 	sw	v1,212(gp)
		}

		Enc_Rt_Old = WheelCounts_Right_G;

		/* Script reader */
		switch(movement_G)
20000b14:	24030002 	li	v1,2
20000b18:	10430017 	beq	v0,v1,20000b78 <Motor_Right_Update+0xcc>
20000b1c:	af840140 	sw	a0,320(gp)
20000b20:	2c430003 	sltiu	v1,v0,3
20000b24:	10600006 	beqz	v1,20000b40 <Motor_Right_Update+0x94>
20000b28:	24030003 	li	v1,3
20000b2c:	24030001 	li	v1,1
20000b30:	14430016 	bne	v0,v1,20000b8c <Motor_Right_Update+0xe0>
20000b34:	00000000 	nop
20000b38:	080002d6 	j	20000b58 <Motor_Right_Update+0xac>
20000b3c:	00000000 	nop
20000b40:	1043000b 	beq	v0,v1,20000b70 <Motor_Right_Update+0xc4>
20000b44:	24030004 	li	v1,4
20000b48:	14430010 	bne	v0,v1,20000b8c <Motor_Right_Update+0xe0>
20000b4c:	24020002 	li	v0,2
			Right_motor_direction_G = Forwards;
			Right_motor_speed_G = CRAWL_SPEED;
			break;
		case Bd:
		case Rt:
			Right_motor_direction_G = Reverse;
20000b50:	080002e0 	j	20000b80 <Motor_Right_Update+0xd4>
20000b54:	af820080 	sw	v0,128(gp)
		/* Script reader */
		switch(movement_G)
		{
		case Fd:
			Right_motor_direction_G = Forwards;
			speedControlRight(Course_correction_Lf, Course_correction_Rt);
20000b58:	8f840070 	lw	a0,112(gp)
20000b5c:	8f850060 	lw	a1,96(gp)
20000b60:	0c000225 	jal	20000894 <speedControlRight>
20000b64:	af820080 	sw	v0,128(gp)
			break;
20000b68:	080002ea 	j	20000ba8 <Motor_Right_Update+0xfc>
20000b6c:	00000000 	nop
		case Lf:
			Right_motor_direction_G = Forwards;
20000b70:	080002df 	j	20000b7c <Motor_Right_Update+0xd0>
20000b74:	24020001 	li	v0,1
			Right_motor_speed_G = CRAWL_SPEED;
			break;
		case Bd:
		case Rt:
			Right_motor_direction_G = Reverse;
20000b78:	24020002 	li	v0,2
20000b7c:	af820080 	sw	v0,128(gp)
			Right_motor_speed_G = CRAWL_SPEED;
20000b80:	2402000c 	li	v0,12
			break;
20000b84:	080002ea 	j	20000ba8 <Motor_Right_Update+0xfc>
20000b88:	a78200ae 	sh	v0,174(gp)
		case Stp:
		default:
			Right_motor_speed_G = 0;
20000b8c:	080002ea 	j	20000ba8 <Motor_Right_Update+0xfc>
20000b90:	a78000ae 	sh	zero,174(gp)
			break;
		}
	}
	else
	{
		Right_motor_direction_G = Off;
20000b94:	af800080 	sw	zero,128(gp)
		Right_motor_speed_G = 0;
20000b98:	a78000ae 	sh	zero,174(gp)
		Motor_Rt_Enc_Track = 0;
20000b9c:	af8000d4 	sw	zero,212(gp)
		Enc_Rt_Diff = 0;
20000ba0:	af800144 	sw	zero,324(gp)
		Enc_Rt_Old = 0;
20000ba4:	af800140 	sw	zero,320(gp)
	}

	visualsRt();
}
20000ba8:	8fbf0014 	lw	ra,20(sp)
		Motor_Rt_Enc_Track = 0;
		Enc_Rt_Diff = 0;
		Enc_Rt_Old = 0;
	}

	visualsRt();
20000bac:	08000248 	j	20000920 <visualsRt>
20000bb0:	27bd0018 	addiu	sp,sp,24

20000bb4 <Motor_Right_Init>:
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
20000bb4:	3c038000 	lui	v1,0x8000
20000bb8:	34620200 	ori	v0,v1,0x200
20000bbc:	8c450004 	lw	a1,4(v0)
20000bc0:	2404fffd 	li	a0,-3
20000bc4:	00a42824 	and	a1,a1,a0
20000bc8:	ac450004 	sw	a1,4(v0)
20000bcc:	8c460004 	lw	a2,4(v0)
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000bd0:	2405fffe 	li	a1,-2
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
20000bd4:	34c60002 	ori	a2,a2,0x2
20000bd8:	ac460004 	sw	a2,4(v0)
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000bdc:	8c460000 	lw	a2,0(v0)
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000be0:	34630500 	ori	v1,v1,0x500
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000be4:	00c42024 	and	a0,a2,a0
20000be8:	ac440000 	sw	a0,0(v0)
20000bec:	8c440000 	lw	a0,0(v0)
/**
 * Initialisation for the Motor_Right package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
20000bf0:	27bdffe8 	addiu	sp,sp,-24
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000bf4:	ac440000 	sw	a0,0(v0)
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000bf8:	8c460004 	lw	a2,4(v0)
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);

	Segment_Enable(displayA);
20000bfc:	8f84ffdc 	lw	a0,-36(gp)
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000c00:	00c53024 	and	a2,a2,a1
20000c04:	ac460004 	sw	a2,4(v0)
20000c08:	8c460004 	lw	a2,4(v0)
/**
 * Initialisation for the Motor_Right package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
20000c0c:	afbf0014 	sw	ra,20(sp)
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000c10:	34c60001 	ori	a2,a2,0x1
20000c14:	ac460004 	sw	a2,4(v0)
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c18:	8c460000 	lw	a2,0(v0)
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
20000c1c:	af800080 	sw	zero,128(gp)
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c20:	00c52824 	and	a1,a2,a1
20000c24:	ac450000 	sw	a1,0(v0)
20000c28:	8c450000 	lw	a1,0(v0)
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;
20000c2c:	af8000d4 	sw	zero,212(gp)

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c30:	ac450000 	sw	a1,0(v0)
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000c34:	8c650004 	lw	a1,4(v1)
20000c38:	2402ffdf 	li	v0,-33
20000c3c:	00a21024 	and	v0,a1,v0
20000c40:	ac620004 	sw	v0,4(v1)
20000c44:	8c620004 	lw	v0,4(v1)
 */
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
20000c48:	a78000ae 	sh	zero,174(gp)

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000c4c:	ac620004 	sw	v0,4(v1)

	Segment_Enable(displayA);
20000c50:	0c000b25 	jal	20002c94 <Segment_Enable>
20000c54:	00000000 	nop
	Segment_Write(displayA, 0x0);
20000c58:	8f84ffdc 	lw	a0,-36(gp)
20000c5c:	0c000af8 	jal	20002be0 <Segment_Write>
20000c60:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayA);
20000c64:	8f84ffdc 	lw	a0,-36(gp)
20000c68:	0c000aad 	jal	20002ab4 <Segment_Clear_Decimal>
20000c6c:	00000000 	nop
	Segment_Enable(displayB);
20000c70:	8f84ffe0 	lw	a0,-32(gp)
20000c74:	0c000b25 	jal	20002c94 <Segment_Enable>
20000c78:	00000000 	nop
	Segment_Write(displayB, 0x0);
20000c7c:	8f84ffe0 	lw	a0,-32(gp)
20000c80:	0c000af8 	jal	20002be0 <Segment_Write>
20000c84:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayB);
20000c88:	8f84ffe0 	lw	a0,-32(gp)
}
20000c8c:	8fbf0014 	lw	ra,20(sp)
	Segment_Enable(displayA);
	Segment_Write(displayA, 0x0);
	Segment_Clear_Decimal(displayA);
	Segment_Enable(displayB);
	Segment_Write(displayB, 0x0);
	Segment_Clear_Decimal(displayB);
20000c90:	08000aad 	j	20002ab4 <Segment_Clear_Decimal>
20000c94:	27bd0018 	addiu	sp,sp,24

20000c98 <visualsLf>:
	return result;
}

void visualsLf(void)
{
	if(System_Mode_G == Game_Over)
20000c98:	8f8300f4 	lw	v1,244(gp)
	result = (uint16_t)(speed);
	return result;
}

void visualsLf(void)
{
20000c9c:	27bdffe8 	addiu	sp,sp,-24
	if(System_Mode_G == Game_Over)
20000ca0:	24020004 	li	v0,4
20000ca4:	14620009 	bne	v1,v0,20000ccc <visualsLf+0x34>
20000ca8:	afbf0014 	sw	ra,20(sp)
	{
		Segment_Set_Decimal(displayC);
20000cac:	8f84ffec 	lw	a0,-20(gp)
20000cb0:	0c000ad3 	jal	20002b4c <Segment_Set_Decimal>
20000cb4:	00000000 	nop
		Segment_Set_Decimal(displayD);
20000cb8:	8f84fff0 	lw	a0,-16(gp)
20000cbc:	0c000ad3 	jal	20002b4c <Segment_Set_Decimal>
20000cc0:	00000000 	nop
20000cc4:	08000339 	j	20000ce4 <visualsLf+0x4c>
20000cc8:	00000000 	nop
	}
	else
	{
		Segment_Clear_Decimal(displayC);
20000ccc:	8f84ffec 	lw	a0,-20(gp)
20000cd0:	0c000aad 	jal	20002ab4 <Segment_Clear_Decimal>
20000cd4:	00000000 	nop
		Segment_Clear_Decimal(displayD);
20000cd8:	8f84fff0 	lw	a0,-16(gp)
20000cdc:	0c000aad 	jal	20002ab4 <Segment_Clear_Decimal>
20000ce0:	00000000 	nop
	}

	if(
		Left_motor_direction_G == Forwards
		&& Left_motor_speed_G != 0
20000ce4:	8f830090 	lw	v1,144(gp)
	{
		Segment_Clear_Decimal(displayC);
		Segment_Clear_Decimal(displayD);
	}

	if(
20000ce8:	24020001 	li	v0,1
20000cec:	1462000f 	bne	v1,v0,20000d2c <visualsLf+0x94>
20000cf0:	3c028000 	lui	v0,0x8000
20000cf4:	978200ac 	lhu	v0,172(gp)
20000cf8:	00000000 	nop
20000cfc:	1040000b 	beqz	v0,20000d2c <visualsLf+0x94>
20000d00:	3c028000 	lui	v0,0x8000
		Left_motor_direction_G == Forwards
		&& Left_motor_speed_G != 0
		)
	{
		GPIO_Write(LED_Pin_LfFd, GPIO_HIGH);
20000d04:	34420200 	ori	v0,v0,0x200
20000d08:	8c430000 	lw	v1,0(v0)
20000d0c:	00000000 	nop
20000d10:	ac430000 	sw	v1,0(v0)
20000d14:	8c430000 	lw	v1,0(v0)
20000d18:	00000000 	nop
20000d1c:	34630008 	ori	v1,v1,0x8
20000d20:	ac430000 	sw	v1,0(v0)
20000d24:	0800035a 	j	20000d68 <visualsLf+0xd0>
20000d28:	00000000 	nop
	}
	else
	{
		GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000d2c:	34420200 	ori	v0,v0,0x200
20000d30:	8c450000 	lw	a1,0(v0)
20000d34:	2404fff7 	li	a0,-9
20000d38:	00a42024 	and	a0,a1,a0
20000d3c:	ac440000 	sw	a0,0(v0)
20000d40:	8c440000 	lw	a0,0(v0)
20000d44:	00000000 	nop
20000d48:	ac440000 	sw	a0,0(v0)
	}

	if((Left_motor_direction_G == Reverse && Left_motor_speed_G != 0	) || (Course_correction_Lf == True))
20000d4c:	24020002 	li	v0,2
20000d50:	14620005 	bne	v1,v0,20000d68 <visualsLf+0xd0>
20000d54:	00000000 	nop
20000d58:	978200ac 	lhu	v0,172(gp)
20000d5c:	00000000 	nop
20000d60:	14400005 	bnez	v0,20000d78 <visualsLf+0xe0>
20000d64:	3c028000 	lui	v0,0x8000
20000d68:	8f830070 	lw	v1,112(gp)
20000d6c:	24020001 	li	v0,1
20000d70:	14620008 	bne	v1,v0,20000d94 <visualsLf+0xfc>
20000d74:	3c028000 	lui	v0,0x8000
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_HIGH);
20000d78:	34420200 	ori	v0,v0,0x200
20000d7c:	8c430000 	lw	v1,0(v0)
20000d80:	00000000 	nop
20000d84:	ac430000 	sw	v1,0(v0)
20000d88:	8c430000 	lw	v1,0(v0)
20000d8c:	0800036b 	j	20000dac <visualsLf+0x114>
20000d90:	34630004 	ori	v1,v1,0x4
	}
	else
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000d94:	34420200 	ori	v0,v0,0x200
20000d98:	8c440000 	lw	a0,0(v0)
20000d9c:	2403fffb 	li	v1,-5
20000da0:	00831824 	and	v1,a0,v1
20000da4:	ac430000 	sw	v1,0(v0)
20000da8:	8c430000 	lw	v1,0(v0)
	}

//	Segment_Write(displayC, (Motor_Lf_Enc_Track & 0x000F) >> 0);
//	Segment_Write(displayD, (Motor_Lf_Enc_Track & 0x00F0) >> 4);

}
20000dac:	8fbf0014 	lw	ra,20(sp)
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_HIGH);
	}
	else
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000db0:	ac430000 	sw	v1,0(v0)
	}

//	Segment_Write(displayC, (Motor_Lf_Enc_Track & 0x000F) >> 0);
//	Segment_Write(displayD, (Motor_Lf_Enc_Track & 0x00F0) >> 4);

}
20000db4:	03e00008 	jr	ra
20000db8:	27bd0018 	addiu	sp,sp,24

20000dbc <Motor_Left_Update>:
 * Motor_Left controller operation.
 */
void Motor_Left_Update(void)
{

	if(System_Mode_G == Go)
20000dbc:	8f8300f4 	lw	v1,244(gp)
20000dc0:	24020002 	li	v0,2
20000dc4:	14620028 	bne	v1,v0,20000e68 <Motor_Left_Update+0xac>
20000dc8:	24050001 	li	a1,1
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Lf_Diff = (WheelCounts_Left_G - Enc_Lf_Old);
20000dcc:	8f840084 	lw	a0,132(gp)
20000dd0:	8f83014c 	lw	v1,332(gp)

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Rt)
20000dd4:	8f8200e8 	lw	v0,232(gp)
{

	if(System_Mode_G == Go)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Lf_Diff = (WheelCounts_Left_G - Enc_Lf_Old);
20000dd8:	00831823 	subu	v1,a0,v1

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Rt)
20000ddc:	10450004 	beq	v0,a1,20000df0 <Motor_Left_Update+0x34>
20000de0:	af830148 	sw	v1,328(gp)
20000de4:	24050004 	li	a1,4
20000de8:	14450004 	bne	v0,a1,20000dfc <Motor_Left_Update+0x40>
20000dec:	2445fffe 	addiu	a1,v0,-2
		{
			Motor_Lf_Enc_Track += Enc_Lf_Diff;
20000df0:	8f85003c 	lw	a1,60(gp)
20000df4:	08000385 	j	20000e14 <Motor_Left_Update+0x58>
20000df8:	00a31821 	addu	v1,a1,v1
		}
		else if(movement_G == Bd || movement_G == Lf)
20000dfc:	2ca50002 	sltiu	a1,a1,2
20000e00:	10a00005 	beqz	a1,20000e18 <Motor_Left_Update+0x5c>
20000e04:	00000000 	nop
		{
			Motor_Lf_Enc_Track -= Enc_Lf_Diff;
20000e08:	8f85003c 	lw	a1,60(gp)
20000e0c:	00000000 	nop
20000e10:	00a31823 	subu	v1,a1,v1
20000e14:	af83003c 	sw	v1,60(gp)
		}

		Enc_Lf_Old = WheelCounts_Left_G;

		/* Script reader */
		switch(movement_G)
20000e18:	2c430004 	sltiu	v1,v0,4
20000e1c:	10600006 	beqz	v1,20000e38 <Motor_Left_Update+0x7c>
20000e20:	af84014c 	sw	a0,332(gp)
20000e24:	2c430002 	sltiu	v1,v0,2
20000e28:	10600008 	beqz	v1,20000e4c <Motor_Left_Update+0x90>
20000e2c:	24030001 	li	v1,1
20000e30:	0800038f 	j	20000e3c <Motor_Left_Update+0x80>
20000e34:	00000000 	nop
20000e38:	24030004 	li	v1,4
20000e3c:	14430008 	bne	v0,v1,20000e60 <Motor_Left_Update+0xa4>
20000e40:	24020001 	li	v0,1
			Left_motor_speed_G = CRAWL_SPEED;

			break;
		case Bd:
		case Lf:
			Left_motor_direction_G = Reverse;
20000e44:	08000395 	j	20000e54 <Motor_Left_Update+0x98>
20000e48:	af820090 	sw	v0,144(gp)
20000e4c:	24020002 	li	v0,2
20000e50:	af820090 	sw	v0,144(gp)
			Left_motor_speed_G = CRAWL_SPEED;
20000e54:	2402000c 	li	v0,12

			break;
20000e58:	0800039f 	j	20000e7c <Motor_Left_Update+0xc0>
20000e5c:	a78200ac 	sh	v0,172(gp)
		case Stp:
		default:
			Left_motor_speed_G = 0;
20000e60:	0800039f 	j	20000e7c <Motor_Left_Update+0xc0>
20000e64:	a78000ac 	sh	zero,172(gp)
			break;
		}
	}
	else
	{
		Left_motor_direction_G = Off;
20000e68:	af800090 	sw	zero,144(gp)
		Left_motor_speed_G = 0;
20000e6c:	a78000ac 	sh	zero,172(gp)
		Motor_Lf_Enc_Track = 0;
20000e70:	af80003c 	sw	zero,60(gp)
		Enc_Lf_Diff = 0;
20000e74:	af800148 	sw	zero,328(gp)
		Enc_Lf_Old = 0;
20000e78:	af80014c 	sw	zero,332(gp)
	}

	visualsLf();
20000e7c:	08000326 	j	20000c98 <visualsLf>
20000e80:	00000000 	nop

20000e84 <Motor_Left_Init>:
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
20000e84:	3c038000 	lui	v1,0x8000
20000e88:	34620200 	ori	v0,v1,0x200
20000e8c:	8c440004 	lw	a0,4(v0)
20000e90:	2405fff7 	li	a1,-9
20000e94:	00852024 	and	a0,a0,a1
20000e98:	ac440004 	sw	a0,4(v0)
20000e9c:	8c440004 	lw	a0,4(v0)
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000ea0:	2406fffb 	li	a2,-5
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
20000ea4:	34840008 	ori	a0,a0,0x8
20000ea8:	ac440004 	sw	a0,4(v0)
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000eac:	8c440000 	lw	a0,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20000eb0:	34630500 	ori	v1,v1,0x500
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000eb4:	00852024 	and	a0,a0,a1
20000eb8:	ac440000 	sw	a0,0(v0)
20000ebc:	8c470000 	lw	a3,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);

	Segment_Enable(displayC);
20000ec0:	8f84ffec 	lw	a0,-20(gp)
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000ec4:	ac470000 	sw	a3,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000ec8:	8c470004 	lw	a3,4(v0)
/**
 * Initialisation for the Motor_Left package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
20000ecc:	27bdffe8 	addiu	sp,sp,-24
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000ed0:	00e63824 	and	a3,a3,a2
20000ed4:	ac470004 	sw	a3,4(v0)
20000ed8:	8c470004 	lw	a3,4(v0)
/**
 * Initialisation for the Motor_Left package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
20000edc:	afbf0014 	sw	ra,20(sp)
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
20000ee0:	34e70004 	ori	a3,a3,0x4
20000ee4:	ac470004 	sw	a3,4(v0)
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000ee8:	8c470000 	lw	a3,0(v0)
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;
20000eec:	af80003c 	sw	zero,60(gp)

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000ef0:	00e63024 	and	a2,a3,a2
20000ef4:	ac460000 	sw	a2,0(v0)
20000ef8:	8c460000 	lw	a2,0(v0)
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
20000efc:	af800090 	sw	zero,144(gp)
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000f00:	ac460000 	sw	a2,0(v0)
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20000f04:	8c620004 	lw	v0,4(v1)
 */
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
20000f08:	a78000ac 	sh	zero,172(gp)

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20000f0c:	00452824 	and	a1,v0,a1
20000f10:	ac650004 	sw	a1,4(v1)
20000f14:	8c620004 	lw	v0,4(v1)
20000f18:	00000000 	nop
20000f1c:	ac620004 	sw	v0,4(v1)

	Segment_Enable(displayC);
20000f20:	0c000b25 	jal	20002c94 <Segment_Enable>
20000f24:	00000000 	nop
	Segment_Write(displayC, 0x0);
20000f28:	8f84ffec 	lw	a0,-20(gp)
20000f2c:	0c000af8 	jal	20002be0 <Segment_Write>
20000f30:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayC);
20000f34:	8f84ffec 	lw	a0,-20(gp)
20000f38:	0c000aad 	jal	20002ab4 <Segment_Clear_Decimal>
20000f3c:	00000000 	nop
	Segment_Enable(displayD);
20000f40:	8f84fff0 	lw	a0,-16(gp)
20000f44:	0c000b25 	jal	20002c94 <Segment_Enable>
20000f48:	00000000 	nop
	Segment_Write(displayD, 0x0);
20000f4c:	8f84fff0 	lw	a0,-16(gp)
20000f50:	0c000af8 	jal	20002be0 <Segment_Write>
20000f54:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayD);
20000f58:	8f84fff0 	lw	a0,-16(gp)
}
20000f5c:	8fbf0014 	lw	ra,20(sp)
	Segment_Enable(displayC);
	Segment_Write(displayC, 0x0);
	Segment_Clear_Decimal(displayC);
	Segment_Enable(displayD);
	Segment_Write(displayD, 0x0);
	Segment_Clear_Decimal(displayD);
20000f60:	08000aad 	j	20002ab4 <Segment_Clear_Decimal>
20000f64:	27bd0018 	addiu	sp,sp,24

20000f68 <spi_receive_CAN>:
	uint32_t Byte_counter, length;// displayID;

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
20000f68:	3c028000 	lui	v0,0x8000
20000f6c:	34420600 	ori	v0,v0,0x600
20000f70:	8c460000 	lw	a2,0(v0)
20000f74:	2403ffbf 	li	v1,-65
20000f78:	00c31824 	and	v1,a2,v1
20000f7c:	ac430000 	sw	v1,0(v0)
20000f80:	8c430000 	lw	v1,0(v0)
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
20000f84:	27bdffe0 	addiu	sp,sp,-32

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20000f88:	308400ff 	andi	a0,a0,0xff
	uint32_t Byte_counter, length;// displayID;

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
20000f8c:	ac430000 	sw	v1,0(v0)
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
20000f90:	afb20018 	sw	s2,24(sp)
20000f94:	00a09021 	move	s2,a1

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20000f98:	00802821 	move	a1,a0
20000f9c:	00002021 	move	a0,zero
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
20000fa0:	afbf001c 	sw	ra,28(sp)
20000fa4:	afb10014 	sw	s1,20(sp)
20000fa8:	afb00010 	sw	s0,16(sp)

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20000fac:	0c000a99 	jal	20002a64 <SPI_Swap>
20000fb0:	af800174 	sw	zero,372(gp)

	/* Burn 5 Bytes: EXT_ID and Length */
	SPI_Swap(SPI0, 0xFF);
20000fb4:	00002021 	move	a0,zero
20000fb8:	0c000a99 	jal	20002a64 <SPI_Swap>
20000fbc:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20000fc0:	00002021 	move	a0,zero
20000fc4:	0c000a99 	jal	20002a64 <SPI_Swap>
20000fc8:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20000fcc:	00002021 	move	a0,zero
20000fd0:	0c000a99 	jal	20002a64 <SPI_Swap>
20000fd4:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20000fd8:	00002021 	move	a0,zero
20000fdc:	0c000a99 	jal	20002a64 <SPI_Swap>
20000fe0:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
20000fe4:	00002021 	move	a0,zero
20000fe8:	0c000a99 	jal	20002a64 <SPI_Swap>
20000fec:	240500ff 	li	a1,255
20000ff0:	00008021 	move	s0,zero

	/* Known length */
	length = 8;

	/* Extract the CAN data and insert into the Receive Buffer */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20000ff4:	24110008 	li	s1,8
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
20000ff8:	00002021 	move	a0,zero
20000ffc:	0c000a99 	jal	20002a64 <SPI_Swap>
20001000:	240500ff 	li	a1,255
20001004:	02501821 	addu	v1,s2,s0

	/* Known length */
	length = 8;

	/* Extract the CAN data and insert into the Receive Buffer */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001008:	26100001 	addiu	s0,s0,1
2000100c:	1611fffa 	bne	s0,s1,20000ff8 <spi_receive_CAN+0x90>
20001010:	a0620008 	sb	v0,8(v1)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001014:	3c028000 	lui	v0,0x8000
20001018:	34420600 	ori	v0,v0,0x600
2000101c:	8c430000 	lw	v1,0(v0)
}
20001020:	8fbf001c 	lw	ra,28(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001024:	ac430000 	sw	v1,0(v0)
20001028:	8c430000 	lw	v1,0(v0)
}
2000102c:	8fb20018 	lw	s2,24(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001030:	34630040 	ori	v1,v1,0x40
}
20001034:	8fb10014 	lw	s1,20(sp)
20001038:	8fb00010 	lw	s0,16(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
2000103c:	ac430000 	sw	v1,0(v0)
}
20001040:	03e00008 	jr	ra
20001044:	27bd0020 	addiu	sp,sp,32

20001048 <spi_buffer_CAN>:

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
20001048:	3c020003 	lui	v0,0x3

	/* Mask 4 bytes of CAN ID */
	MaskedID = CAN_ID & 0xFFFFFFFF;

	/* Separate Standard ID portion and shift for extra 3 bits */
	SID = MaskedID & 0x1FFC0000;
2000104c:	3c031ffc 	lui	v1,0x1ffc

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
20001050:	3442ffff 	ori	v0,v0,0xffff
20001054:	00821024 	and	v0,a0,v0

	/* Mask 4 bytes of CAN ID */
	MaskedID = CAN_ID & 0xFFFFFFFF;

	/* Separate Standard ID portion and shift for extra 3 bits */
	SID = MaskedID & 0x1FFC0000;
20001058:	00832024 	and	a0,a0,v1

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
2000105c:	3c030008 	lui	v1,0x8
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
20001060:	27bdffd8 	addiu	sp,sp,-40

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
20001064:	00431025 	or	v0,v0,v1
20001068:	000420c0 	sll	a0,a0,0x3
2000106c:	00442025 	or	a0,v0,a0
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
20001070:	afb10018 	sw	s1,24(sp)
20001074:	30b100ff 	andi	s1,a1,0xff
20001078:	afb00014 	sw	s0,20(sp)
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
2000107c:	00041e02 	srl	v1,a0,0x18
		PAD_ID >>= 8;
20001080:	00043a02 	srl	a3,a0,0x8
20001084:	00042c02 	srl	a1,a0,0x10
	}

	/* add data length to byte array */
	ID_Array[4] = (DL & 0x0F);
20001088:	3222000f 	andi	v0,s1,0xf
2000108c:	27900158 	addiu	s0,gp,344
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
20001090:	afb30020 	sw	s3,32(sp)
20001094:	afb2001c 	sw	s2,28(sp)
20001098:	afbf0024 	sw	ra,36(sp)
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
2000109c:	a387015a 	sb	a3,346(gp)
200010a0:	a3850159 	sb	a1,345(gp)
200010a4:	a3830158 	sb	v1,344(gp)
		PAD_ID >>= 8;
	}

	/* add data length to byte array */
	ID_Array[4] = (DL & 0x0F);
200010a8:	a382015c 	sb	v0,348(gp)
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
200010ac:	00c09021 	move	s2,a2
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
200010b0:	a384015b 	sb	a0,347(gp)
 * Send CAN message into SPI buffer
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
200010b4:	26130005 	addiu	s3,s0,5
	build_EXT_ID_bytes(EXT_ID, EXT_ID_Bytes, length);

	/* Send padded CAN ID */
	for (Byte_counter = 0; Byte_counter < 5; Byte_counter++)
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
200010b8:	92050000 	lbu	a1,0(s0)
200010bc:	00002021 	move	a0,zero
200010c0:	0c000a99 	jal	20002a64 <SPI_Swap>
200010c4:	26100001 	addiu	s0,s0,1

	/* Pad ID with LOAD_TX0_INS info (see MCP2515 datasheet) */
	build_EXT_ID_bytes(EXT_ID, EXT_ID_Bytes, length);

	/* Send padded CAN ID */
	for (Byte_counter = 0; Byte_counter < 5; Byte_counter++)
200010c8:	1613fffb 	bne	s0,s3,200010b8 <spi_buffer_CAN+0x70>
200010cc:	00000000 	nop
200010d0:	08000439 	j	200010e4 <spi_buffer_CAN+0x9c>
200010d4:	00008021 	move	s0,zero
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
200010d8:	90650000 	lbu	a1,0(v1)
200010dc:	0c000a99 	jal	20002a64 <SPI_Swap>
200010e0:	26100001 	addiu	s0,s0,1
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
200010e4:	0211102b 	sltu	v0,s0,s1
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
200010e8:	02501821 	addu	v1,s2,s0
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
200010ec:	1440fffa 	bnez	v0,200010d8 <spi_buffer_CAN+0x90>
200010f0:	00002021 	move	a0,zero
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
	}
}
200010f4:	8fbf0024 	lw	ra,36(sp)
200010f8:	8fb30020 	lw	s3,32(sp)
200010fc:	8fb2001c 	lw	s2,28(sp)
20001100:	8fb10018 	lw	s1,24(sp)
20001104:	8fb00014 	lw	s0,20(sp)
20001108:	03e00008 	jr	ra
2000110c:	27bd0028 	addiu	sp,sp,40

20001110 <Message_Sender_Update>:
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
	/* Test values */
	ticked++;
20001110:	97830180 	lhu	v1,384(gp)
	if(ticked % 4000 == 0)
20001114:	24020fa0 	li	v0,4000
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
	/* Test values */
	ticked++;
20001118:	24630001 	addiu	v1,v1,1
2000111c:	3063ffff 	andi	v1,v1,0xffff
	if(ticked % 4000 == 0)
20001120:	14400002 	bnez	v0,2000112c <Message_Sender_Update+0x1c>
20001124:	0062001b 	divu	zero,v1,v0
20001128:	0007000d 	break	0x7

/**
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
2000112c:	27bdffe0 	addiu	sp,sp,-32
20001130:	afbf001c 	sw	ra,28(sp)
20001134:	afb10018 	sw	s1,24(sp)
20001138:	afb00014 	sw	s0,20(sp)
	/* Test values */
	ticked++;
	if(ticked % 4000 == 0)
2000113c:	00002010 	mfhi	a0
20001140:	14800003 	bnez	a0,20001150 <Message_Sender_Update+0x40>
20001144:	a7830180 	sh	v1,384(gp)
	{
		servo[0] = 0x20;
20001148:	0800045b 	j	2000116c <Message_Sender_Update+0x5c>
2000114c:	24020020 	li	v0,32
		servo[1] = 0x20;
	}
	else if ((ticked + 2000) % 4000 == 0)
20001150:	246307d0 	addiu	v1,v1,2000
20001154:	14400002 	bnez	v0,20001160 <Message_Sender_Update+0x50>
20001158:	0062001a 	div	zero,v1,v0
2000115c:	0007000d 	break	0x7
20001160:	00001010 	mfhi	v0
20001164:	14400003 	bnez	v0,20001174 <Message_Sender_Update+0x64>
20001168:	2402ffa0 	li	v0,-96
	{
		servo[0] = 0xA0;
		servo[1] = 0xA0;
2000116c:	a38200a5 	sb	v0,165(gp)
		servo[0] = 0x20;
		servo[1] = 0x20;
	}
	else if ((ticked + 2000) % 4000 == 0)
	{
		servo[0] = 0xA0;
20001170:	a38200a4 	sb	v0,164(gp)
		servo[1] = 0xA0;
	}

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
20001174:	8f820160 	lw	v0,352(gp)
20001178:	00000000 	nop
2000117c:	1440011e 	bnez	v0,200015f8 <Message_Sender_Update+0x4e8>
20001180:	3c108000 	lui	s0,0x8000
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001184:	36100600 	ori	s0,s0,0x600
20001188:	8e020000 	lw	v0,0(s0)
2000118c:	2411ffbf 	li	s1,-65
20001190:	00511024 	and	v0,v0,s1
20001194:	ae020000 	sw	v0,0(s0)
20001198:	8e020000 	lw	v0,0(s0)
		SPI_Swap(SPI0, 0xC0);
2000119c:	00002021 	move	a0,zero
200011a0:	240500c0 	li	a1,192

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
200011a4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0xC0);
200011a8:	0c000a99 	jal	20002a64 <SPI_Swap>
200011ac:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
200011b0:	8e020000 	lw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200011b4:	00002021 	move	a0,zero
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0xC0);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200011b8:	ae020000 	sw	v0,0(s0)
200011bc:	8e020000 	lw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200011c0:	24050002 	li	a1,2
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0xC0);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200011c4:	34420040 	ori	v0,v0,0x40
200011c8:	ae020000 	sw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
200011cc:	8e020000 	lw	v0,0(s0)
200011d0:	00000000 	nop
200011d4:	00511024 	and	v0,v0,s1
200011d8:	ae020000 	sw	v0,0(s0)
200011dc:	8e020000 	lw	v0,0(s0)
200011e0:	00000000 	nop
200011e4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200011e8:	0c000a99 	jal	20002a64 <SPI_Swap>
200011ec:	00000000 	nop
		SPI_Swap(SPI0, 0x0F);
200011f0:	00002021 	move	a0,zero
200011f4:	0c000a99 	jal	20002a64 <SPI_Swap>
200011f8:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0x80);
200011fc:	00002021 	move	a0,zero
20001200:	0c000a99 	jal	20002a64 <SPI_Swap>
20001204:	24050080 	li	a1,128
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001208:	8e020000 	lw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
2000120c:	00002021 	move	a0,zero
		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x80);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001210:	ae020000 	sw	v0,0(s0)
20001214:	8e020000 	lw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
20001218:	24050003 	li	a1,3
		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x80);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000121c:	34420040 	ori	v0,v0,0x40
20001220:	ae020000 	sw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001224:	8e020000 	lw	v0,0(s0)
20001228:	00000000 	nop
2000122c:	00511024 	and	v0,v0,s1
20001230:	ae020000 	sw	v0,0(s0)
20001234:	8e020000 	lw	v0,0(s0)
20001238:	00000000 	nop
2000123c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x03);
20001240:	0c000a99 	jal	20002a64 <SPI_Swap>
20001244:	00000000 	nop
		SPI_Swap(SPI0, 0x0E);
20001248:	00002021 	move	a0,zero
2000124c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001250:	2405000e 	li	a1,14
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001254:	8e020000 	lw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001258:	00002021 	move	a0,zero

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x0E);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000125c:	ae020000 	sw	v0,0(s0)
20001260:	8e020000 	lw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001264:	24050002 	li	a1,2

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x0E);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001268:	34420040 	ori	v0,v0,0x40
2000126c:	ae020000 	sw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001270:	8e020000 	lw	v0,0(s0)
20001274:	00000000 	nop
20001278:	00511024 	and	v0,v0,s1
2000127c:	ae020000 	sw	v0,0(s0)
20001280:	8e020000 	lw	v0,0(s0)
20001284:	00000000 	nop
20001288:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
2000128c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001290:	00000000 	nop
		SPI_Swap(SPI0, 0x28);
20001294:	00002021 	move	a0,zero
20001298:	0c000a99 	jal	20002a64 <SPI_Swap>
2000129c:	24050028 	li	a1,40
		SPI_Swap(SPI0, 0x02);
200012a0:	00002021 	move	a0,zero
200012a4:	0c000a99 	jal	20002a64 <SPI_Swap>
200012a8:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x90);
200012ac:	00002021 	move	a0,zero
200012b0:	0c000a99 	jal	20002a64 <SPI_Swap>
200012b4:	24050090 	li	a1,144
		SPI_Swap(SPI0, 0x03);
200012b8:	00002021 	move	a0,zero
200012bc:	0c000a99 	jal	20002a64 <SPI_Swap>
200012c0:	24050003 	li	a1,3
		SPI_Swap(SPI0, 0x00);
200012c4:	00002021 	move	a0,zero
200012c8:	0c000a99 	jal	20002a64 <SPI_Swap>
200012cc:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
200012d0:	8e020000 	lw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
200012d4:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x28);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x90);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200012d8:	ae020000 	sw	v0,0(s0)
200012dc:	8e020000 	lw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
200012e0:	24050003 	li	a1,3
		SPI_Swap(SPI0, 0x28);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x90);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200012e4:	34420040 	ori	v0,v0,0x40
200012e8:	ae020000 	sw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
200012ec:	8e020000 	lw	v0,0(s0)
200012f0:	00000000 	nop
200012f4:	00511024 	and	v0,v0,s1
200012f8:	ae020000 	sw	v0,0(s0)
200012fc:	8e020000 	lw	v0,0(s0)
20001300:	00000000 	nop
20001304:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x03);
20001308:	0c000a99 	jal	20002a64 <SPI_Swap>
2000130c:	00000000 	nop
		SPI_Swap(SPI0, 0x2A);
20001310:	00002021 	move	a0,zero
20001314:	0c000a99 	jal	20002a64 <SPI_Swap>
20001318:	2405002a 	li	a1,42
		speedPin = SPI_Swap(SPI0, 0xFF);
2000131c:	00002021 	move	a0,zero
20001320:	0c000a99 	jal	20002a64 <SPI_Swap>
20001324:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001328:	8e030000 	lw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000132c:	00002021 	move	a0,zero
		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001330:	ae030000 	sw	v1,0(s0)
20001334:	8e030000 	lw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001338:	24050002 	li	a1,2
		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000133c:	34630040 	ori	v1,v1,0x40
20001340:	ae030000 	sw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001344:	8e030000 	lw	v1,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
20001348:	a382015d 	sb	v0,349(gp)
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000134c:	00711824 	and	v1,v1,s1
20001350:	ae030000 	sw	v1,0(s0)
20001354:	8e020000 	lw	v0,0(s0)
20001358:	00000000 	nop
2000135c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001360:	0c000a99 	jal	20002a64 <SPI_Swap>
20001364:	00000000 	nop
		SPI_Swap(SPI0, 0x0C);
20001368:	00002021 	move	a0,zero
2000136c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001370:	2405000c 	li	a1,12
		SPI_Swap(SPI0, 0x00);
20001374:	00002021 	move	a0,zero
20001378:	0c000a99 	jal	20002a64 <SPI_Swap>
2000137c:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001380:	8e020000 	lw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001384:	00002021 	move	a0,zero
		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0C);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001388:	ae020000 	sw	v0,0(s0)
2000138c:	8e020000 	lw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001390:	24050002 	li	a1,2
		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0C);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001394:	34420040 	ori	v0,v0,0x40
20001398:	ae020000 	sw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000139c:	8e020000 	lw	v0,0(s0)
200013a0:	00000000 	nop
200013a4:	00511024 	and	v0,v0,s1
200013a8:	ae020000 	sw	v0,0(s0)
200013ac:	8e020000 	lw	v0,0(s0)
200013b0:	00000000 	nop
200013b4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200013b8:	0c000a99 	jal	20002a64 <SPI_Swap>
200013bc:	00000000 	nop
		SPI_Swap(SPI0, 0x0D);
200013c0:	00002021 	move	a0,zero
200013c4:	0c000a99 	jal	20002a64 <SPI_Swap>
200013c8:	2405000d 	li	a1,13
		SPI_Swap(SPI0, 0x00);
200013cc:	00002021 	move	a0,zero
200013d0:	0c000a99 	jal	20002a64 <SPI_Swap>
200013d4:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013d8:	8e020000 	lw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200013dc:	00002021 	move	a0,zero
		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0D);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013e0:	ae020000 	sw	v0,0(s0)
200013e4:	8e020000 	lw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200013e8:	24050002 	li	a1,2
		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0D);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013ec:	34420040 	ori	v0,v0,0x40
200013f0:	ae020000 	sw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
200013f4:	8e020000 	lw	v0,0(s0)
200013f8:	00000000 	nop
200013fc:	00511024 	and	v0,v0,s1
20001400:	ae020000 	sw	v0,0(s0)
20001404:	8e020000 	lw	v0,0(s0)
20001408:	00000000 	nop
2000140c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001410:	0c000a99 	jal	20002a64 <SPI_Swap>
20001414:	00000000 	nop
		SPI_Swap(SPI0, 0x60);
20001418:	00002021 	move	a0,zero
2000141c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001420:	24050060 	li	a1,96
		SPI_Swap(SPI0, 0x60);
20001424:	00002021 	move	a0,zero
20001428:	0c000a99 	jal	20002a64 <SPI_Swap>
2000142c:	24050060 	li	a1,96
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001430:	8e020000 	lw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001434:	00002021 	move	a0,zero
		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x60);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001438:	ae020000 	sw	v0,0(s0)
2000143c:	8e020000 	lw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001440:	24050002 	li	a1,2
		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x60);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001444:	34420040 	ori	v0,v0,0x40
20001448:	ae020000 	sw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000144c:	8e020000 	lw	v0,0(s0)
20001450:	00000000 	nop
20001454:	00511024 	and	v0,v0,s1
20001458:	ae020000 	sw	v0,0(s0)
2000145c:	8e020000 	lw	v0,0(s0)
20001460:	00000000 	nop
20001464:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001468:	0c000a99 	jal	20002a64 <SPI_Swap>
2000146c:	00000000 	nop
		SPI_Swap(SPI0, 0x70);
20001470:	00002021 	move	a0,zero
20001474:	0c000a99 	jal	20002a64 <SPI_Swap>
20001478:	24050070 	li	a1,112
		SPI_Swap(SPI0, 0x60);
2000147c:	00002021 	move	a0,zero
20001480:	0c000a99 	jal	20002a64 <SPI_Swap>
20001484:	24050060 	li	a1,96
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001488:	8e020000 	lw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000148c:	00002021 	move	a0,zero
		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x70);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001490:	ae020000 	sw	v0,0(s0)
20001494:	8e020000 	lw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001498:	24050002 	li	a1,2
		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x70);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000149c:	34420040 	ori	v0,v0,0x40
200014a0:	ae020000 	sw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
200014a4:	8e020000 	lw	v0,0(s0)
200014a8:	00000000 	nop
200014ac:	00511024 	and	v0,v0,s1
200014b0:	ae020000 	sw	v0,0(s0)
200014b4:	8e020000 	lw	v0,0(s0)
200014b8:	00000000 	nop
200014bc:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200014c0:	0c000a99 	jal	20002a64 <SPI_Swap>
200014c4:	00000000 	nop
		SPI_Swap(SPI0, 0x08);
200014c8:	00002021 	move	a0,zero
200014cc:	0c000a99 	jal	20002a64 <SPI_Swap>
200014d0:	24050008 	li	a1,8
		SPI_Swap(SPI0, 0x3F);
200014d4:	00002021 	move	a0,zero
200014d8:	0c000a99 	jal	20002a64 <SPI_Swap>
200014dc:	2405003f 	li	a1,63
		SPI_Swap(SPI0, 0x0F);
200014e0:	00002021 	move	a0,zero
200014e4:	0c000a99 	jal	20002a64 <SPI_Swap>
200014e8:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0xFF);
200014ec:	00002021 	move	a0,zero
200014f0:	0c000a99 	jal	20002a64 <SPI_Swap>
200014f4:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
200014f8:	00002021 	move	a0,zero
200014fc:	0c000a99 	jal	20002a64 <SPI_Swap>
20001500:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001504:	8e020000 	lw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001508:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x08);
		SPI_Swap(SPI0, 0x3F);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000150c:	ae020000 	sw	v0,0(s0)
20001510:	8e020000 	lw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001514:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x08);
		SPI_Swap(SPI0, 0x3F);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001518:	34420040 	ori	v0,v0,0x40
2000151c:	ae020000 	sw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001520:	8e020000 	lw	v0,0(s0)
20001524:	00000000 	nop
20001528:	00511024 	and	v0,v0,s1
2000152c:	ae020000 	sw	v0,0(s0)
20001530:	8e020000 	lw	v0,0(s0)
20001534:	00000000 	nop
20001538:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
2000153c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001540:	00000000 	nop
		SPI_Swap(SPI0, 0x24);
20001544:	00002021 	move	a0,zero
20001548:	0c000a99 	jal	20002a64 <SPI_Swap>
2000154c:	24050024 	li	a1,36
		SPI_Swap(SPI0, 0xFF);
20001550:	00002021 	move	a0,zero
20001554:	0c000a99 	jal	20002a64 <SPI_Swap>
20001558:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
2000155c:	00002021 	move	a0,zero
20001560:	0c000a99 	jal	20002a64 <SPI_Swap>
20001564:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
20001568:	00002021 	move	a0,zero
2000156c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001570:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
20001574:	00002021 	move	a0,zero
20001578:	0c000a99 	jal	20002a64 <SPI_Swap>
2000157c:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001580:	8e020000 	lw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001584:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x24);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001588:	ae020000 	sw	v0,0(s0)
2000158c:	8e020000 	lw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001590:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x24);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001594:	34420040 	ori	v0,v0,0x40
20001598:	ae020000 	sw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000159c:	8e020000 	lw	v0,0(s0)
200015a0:	00000000 	nop
200015a4:	00518824 	and	s1,v0,s1
200015a8:	ae110000 	sw	s1,0(s0)
200015ac:	8e020000 	lw	v0,0(s0)
200015b0:	00000000 	nop
200015b4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200015b8:	0c000a99 	jal	20002a64 <SPI_Swap>
200015bc:	00000000 	nop
		SPI_Swap(SPI0, 0x0F);
200015c0:	00002021 	move	a0,zero
200015c4:	0c000a99 	jal	20002a64 <SPI_Swap>
200015c8:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0x00);
200015cc:	00002021 	move	a0,zero
200015d0:	0c000a99 	jal	20002a64 <SPI_Swap>
200015d4:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015d8:	8e020000 	lw	v0,0(s0)

		init = True;
200015dc:	24030001 	li	v1,1
		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015e0:	ae020000 	sw	v0,0(s0)
200015e4:	8e020000 	lw	v0,0(s0)

		init = True;
200015e8:	af830160 	sw	v1,352(gp)
		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015ec:	34420040 	ori	v0,v0,0x40
200015f0:	ae020000 	sw	v0,0(s0)
	/* Transmit "proper" CAN messages only when the Mode is GO */
	//if(System_Mode_G == Go || System_Mode_G == Game_Over)
	{
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
200015f4:	3c108000 	lui	s0,0x8000
200015f8:	36100600 	ori	s0,s0,0x600
200015fc:	8e020000 	lw	v0,0(s0)
20001600:	2411ffbf 	li	s1,-65
20001604:	00511024 	and	v0,v0,s1
20001608:	ae020000 	sw	v0,0(s0)
2000160c:	8e020000 	lw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX0_INS);
20001610:	00002021 	move	a0,zero
20001614:	24050040 	li	a1,64
	/* Transmit "proper" CAN messages only when the Mode is GO */
	//if(System_Mode_G == Go || System_Mode_G == Game_Over)
	{
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001618:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX0_INS);
2000161c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001620:	00000000 	nop
		spi_buffer_CAN(canIDLf, 8, candataLf);
20001624:	8f8400e4 	lw	a0,228(gp)
20001628:	27860068 	addiu	a2,gp,104
2000162c:	0c000412 	jal	20001048 <spi_buffer_CAN>
20001630:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001634:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
20001638:	00002021 	move	a0,zero
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX0_INS);
		spi_buffer_CAN(canIDLf, 8, candataLf);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000163c:	ae020000 	sw	v0,0(s0)
20001640:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
20001644:	24050042 	li	a1,66
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX0_INS);
		spi_buffer_CAN(canIDLf, 8, candataLf);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001648:	34420040 	ori	v0,v0,0x40
2000164c:	ae020000 	sw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001650:	8e020000 	lw	v0,0(s0)
20001654:	00000000 	nop
20001658:	00511024 	and	v0,v0,s1
2000165c:	ae020000 	sw	v0,0(s0)
20001660:	8e020000 	lw	v0,0(s0)
20001664:	00000000 	nop
20001668:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX1_INS);
2000166c:	0c000a99 	jal	20002a64 <SPI_Swap>
20001670:	00000000 	nop
		spi_buffer_CAN(canIDRt, 8, candataRt);
20001674:	8f840064 	lw	a0,100(gp)
20001678:	27860094 	addiu	a2,gp,148
2000167c:	0c000412 	jal	20001048 <spi_buffer_CAN>
20001680:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001684:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001688:	00002021 	move	a0,zero

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
		spi_buffer_CAN(canIDRt, 8, candataRt);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000168c:	ae020000 	sw	v0,0(s0)
20001690:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001694:	24050044 	li	a1,68

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
		spi_buffer_CAN(canIDRt, 8, candataRt);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001698:	34420040 	ori	v0,v0,0x40
2000169c:	ae020000 	sw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
200016a0:	8e020000 	lw	v0,0(s0)
200016a4:	00000000 	nop
200016a8:	00511024 	and	v0,v0,s1
200016ac:	ae020000 	sw	v0,0(s0)
200016b0:	8e020000 	lw	v0,0(s0)
200016b4:	00000000 	nop
200016b8:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX2_INS);
200016bc:	0c000a99 	jal	20002a64 <SPI_Swap>
200016c0:	00000000 	nop
		spi_buffer_CAN(0x05A5EEEE, 8, servo);
200016c4:	3c0405a5 	lui	a0,0x5a5
200016c8:	278600a4 	addiu	a2,gp,164
200016cc:	3484eeee 	ori	a0,a0,0xeeee
200016d0:	0c000412 	jal	20001048 <spi_buffer_CAN>
200016d4:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016d8:	8e020000 	lw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
200016dc:	00002021 	move	a0,zero

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
		spi_buffer_CAN(0x05A5EEEE, 8, servo);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016e0:	ae020000 	sw	v0,0(s0)
200016e4:	8e020000 	lw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
200016e8:	24050081 	li	a1,129

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
		spi_buffer_CAN(0x05A5EEEE, 8, servo);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016ec:	34420040 	ori	v0,v0,0x40
200016f0:	ae020000 	sw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
200016f4:	8e020000 	lw	v0,0(s0)
200016f8:	00000000 	nop
200016fc:	00511024 	and	v0,v0,s1
20001700:	ae020000 	sw	v0,0(s0)
20001704:	8e020000 	lw	v0,0(s0)
20001708:	00000000 	nop
2000170c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX0_INS);
20001710:	0c000a99 	jal	20002a64 <SPI_Swap>
20001714:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001718:	8e020000 	lw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
2000171c:	00002021 	move	a0,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001720:	ae020000 	sw	v0,0(s0)
20001724:	8e020000 	lw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
20001728:	24050082 	li	a1,130
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000172c:	34420040 	ori	v0,v0,0x40
20001730:	ae020000 	sw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001734:	8e020000 	lw	v0,0(s0)
20001738:	00000000 	nop
2000173c:	00511024 	and	v0,v0,s1
20001740:	ae020000 	sw	v0,0(s0)
20001744:	8e020000 	lw	v0,0(s0)
20001748:	00000000 	nop
2000174c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX1_INS);
20001750:	0c000a99 	jal	20002a64 <SPI_Swap>
20001754:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001758:	8e020000 	lw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
2000175c:	00002021 	move	a0,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001760:	ae020000 	sw	v0,0(s0)
20001764:	8e020000 	lw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
20001768:	24050084 	li	a1,132
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000176c:	34420040 	ori	v0,v0,0x40
20001770:	ae020000 	sw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001774:	8e020000 	lw	v0,0(s0)
20001778:	00000000 	nop
2000177c:	00518824 	and	s1,v0,s1
20001780:	ae110000 	sw	s1,0(s0)
20001784:	8e020000 	lw	v0,0(s0)
20001788:	00000000 	nop
2000178c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX2_INS);
20001790:	0c000a99 	jal	20002a64 <SPI_Swap>
20001794:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001798:	8e020000 	lw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
2000179c:	3c054000 	lui	a1,0x4000
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017a0:	ae020000 	sw	v0,0(s0)
200017a4:	8e020000 	lw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
	}

}
200017a8:	8fbf001c 	lw	ra,28(sp)
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017ac:	34420040 	ori	v0,v0,0x40
200017b0:	ae020000 	sw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
	}

}
200017b4:	8fb10018 	lw	s1,24(sp)
200017b8:	8fb00014 	lw	s0,20(sp)
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
200017bc:	24a503ac 	addiu	a1,a1,940
200017c0:	24040090 	li	a0,144
200017c4:	080003da 	j	20000f68 <spi_receive_CAN>
200017c8:	27bd0020 	addiu	sp,sp,32

200017cc <Message_Sender_Init>:
/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
{
200017cc:	27bdffe8 	addiu	sp,sp,-24
	/* Task initialisation */
	// SPI  0
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);
200017d0:	00002021 	move	a0,zero
200017d4:	00002821 	move	a1,zero
/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
{
200017d8:	afbf0014 	sw	ra,20(sp)
	/* Task initialisation */
	// SPI  0
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);
200017dc:	0c000a8c 	jal	20002a30 <SPI_Init>
200017e0:	24060005 	li	a2,5
	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
200017e4:	3c028000 	lui	v0,0x8000
200017e8:	34420600 	ori	v0,v0,0x600
200017ec:	8c440004 	lw	a0,4(v0)
200017f0:	2403ffbf 	li	v1,-65
200017f4:	00831824 	and	v1,a0,v1
200017f8:	ac430004 	sw	v1,4(v0)
200017fc:	8c430004 	lw	v1,4(v0)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
20001800:	24040001 	li	a0,1
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
20001804:	34630040 	ori	v1,v1,0x40
20001808:	ac430004 	sw	v1,4(v0)
	GPIO_Write(CS_PIN, GPIO_HIGH);
2000180c:	8c430000 	lw	v1,0(v0)
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;
20001810:	3c064000 	lui	a2,0x4000

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);
20001814:	ac430000 	sw	v1,0(v0)
20001818:	8c430000 	lw	v1,0(v0)
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;
2000181c:	acc403bc 	sw	a0,956(a2)

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);
20001820:	34630040 	ori	v1,v1,0x40
20001824:	ac430000 	sw	v1,0(v0)

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
20001828:	8c450004 	lw	a1,4(v0)
2000182c:	2403fffb 	li	v1,-5
20001830:	00a31824 	and	v1,a1,v1
20001834:	ac430004 	sw	v1,4(v0)
20001838:	8c430004 	lw	v1,4(v0)
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;
2000183c:	af800160 	sw	zero,352(gp)
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
20001840:	34630004 	ori	v1,v1,0x4
20001844:	ac430004 	sw	v1,4(v0)
	GPIO_Write(RST_PIN, GPIO_HIGH);
20001848:	8c450000 	lw	a1,0(v0)

	init = False;
2000184c:	278300a4 	addiu	v1,gp,164

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);
20001850:	ac450000 	sw	a1,0(v0)
20001854:	8c450000 	lw	a1,0(v0)
20001858:	00000000 	nop
2000185c:	34a50004 	ori	a1,a1,0x4
20001860:	ac450000 	sw	a1,0(v0)
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;
20001864:	24020033 	li	v0,51
20001868:	a382015d 	sb	v0,349(gp)

	bufferRX0.status = Used;
2000186c:	3c024000 	lui	v0,0x4000
20001870:	ac4403ac 	sw	a0,940(v0)

/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
20001874:	24620008 	addiu	v0,v1,8

	init = False;

	for(uint8_t i = 0; i < 8; i++)
	{
		servo[i] = 0x0;
20001878:	a0600000 	sb	zero,0(v1)
2000187c:	24630001 	addiu	v1,v1,1
	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;

	for(uint8_t i = 0; i < 8; i++)
20001880:	1462fffd 	bne	v1,v0,20001878 <Message_Sender_Init+0xac>
20001884:	00000000 	nop
	{
		servo[i] = 0x0;
	}

	ticked = 0;
}
20001888:	8fbf0014 	lw	ra,20(sp)
	for(uint8_t i = 0; i < 8; i++)
	{
		servo[i] = 0x0;
	}

	ticked = 0;
2000188c:	a7800180 	sh	zero,384(gp)
}
20001890:	03e00008 	jr	ra
20001894:	27bd0018 	addiu	sp,sp,24

20001898 <Flashing_LED_Init>:
/**
 * Initialises the GPIO pin and outputs the initial value to the LED.
 */
void Flashing_LED_Init(void)
{
	GPIO_Set_Direction(LED_Pin, GPIO_OUTPUT);
20001898:	3c028000 	lui	v0,0x8000
2000189c:	34420200 	ori	v0,v0,0x200
200018a0:	8c440004 	lw	a0,4(v0)
200018a4:	2403fdff 	li	v1,-513
200018a8:	00831824 	and	v1,a0,v1
200018ac:	ac430004 	sw	v1,4(v0)
200018b0:	8c440004 	lw	a0,4(v0)
	GPIO_Write(LED_Pin, led_state);
200018b4:	8f830000 	lw	v1,0(gp)
/**
 * Initialises the GPIO pin and outputs the initial value to the LED.
 */
void Flashing_LED_Init(void)
{
	GPIO_Set_Direction(LED_Pin, GPIO_OUTPUT);
200018b8:	34840200 	ori	a0,a0,0x200
200018bc:	ac440004 	sw	a0,4(v0)
	GPIO_Write(LED_Pin, led_state);
200018c0:	2c640001 	sltiu	a0,v1,1
200018c4:	8c450000 	lw	a1,0(v0)
200018c8:	00042240 	sll	a0,a0,0x9
200018cc:	00042027 	nor	a0,zero,a0
200018d0:	00852024 	and	a0,a0,a1
200018d4:	ac440000 	sw	a0,0(v0)
200018d8:	8c440000 	lw	a0,0(v0)
200018dc:	00031a40 	sll	v1,v1,0x9
200018e0:	00641825 	or	v1,v1,a0
200018e4:	ac430000 	sw	v1,0(v0)
}
200018e8:	03e00008 	jr	ra
200018ec:	00000000 	nop

200018f0 <Flashing_LED_Toggle>:
/**
 * Toggles the state of the GPIO pin and its LED.
 */
void Flashing_LED_Toggle(void)
{
	GPIO_Write(LED_Pin, led_state);
200018f0:	8f830000 	lw	v1,0(gp)
200018f4:	3c028000 	lui	v0,0x8000
200018f8:	34420200 	ori	v0,v0,0x200
200018fc:	2c640001 	sltiu	a0,v1,1
20001900:	8c460000 	lw	a2,0(v0)
20001904:	00042a40 	sll	a1,a0,0x9
20001908:	00052827 	nor	a1,zero,a1
2000190c:	00a62824 	and	a1,a1,a2
20001910:	ac450000 	sw	a1,0(v0)
20001914:	8c450000 	lw	a1,0(v0)
20001918:	00033240 	sll	a2,v1,0x9
2000191c:	00c52825 	or	a1,a2,a1
	if(System_Mode_G == Set)
20001920:	8f8600f4 	lw	a2,244(gp)
/**
 * Toggles the state of the GPIO pin and its LED.
 */
void Flashing_LED_Toggle(void)
{
	GPIO_Write(LED_Pin, led_state);
20001924:	ac450000 	sw	a1,0(v0)
	if(System_Mode_G == Set)
20001928:	24050001 	li	a1,1
2000192c:	14c5000a 	bne	a2,a1,20001958 <Flashing_LED_Toggle+0x68>
20001930:	00000000 	nop
	{
		GPIO_Write(Error_Lamp, led_state);
20001934:	8c450000 	lw	a1,0(v0)
20001938:	00042200 	sll	a0,a0,0x8
2000193c:	00042027 	nor	a0,zero,a0
20001940:	00852024 	and	a0,a0,a1
20001944:	ac440000 	sw	a0,0(v0)
20001948:	8c440000 	lw	a0,0(v0)
2000194c:	00032a00 	sll	a1,v1,0x8
20001950:	0800065b 	j	2000196c <Flashing_LED_Toggle+0x7c>
20001954:	00a42025 	or	a0,a1,a0
	}
	else
	{
		GPIO_Write(Error_Lamp, GPIO_LOW);
20001958:	8c450000 	lw	a1,0(v0)
2000195c:	2404feff 	li	a0,-257
20001960:	00a42024 	and	a0,a1,a0
20001964:	ac440000 	sw	a0,0(v0)
20001968:	8c440000 	lw	a0,0(v0)
	}
	led_state = !led_state;
2000196c:	2c630001 	sltiu	v1,v1,1
	{
		GPIO_Write(Error_Lamp, led_state);
	}
	else
	{
		GPIO_Write(Error_Lamp, GPIO_LOW);
20001970:	ac440000 	sw	a0,0(v0)
	}
	led_state = !led_state;
}
20001974:	03e00008 	jr	ra
20001978:	af830000 	sw	v1,0(gp)

2000197c <Course_Corrector_Init>:
 * This will be called from Tasks_Init by default.
 */
void Course_Corrector_Init(void)
{
	/* Initialisation of course correction values */
	Course_correction_Lf = False;
2000197c:	af800070 	sw	zero,112(gp)
	Course_correction_Rt = False;
}
20001980:	03e00008 	jr	ra
20001984:	af800060 	sw	zero,96(gp)

20001988 <Course_Corrector_Update>:
 * Basic implementation: To reduce the speed of the faster side.
 * Advanced requirement: To recalculate the Script to compensate for deviation.
 */
void Course_Corrector_Update(void)
{
	if(System_Mode_G == Go)
20001988:	8f8300f4 	lw	v1,244(gp)
2000198c:	24020002 	li	v0,2
20001990:	14620011 	bne	v1,v0,200019d8 <Course_Corrector_Update+0x50>
20001994:	00000000 	nop
	{
		/* Encoder monitor task */
		/* If the Left side is faster than the Right, activate the Left CC flag */
		if((Motor_Lf_Enc_Track - Motor_Rt_Enc_Track) > COURSE_CORRECTION_BUFFER)
20001998:	8f82003c 	lw	v0,60(gp)
2000199c:	8f8300d4 	lw	v1,212(gp)
200019a0:	00000000 	nop
200019a4:	00432023 	subu	a0,v0,v1
200019a8:	28840002 	slti	a0,a0,2
200019ac:	14800005 	bnez	a0,200019c4 <Course_Corrector_Update+0x3c>
200019b0:	00621023 	subu	v0,v1,v0
		{
			Course_correction_Lf = False;
			Course_correction_Rt = True;
200019b4:	24020001 	li	v0,1
200019b8:	af820060 	sw	v0,96(gp)
	{
		/* Encoder monitor task */
		/* If the Left side is faster than the Right, activate the Left CC flag */
		if((Motor_Lf_Enc_Track - Motor_Rt_Enc_Track) > COURSE_CORRECTION_BUFFER)
		{
			Course_correction_Lf = False;
200019bc:	03e00008 	jr	ra
200019c0:	af800070 	sw	zero,112(gp)
			Course_correction_Rt = True;
		}
		/* If the Right side is faster than the Left, activate the Right CC flag */
		else if((Motor_Rt_Enc_Track - Motor_Lf_Enc_Track) > COURSE_CORRECTION_BUFFER)
200019c4:	28420002 	slti	v0,v0,2
200019c8:	14400003 	bnez	v0,200019d8 <Course_Corrector_Update+0x50>
200019cc:	24020001 	li	v0,1
		{
			Course_correction_Lf = True;
200019d0:	08000677 	j	200019dc <Course_Corrector_Update+0x54>
200019d4:	af820070 	sw	v0,112(gp)

	}
	/* Ensure default is False */
	else
	{
		Course_correction_Lf = False;
200019d8:	af800070 	sw	zero,112(gp)
		Course_correction_Rt = False;
200019dc:	03e00008 	jr	ra
200019e0:	af800060 	sw	zero,96(gp)

200019e4 <CAN_relay_Init>:
 * This will be called from Tasks_Init by default.
 */
void CAN_relay_Init(void)
{
	/* Initialisation of variables */
	motor_speed_Lf = 0x0;
200019e4:	a7800186 	sh	zero,390(gp)
	motor_speed_Rt = 0x0;
200019e8:	a7800184 	sh	zero,388(gp)
	motor_direction_Lf = 0x0;
200019ec:	a3800188 	sb	zero,392(gp)
	motor_direction_Rt = 0x0;
200019f0:	a3800182 	sb	zero,386(gp)
	canIDLf = 0;
200019f4:	af8000e4 	sw	zero,228(gp)
	canIDRt = 0;
200019f8:	af800064 	sw	zero,100(gp)
200019fc:	00001021 	move	v0,zero
	for(uint8_t i = 0; i < 8; i++)
	{
		candataLf[i] = 0;
20001a00:	27850068 	addiu	a1,gp,104
		candataRt[i] = 0;
20001a04:	27840094 	addiu	a0,gp,148
	motor_speed_Rt = 0x0;
	motor_direction_Lf = 0x0;
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
20001a08:	24030008 	li	v1,8
	{
		candataLf[i] = 0;
20001a0c:	00453821 	addu	a3,v0,a1
		candataRt[i] = 0;
20001a10:	00443021 	addu	a2,v0,a0
20001a14:	24420001 	addiu	v0,v0,1
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
	{
		candataLf[i] = 0;
20001a18:	a0e00000 	sb	zero,0(a3)
	motor_speed_Rt = 0x0;
	motor_direction_Lf = 0x0;
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
20001a1c:	1443fffb 	bne	v0,v1,20001a0c <CAN_relay_Init+0x28>
20001a20:	a0c00000 	sb	zero,0(a2)
		candataLf[i] = 0;
		candataRt[i] = 0;
	}

	/* Initialisation of Sensor Readings */
	sensorReadings.IRLeft = 0xFF;
20001a24:	3c044000 	lui	a0,0x4000
20001a28:	240200ff 	li	v0,255
	sensorReadings.IRRight = 0xFF;
20001a2c:	248303cc 	addiu	v1,a0,972
	sensorReadings.USFwd = 0xFF;
20001a30:	ac620008 	sw	v0,8(v1)
		candataLf[i] = 0;
		candataRt[i] = 0;
	}

	/* Initialisation of Sensor Readings */
	sensorReadings.IRLeft = 0xFF;
20001a34:	ac8203cc 	sw	v0,972(a0)
	sensorReadings.IRRight = 0xFF;
	sensorReadings.USFwd = 0xFF;
}
20001a38:	03e00008 	jr	ra
20001a3c:	ac620004 	sw	v0,4(v1)

20001a40 <CAN_relay_Update>:
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001a40:	3c024000 	lui	v0,0x4000
20001a44:	244203ac 	addiu	v0,v0,940
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001a48:	9047000e 	lbu	a3,14(v0)
20001a4c:	9043000f 	lbu	v1,15(v0)

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001a50:	9045000d 	lbu	a1,13(v0)

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001a54:	30e7003f 	andi	a3,a3,0x3f
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001a58:	9046000b 	lbu	a2,11(v0)
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001a5c:	3063003f 	andi	v1,v1,0x3f
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001a60:	3c044000 	lui	a0,0x4000
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001a64:	00073980 	sll	a3,a3,0x6
20001a68:	00e33825 	or	a3,a3,v1

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001a6c:	30a5003f 	andi	a1,a1,0x3f
20001a70:	248303cc 	addiu	v1,a0,972
	{
		/* Read CAN buffer */
		readCAN();

		/* Motor direction control */
		switch(Left_motor_direction_G)
20001a74:	8f820090 	lw	v0,144(gp)
}

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001a78:	30c6003f 	andi	a2,a2,0x3f
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

	sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001a7c:	ac670008 	sw	a3,8(v1)

void readCAN(void)
{
	/* Check to see data received from Proximity sensor */
	sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
	sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001a80:	ac650004 	sw	a1,4(v1)
	{
		/* Read CAN buffer */
		readCAN();

		/* Motor direction control */
		switch(Left_motor_direction_G)
20001a84:	24030001 	li	v1,1
20001a88:	10430004 	beq	v0,v1,20001a9c <CAN_relay_Update+0x5c>
20001a8c:	ac8603cc 	sw	a2,972(a0)
20001a90:	24030002 	li	v1,2
20001a94:	14430003 	bne	v0,v1,20001aa4 <CAN_relay_Update+0x64>
20001a98:	00000000 	nop
		case Forwards:
			motor_direction_Lf = 0x1;
			break;
		case Reverse:
			motor_direction_Lf = 0x2;
			break;
20001a9c:	080006aa 	j	20001aa8 <CAN_relay_Update+0x68>
20001aa0:	a3820188 	sb	v0,392(gp)
		case Off:
		default:
			motor_direction_Lf = 0x0;
20001aa4:	a3800188 	sb	zero,392(gp)
			break;
		}

		switch(Right_motor_direction_G)
20001aa8:	8f820080 	lw	v0,128(gp)
20001aac:	24030001 	li	v1,1
20001ab0:	10430003 	beq	v0,v1,20001ac0 <CAN_relay_Update+0x80>
20001ab4:	24030002 	li	v1,2
20001ab8:	14430003 	bne	v0,v1,20001ac8 <CAN_relay_Update+0x88>
20001abc:	00000000 	nop
		case Forwards:
			motor_direction_Rt = 0x1;
			break;
		case Reverse:
			motor_direction_Rt = 0x2;
			break;
20001ac0:	080006b3 	j	20001acc <CAN_relay_Update+0x8c>
20001ac4:	a3820182 	sb	v0,386(gp)
		case Off:
		default:
			motor_direction_Rt = 0x0;
20001ac8:	a3800182 	sb	zero,386(gp)
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001acc:	978300ac 	lhu	v1,172(gp)
		motor_speed_Rt = Right_motor_speed_G * 2;
20001ad0:	978200ae 	lhu	v0,174(gp)
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001ad4:	00031840 	sll	v1,v1,0x1
		motor_speed_Rt = Right_motor_speed_G * 2;
20001ad8:	00021040 	sll	v0,v0,0x1

		if(Opponent_detected == True)
20001adc:	8f850040 	lw	a1,64(gp)
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001ae0:	3063ffff 	andi	v1,v1,0xffff
		motor_speed_Rt = Right_motor_speed_G * 2;
20001ae4:	3042ffff 	andi	v0,v0,0xffff

		if(Opponent_detected == True)
20001ae8:	24040001 	li	a0,1
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001aec:	a7830186 	sh	v1,390(gp)
		motor_speed_Rt = Right_motor_speed_G * 2;

		if(Opponent_detected == True)
20001af0:	14a40003 	bne	a1,a0,20001b00 <CAN_relay_Update+0xc0>
20001af4:	a7820184 	sh	v0,388(gp)
		{
			motor_direction_Rt = 0x0;
20001af8:	a3800182 	sb	zero,386(gp)
			motor_direction_Lf = 0x0;
20001afc:	a3800188 	sb	zero,392(gp)
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
	candataLf[3] = motor_speed_Lf >> 8;
20001b00:	00033202 	srl	a2,v1,0x8
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001b04:	93870188 	lbu	a3,392(gp)
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
	candataRt[0] = motor_direction_Rt & 0x3;
20001b08:	93850182 	lbu	a1,386(gp)
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001b0c:	3c0814ef 	lui	t0,0x14ef
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
	candataLf[3] = motor_speed_Lf >> 8;
20001b10:	a386006b 	sb	a2,107(gp)
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001b14:	3c0610ef 	lui	a2,0x10ef
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001b18:	30e70003 	andi	a3,a3,0x3
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
	candataRt[0] = motor_direction_Rt & 0x3;
20001b1c:	30a50003 	andi	a1,a1,0x3
	candataRt[2] = motor_speed_Rt & 0xFF;
	candataRt[3] = motor_speed_Rt >> 8;
20001b20:	00022202 	srl	a0,v0,0x8
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001b24:	3508d000 	ori	t0,t0,0xd000
	candataLf[3] = motor_speed_Lf >> 8;
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001b28:	34c6d100 	ori	a2,a2,0xd100
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001b2c:	af8800e4 	sw	t0,228(gp)
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001b30:	a3870068 	sb	a3,104(gp)
	candataLf[3] = motor_speed_Lf >> 8;
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001b34:	af860064 	sw	a2,100(gp)
	candataRt[0] = motor_direction_Rt & 0x3;
20001b38:	a3850094 	sb	a1,148(gp)
	candataRt[2] = motor_speed_Rt & 0xFF;
	candataRt[3] = motor_speed_Rt >> 8;
20001b3c:	a3840097 	sb	a0,151(gp)
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
20001b40:	a383006a 	sb	v1,106(gp)
	/* Force the Robot to stop by flooding the CAN with the STOP message */
	//else
	{
		//constructStopCAN();
	}
}
20001b44:	03e00008 	jr	ra
20001b48:	a3820096 	sb	v0,150(gp)

20001b4c <Handler>:
        .section .text.Handler
        .ent Handler
        .set noat
        .set noreorder
Handler:
        mfc0   $26, $13			# Read CP0 Cause register
20001b4c:	401a6800 	mfc0	k0,c0_cause
		nop
20001b50:	00000000 	nop
		and    $27, $26, 0x3f
20001b54:	335b003f 	andi	k1,k0,0x3f
		la	   $26, TableBase
20001b58:	3c1a4000 	lui	k0,0x4000
20001b5c:	275a0138 	addiu	k0,k0,312
		addu   $26, $26, $27
20001b60:	035bd021 	addu	k0,k0,k1
		lw     $27, 0($26)
20001b64:	8f5b0000 	lw	k1,0(k0)
		nop
20001b68:	00000000 	nop
		j	   $27
20001b6c:	03600008 	jr	k1
        nop
20001b70:	00000000 	nop

20001b74 <End_Handler>:
        .end Handler

      .globl End_Handler
      .ent End_Handler
End_Handler:
 		mfc0   $26,$14         # Read CP0 EPC return address Reg
20001b74:	401a7000 	mfc0	k0,c0_epc
        nop
20001b78:	00000000 	nop
        j      $26             # Return from handler
20001b7c:	03400008 	jr	k0
        rfe
20001b80:	42000010 	rfe

20001b84 <Excpt_Unused>:
	.set noreorder
	.set noat

	.globl Excpt_Unused
Excpt_Unused:
        j    Excpt_Unused 	# Loop
20001b84:	080006e1 00000000                       ........

20001b8c <Excpt_IAbort>:
        nop

	.globl Excpt_IAbort
Excpt_IAbort:
		mfc0   $26,$14         # Read CP0 EPC return address Reg
20001b8c:	401a7000 080006e3 00000000              .p.@........

20001b98 <Excpt_DAbort>:
        j    Excpt_IAbort 	   # Loop
        nop

	.globl Excpt_DAbort
Excpt_DAbort:
        j    Excpt_DAbort 	   # Loop
20001b98:	080006e6 00000000                       ........

20001ba0 <Excpt_Syscall>:
        nop

	.globl Excpt_Syscall
Excpt_Syscall:
        j    Excpt_Syscall 	   # Loop
20001ba0:	080006e8 00000000                       ........

20001ba8 <Excpt_UndefInst>:
        nop

	.globl Excpt_UndefInst
Excpt_UndefInst:
        j    Excpt_UndefInst   # Loop
20001ba8:	080006ea 00000000                       ........

20001bb0 <Excpt_Overflow>:
        nop

	.globl Excpt_Overflow
Excpt_Overflow:
        j    Excpt_Overflow	   # Loop
20001bb0:	080006ec 00000000                       ........

20001bb8 <Excpt_CoPro>:
        nop

	.globl Excpt_CoPro
Excpt_CoPro:
        j    Excpt_CoPro	   # Loop
20001bb8:	080006ee 00000000                       ........

20001bc0 <Excpt_Break>:
        nop

	.globl Excpt_Break
Excpt_Break:
        j    Excpt_Break	   # Loop
20001bc0:	080006f0 00000000                       ........

20001bc8 <InterruptHandler>:
        .ent InterruptHandler
        .set noat
        .set noreorder
InterruptHandler:
		/* Temporarily store the User Stack Pointer */
		move $k1, $sp
20001bc8:	03a0d821 	move	k1,sp

		/* Load the IRQ Stack Pointer */
		la $k0, IRQ_Stk_Base_Val
20001bcc:	3c1a4000 	lui	k0,0x4000
20001bd0:	375a4000 	ori	k0,k0,0x4000
		move $sp, $k0
20001bd4:	0340e821 	move	sp,k0

		/* Allocate stack space */
#ifndef FPU
		subu $sp, 120
20001bd8:	27bdff88 	addiu	sp,sp,-120
#else
		subu $sp, 252
#endif

		/* Save all the key general purpose registers */
		sw $ra,   4($sp)
20001bdc:	afbf0004 	sw	ra,4(sp)
        sw $t9,   8($sp)
20001be0:	afb90008 	sw	t9,8(sp)
        sw $t8,  12($sp)
20001be4:	afb8000c 	sw	t8,12(sp)
        sw $s7,  16($sp)
20001be8:	afb70010 	sw	s7,16(sp)
        sw $s6,  20($sp)
20001bec:	afb60014 	sw	s6,20(sp)
        sw $s5,  24($sp)
20001bf0:	afb50018 	sw	s5,24(sp)
        sw $s4,  28($sp)
20001bf4:	afb4001c 	sw	s4,28(sp)
        sw $s3,  32($sp)
20001bf8:	afb30020 	sw	s3,32(sp)
        sw $s2,  36($sp)
20001bfc:	afb20024 	sw	s2,36(sp)
        sw $s1,  40($sp)
20001c00:	afb10028 	sw	s1,40(sp)
        sw $s0,  44($sp)
20001c04:	afb0002c 	sw	s0,44(sp)
        sw $t7,  48($sp)
20001c08:	afaf0030 	sw	t7,48(sp)
        sw $t6,  52($sp)
20001c0c:	afae0034 	sw	t6,52(sp)
        sw $t5,  56($sp)
20001c10:	afad0038 	sw	t5,56(sp)
        sw $t4,  60($sp)
20001c14:	afac003c 	sw	t4,60(sp)
        sw $t3,  64($sp)
20001c18:	afab0040 	sw	t3,64(sp)
        sw $t2,  68($sp)
20001c1c:	afaa0044 	sw	t2,68(sp)
        sw $t1,  72($sp)
20001c20:	afa90048 	sw	t1,72(sp)
        sw $t0,  76($sp)
20001c24:	afa8004c 	sw	t0,76(sp)
        sw $a3,  80($sp)
20001c28:	afa70050 	sw	a3,80(sp)
        sw $a2,  84($sp)
20001c2c:	afa60054 	sw	a2,84(sp)
        sw $a1,  88($sp)
20001c30:	afa50058 	sw	a1,88(sp)
        sw $a0,  92($sp)
20001c34:	afa4005c 	sw	a0,92(sp)
        sw $v1,  96($sp)
20001c38:	afa30060 	sw	v1,96(sp)
        sw $v0, 100($sp)
20001c3c:	afa20064 	sw	v0,100(sp)
        sw $at, 104($sp)
20001c40:	afa10068 	sw	at,104(sp)
        sw $k1, 108($sp)
20001c44:	afbb006c 	sw	k1,108(sp)
		swc1 $f31, 236($sp)
		sw $t1, 240($sp)
#endif

        /* Get the Return Address (EPC) */
        mfc0 $k0, $14
20001c48:	401a7000 	mfc0	k0,c0_epc

		/* Store the stack frame */
#ifndef FPU
		sw $fp, 112($sp)
20001c4c:	afbe0070 	sw	s8,112(sp)
		sw $k0, 116($sp)
20001c50:	afba0074 	sw	k0,116(sp)
#else
		sw $fp, 244($sp)
		sw $k0, 248($sp)
#endif
		move $fp,$sp
20001c54:	03a0f021 	move	s8,sp

		/* Clear pending interrupts */
		mfc0 $26,$13
20001c58:	401a6800 	mfc0	k0,c0_cause
        nop
20001c5c:	00000000 	nop
        li   $26,0xFF00
20001c60:	341aff00 	li	k0,0xff00
        mtc0 $26,$13
20001c64:	409a6800 	mtc0	k0,c0_cause

 		subu $sp, 24
20001c68:	27bdffe8 	addiu	sp,sp,-24

		/* Call C handler */
 		jal   Handle_Interrupts
20001c6c:	0c000a38 	jal	200028e0 <Handle_Interrupts>
        nop
20001c70:	00000000 	nop

        addu $sp, 24
20001c74:	27bd0018 	addiu	sp,sp,24
		lwc1 $f31, 236($sp)
		ctc1 $t0, $31
#endif

		/* Restore all the key general purpose registers */
		lw $ra,   4($sp)
20001c78:	8fbf0004 	lw	ra,4(sp)
        lw $t9,   8($sp)
20001c7c:	8fb90008 	lw	t9,8(sp)
        lw $t8,  12($sp)
20001c80:	8fb8000c 	lw	t8,12(sp)
        lw $s7,  16($sp)
20001c84:	8fb70010 	lw	s7,16(sp)
        lw $s6,  20($sp)
20001c88:	8fb60014 	lw	s6,20(sp)
        lw $s5,  24($sp)
20001c8c:	8fb50018 	lw	s5,24(sp)
        lw $s4,  28($sp)
20001c90:	8fb4001c 	lw	s4,28(sp)
        lw $s3,  32($sp)
20001c94:	8fb30020 	lw	s3,32(sp)
        lw $s2,  36($sp)
20001c98:	8fb20024 	lw	s2,36(sp)
        lw $s1,  40($sp)
20001c9c:	8fb10028 	lw	s1,40(sp)
        lw $s0,  44($sp)
20001ca0:	8fb0002c 	lw	s0,44(sp)
        lw $t7,  48($sp)
20001ca4:	8faf0030 	lw	t7,48(sp)
        lw $t6,  52($sp)
20001ca8:	8fae0034 	lw	t6,52(sp)
        lw $t5,  56($sp)
20001cac:	8fad0038 	lw	t5,56(sp)
        lw $t4,  60($sp)
20001cb0:	8fac003c 	lw	t4,60(sp)
        lw $t3,  64($sp)
20001cb4:	8fab0040 	lw	t3,64(sp)
        lw $t2,  68($sp)
20001cb8:	8faa0044 	lw	t2,68(sp)
        lw $t1,  72($sp)
20001cbc:	8fa90048 	lw	t1,72(sp)
        lw $t0,  76($sp)
20001cc0:	8fa8004c 	lw	t0,76(sp)
        lw $a3,  80($sp)
20001cc4:	8fa70050 	lw	a3,80(sp)
        lw $a2,  84($sp)
20001cc8:	8fa60054 	lw	a2,84(sp)
        lw $a1,  88($sp)
20001ccc:	8fa50058 	lw	a1,88(sp)
        lw $a0,  92($sp)
20001cd0:	8fa4005c 	lw	a0,92(sp)
        lw $v1,  96($sp)
20001cd4:	8fa30060 	lw	v1,96(sp)
        lw $v0, 100($sp)
20001cd8:	8fa20064 	lw	v0,100(sp)
        lw $at, 104($sp)
20001cdc:	8fa10068 	lw	at,104(sp)
        lw $k0, 108($sp)
20001ce0:	8fba006c 	lw	k0,108(sp)

#ifndef FPU
		/* Restore the stack frame */
		lw	$fp,112($sp)
20001ce4:	8fbe0070 	lw	s8,112(sp)

        /* Get the Return Address (EPC) */
        lw $k1, 116($sp)
20001ce8:	8fbb0074 	lw	k1,116(sp)
        
        /* Restore the stack pointer */
        addu $sp, 120
20001cec:	27bd0078 	addiu	sp,sp,120

        /* Restore the stack pointer */
        addu $sp, 252
#endif
        /* Load the User Stack Pointer */
        move $sp, $k0
20001cf0:	0340e821 	move	sp,k0

        /* Return from interrupt */
        j  $k1
20001cf4:	03600008 	jr	k1

20001cf8 <End_IRQ_Ptr>:
End_IRQ_Ptr:
        rfe
20001cf8:	42000010                                ...B

20001cfc <Enable_Interrupts>:
	.global Enable_Interrupts
	.ent Enable_Interrupts

        .set noreorder
Enable_Interrupts:
        addiu   $29, $29, -24
20001cfc:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001d00:	afa80004 	sw	t0,4(sp)

        mfc0   $8, $12
20001d04:	40086000 	mfc0	t0,c0_sr
        nop
20001d08:	00000000 	nop
        ori   $8, $8, 0x01
20001d0c:	35080001 	ori	t0,t0,0x1
        nop
20001d10:	00000000 	nop
        mtc0   $8, $12
20001d14:	40886000 	mtc0	t0,c0_sr
        nop
20001d18:	00000000 	nop

        lw   $8, 4($29)
20001d1c:	8fa80004 	lw	t0,4(sp)
        addiu   $29, $29, 24
20001d20:	27bd0018 	addiu	sp,sp,24
        jr   $31
20001d24:	03e00008 	jr	ra
        nop
20001d28:	00000000 	nop

20001d2c <Disable_Interrupts>:
	.global Disable_Interrupts
	.ent Disable_Interrupts

    	.set noreorder
Disable_Interrupts:
        addiu   $29, $29, -24
20001d2c:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001d30:	afa80004 	sw	t0,4(sp)

        mfc0    $8, $12
20001d34:	40086000 	mfc0	t0,c0_sr
        lui     $9, 0xFFFF
20001d38:	3c09ffff 	lui	t1,0xffff
        ori     $9, 0xFFFE
20001d3c:	3529fffe 	ori	t1,t1,0xfffe
        nop
20001d40:	00000000 	nop
        and     $8, $8, $9
20001d44:	01094024 	and	t0,t0,t1
        nop
20001d48:	00000000 	nop
        mtc0   $8, $12
20001d4c:	40886000 	mtc0	t0,c0_sr
        nop
20001d50:	00000000 	nop

        lw   $8, 4($29)
20001d54:	8fa80004 	lw	t0,4(sp)
        addiu   $29, $29, 24
20001d58:	27bd0018 	addiu	sp,sp,24
        jr   $31
20001d5c:	03e00008 	jr	ra
        nop
20001d60:	00000000 	nop

20001d64 <Enter_Sleep_Mode>:
	.global Sleep_Ptr
	.ent Enter_Sleep_Mode

    	.set noreorder
Enter_Sleep_Mode:
        addiu   $29, $29, -24
20001d64:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001d68:	afa80004 	sw	t0,4(sp)

        mfc0   $8, $16
20001d6c:	40088000 	mfc0	t0,$16
        ori    $8, $8, 1
20001d70:	35080001 	ori	t0,t0,0x1

20001d74 <Sleep_Ptr>:
Sleep_Ptr:
        mtc0   $8, $16
20001d74:	40888000 00000000 8fa80004 27bd0018     ...@...........'
        nop

        lw   $8, 4($29)
        addiu   $29, $29, 24
        jr   $31
20001d84:	03e00008 00000000                       ........

20001d8c <LOG_Trigger_Breakpoint>:
	.section .text.LOG_Trigger_Breakpoint
	.global LOG_Trigger_Breakpoint
	.ent LOG_Trigger_Breakpoint
	
LOG_Trigger_Breakpoint:
	jr $31
20001d8c:	03e00008 	jr	ra
20001d90:	00000000 	nop

20001d94 <Scheduler_Tick>:

void Scheduler_Tick(void)
{
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
20001d94:	8f840004 	lw	a0,4(gp)

// Found in Scheduler_Tick, below.
extern void Hybrid_End_Label(void);

void Scheduler_Tick(void)
{
20001d98:	27bdffd0 	addiu	sp,sp,-48
20001d9c:	afb60028 	sw	s6,40(sp)
20001da0:	afb50024 	sw	s5,36(sp)
20001da4:	afb40020 	sw	s4,32(sp)
20001da8:	afb3001c 	sw	s3,28(sp)
20001dac:	afb20018 	sw	s2,24(sp)
20001db0:	afb00010 	sw	s0,16(sp)
20001db4:	afbf002c 	sw	ra,44(sp)
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
20001db8:	0c000955 	jal	20002554 <Log_Tick_Start>
20001dbc:	afb10014 	sw	s1,20(sp)
#endif

	system_time += tick_skip_time;
20001dc0:	8f820008 	lw	v0,8(gp)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001dc4:	3c124000 	lui	s2,0x4000
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;
20001dc8:	24420001 	addiu	v0,v0,1
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001dcc:	3c162000 	lui	s6,0x2000
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001dd0:	00008021 	move	s0,zero
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;
20001dd4:	af820008 	sw	v0,8(gp)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001dd8:	26520058 	addiu	s2,s2,88
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001ddc:	26d61e68 	addiu	s6,s6,7784
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001de0:	8f95ffd8 	lw	s5,-40(gp)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001de4:	24140003 	li	s4,3
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001de8:	0800079f 	j	20001e7c <Hybrid_End_Label+0x14>
20001dec:	24130018 	li	s3,24
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001df0:	00001012 	mflo	v0
20001df4:	24420001 	addiu	v0,v0,1
20001df8:	000210c0 	sll	v0,v0,0x3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001dfc:	02130018 	mult	s0,s3

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001e00:	00521021 	addu	v0,v0,s2
20001e04:	8c430000 	lw	v1,0(v0)
20001e08:	00000000 	nop
20001e0c:	2463ffff 	addiu	v1,v1,-1
20001e10:	ac430000 	sw	v1,0(v0)

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001e14:	00008812 	mflo	s1
20001e18:	02328821 	addu	s1,s1,s2
20001e1c:	8e250000 	lw	a1,0(s1)
	ready &= Tasks[task_index].delay_counter <= 0;
20001e20:	8c430000 	lw	v1,0(v0)
20001e24:	0005282b 	sltu	a1,zero,a1
20001e28:	28630001 	slti	v1,v1,1
#if (Config_Hybrid_Tasks == TRUE)
	ready &= Tasks[task_index].exec_from_isr == in_isr;
20001e2c:	92240014 	lbu	a0,20(s1)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
20001e30:	00651824 	and	v1,v1,a1
20001e34:	00641824 	and	v1,v1,a0
20001e38:	1060000f 	beqz	v1,20001e78 <Hybrid_End_Label+0x10>
20001e3c:	00000000 	nop
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
20001e40:	8e230004 	lw	v1,4(s1)
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001e44:	24040001 	li	a0,1
	{
		Tasks[i].delay_counter -= tick_skip_time;
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
20001e48:	ac430000 	sw	v1,0(v0)
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001e4c:	8e250000 	lw	a1,0(s1)
20001e50:	0c0008c0 	jal	20002300 <Log_Set_Address>
20001e54:	02c03021 	move	a2,s6
							(uint32_t) Hybrid_End_Label);
#endif

			(*Tasks[i].task_function)();
20001e58:	8e220000 	lw	v0,0(s1)
20001e5c:	00000000 	nop
20001e60:	0040f809 	jalr	v0
20001e64:	00000000 	nop

20001e68 <Hybrid_End_Label>:

			__asm__ volatile(".global Hybrid_End_Label");
			__asm__ volatile("Hybrid_End_Label:");

#if (Config_Logging == TRUE)
			Log_Hybrid_Start(i);
20001e68:	0c00097f 02002021 0c000973 02002021     ....! ..s...! ..
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001e78:	26100001 0215102b 1440ffdb 02140018     ...&+.....@.....
		}
#endif
	}

#if (Config_Logging == TRUE)
	Log_Reset_Addresses();
20001e88:	0c0008a6 00000000 8f840004 8fbf002c     ............,...
	tick_skip_time = Next_Tick();
	Timer_Set_Match(Config_Scheduler_Timer_Number,
			tick_skip_time * single_tick_time);
#endif
#endif
}
20001e98:	8fb60028 8fb50024 8fb40020 8fb3001c     (...$... .......
20001ea8:	8fb20018 8fb10014 8fb00010 08000a10     ................
#endif
	}

#if (Config_Logging == TRUE)
	Log_Reset_Addresses();
	Log_Tick_End(current_task);
20001eb8:	27bd0030                                0..'

20001ebc <Scheduler_Dispatch>:

// Found in Scheduler_Dispatch, below.
extern void Task_End_Label(void);

void Scheduler_Dispatch(void)
{
20001ebc:	27bdffd0 	addiu	sp,sp,-48
20001ec0:	afb60028 	sw	s6,40(sp)
20001ec4:	afb3001c 	sw	s3,28(sp)
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001ec8:	3c162000 	lui	s6,0x2000

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001ecc:	3c134000 	lui	s3,0x4000

// Found in Scheduler_Dispatch, below.
extern void Task_End_Label(void);

void Scheduler_Dispatch(void)
{
20001ed0:	afb50024 	sw	s5,36(sp)
20001ed4:	afb40020 	sw	s4,32(sp)
20001ed8:	afb20018 	sw	s2,24(sp)
20001edc:	afbf002c 	sw	ra,44(sp)
20001ee0:	afb10014 	sw	s1,20(sp)
20001ee4:	afb00010 	sw	s0,16(sp)
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
20001ee8:	0c000a48 	jal	20002920 <Disable_Interrupt>
20001eec:	26730058 	addiu	s3,s3,88
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001ef0:	26d61f7c 	addiu	s6,s6,8060
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001ef4:	8f92ffd8 	lw	s2,-40(gp)

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001ef8:	24150018 	li	s5,24

void Scheduler_Dispatch(void)
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
20001efc:	080007ea 	j	20001fa8 <Task_End_Label+0x2c>
20001f00:	24140003 	li	s4,3
static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
	ready &= Tasks[task_index].delay_counter <= 0;
20001f04:	00001012 	mflo	v0
20001f08:	24420001 	addiu	v0,v0,1
20001f0c:	000210c0 	sll	v0,v0,0x3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001f10:	02150018 	mult	s0,s5
	ready &= Tasks[task_index].delay_counter <= 0;
20001f14:	00531021 	addu	v0,v0,s3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001f18:	00008812 	mflo	s1
20001f1c:	02338821 	addu	s1,s1,s3
20001f20:	8e230000 	lw	v1,0(s1)
	ready &= Tasks[task_index].delay_counter <= 0;
20001f24:	8c450000 	lw	a1,0(v0)
#if (Config_Hybrid_Tasks == TRUE)
	ready &= Tasks[task_index].exec_from_isr == in_isr;
20001f28:	92240014 	lbu	a0,20(s1)
static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
	ready &= Tasks[task_index].delay_counter <= 0;
20001f2c:	28a50001 	slti	a1,a1,1
20001f30:	0003182b 	sltu	v1,zero,v1
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
		{
			if (Task_Ready(i, FALSE))
20001f34:	00a31824 	and	v1,a1,v1
20001f38:	2c840001 	sltiu	a0,a0,1
20001f3c:	00641824 	and	v1,v1,a0
20001f40:	10600015 	beqz	v1,20001f98 <Task_End_Label+0x1c>
20001f44:	00000000 	nop
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
20001f48:	8e230004 	lw	v1,4(s1)
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001f4c:	00002021 	move	a0,zero
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
20001f50:	ac430000 	sw	v1,0(v0)
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20001f54:	8e250000 	lw	a1,0(s1)
20001f58:	0c0008c0 	jal	20002300 <Log_Set_Address>
20001f5c:	02c03021 	move	a2,s6
								(uint32_t) Task_End_Label);
#endif

				current_task = i;
20001f60:	af900004 	sw	s0,4(gp)
				Enable_Interrupt();
20001f64:	0c000a3a 	jal	200028e8 <Enable_Interrupt>
20001f68:	00000000 	nop

				(*Tasks[i].task_function)();
20001f6c:	8e220000 	lw	v0,0(s1)
20001f70:	00000000 	nop
20001f74:	0040f809 	jalr	v0
20001f78:	00000000 	nop

20001f7c <Task_End_Label>:

				__asm__ volatile(".global Task_End_Label");
				__asm__ volatile("Task_End_Label:");

				Disable_Interrupt();
20001f7c:	0c000a48 00000000 02002021 0c0009c7     H.......! ......
				current_task = Config_Num_Tasks;

#if (Config_Logging == TRUE)
				Log_Task_Start(i);
20001f8c:	af920004 0c0009bb 02002021 26100001     ........! .....&
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001f9c:	0212102b 1440ffd8 02140018 0c000a48     +.....@.....H...

static inline boolean_t Update_Required(void)
{
	boolean_t update = FALSE;

	Disable_Interrupt();
20001fac:	00000000 8f820008 00000000 10400005     ..............@.
	if (system_time > 0)
20001fbc:	00008021 8f820008 24100001 2442ffff     !..........$..B$
	{
		update = TRUE;
		system_time--;
20001fcc:	af820008 0c000a3a 00000000 1600fff0     ....:...........

void Scheduler_Dispatch(void)
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
20001fdc:	00008021 0c0008b6 00000000 0c000a3a     !...........:...

#if (Config_Logging == TRUE)
	Log_Idle();
#endif

	Enable_Interrupt();
20001fec:	00000000 8fbf002c 8fb60028 8fb50024     ....,...(...$...
	Enter_Sleep_Mode();
#endif
}
20001ffc:	8fb40020 8fb3001c 8fb20018 8fb10014      ...............
2000200c:	8fb00010 08000759 27bd0030              ....Y...0..'

20002018 <Shutdown_System>:

// Found in the startup.strt assembly file.
extern void Enter_Sleep_Mode(void);

void Shutdown_System(void)
{
20002018:	27bdffe8 	addiu	sp,sp,-24
2000201c:	afbf0014 	sw	ra,20(sp)
#if (Config_Hardware_Scheduler == TRUE)
	hwsch_register[0].enable = 0;
#endif

	Disable_Interrupt();
20002020:	0c000a48 	jal	20002920 <Disable_Interrupt>
20002024:	00000000 	nop
	Enter_Sleep_Mode();
}
20002028:	8fbf0014 	lw	ra,20(sp)
#if (Config_Hardware_Scheduler == TRUE)
	hwsch_register[0].enable = 0;
#endif

	Disable_Interrupt();
	Enter_Sleep_Mode();
2000202c:	08000759 	j	20001d64 <Enter_Sleep_Mode>
20002030:	27bd0018 	addiu	sp,sp,24

20002034 <Scheduler_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Start(void)
{
20002034:	27bdffe8 	addiu	sp,sp,-24
20002038:	afbf0014 	sw	ra,20(sp)
#if (Config_Logging == TRUE && Config_Hardware_Scheduler != TRUE)
	Log_Init();
2000203c:	0c0009d3 	jal	2000274c <Log_Init>
20002040:	00000000 	nop
		tmrbuf_register[1] = (Config_Log_Buffer_Size / 8) - 1;
	}
	tmrbuf_register[2] = Config_Log_Num_Ticks;
#endif
#else
	Enable_Interrupt();
20002044:	0c000a3a 	jal	200028e8 <Enable_Interrupt>
20002048:	00000000 	nop
#endif

	Timer_Start(Config_Scheduler_Timer_Number);
}
2000204c:	8fbf0014 	lw	ra,20(sp)
#endif
#else
	Enable_Interrupt();
#endif

	Timer_Start(Config_Scheduler_Timer_Number);
20002050:	00002021 	move	a0,zero
20002054:	08000a82 	j	20002a08 <Timer_Start>
20002058:	27bd0018 	addiu	sp,sp,24

2000205c <Scheduler_Init>:

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
2000205c:	3c0602fa 	lui	a2,0x2fa
20002060:	00802821 	move	a1,a0
#endif

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
20002064:	27bdffe8 	addiu	sp,sp,-24
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
20002068:	00002021 	move	a0,zero
2000206c:	34c6f080 	ori	a2,a2,0xf080
#endif

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
20002070:	afbf0014 	sw	ra,20(sp)
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
20002074:	0c000a52 	jal	20002948 <Timer_Init>
20002078:	24070001 	li	a3,1
		}
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
2000207c:	0c000a2f 	jal	200028bc <Init_Interrupt>
20002080:	af82000c 	sw	v0,12(gp)
	current_task = Config_Num_Tasks;
20002084:	8f83ffd8 	lw	v1,-40(gp)
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter++;
20002088:	3c054000 	lui	a1,0x4000
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
2000208c:	af830004 	sw	v1,4(gp)
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter++;
20002090:	24a50058 	addiu	a1,a1,88
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
20002094:	00001021 	move	v0,zero
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002098:	08000831 	j	200020c4 <Scheduler_Init+0x68>
2000209c:	24040003 	li	a0,3
200020a0:	24420001 	addiu	v0,v0,1
	{
		Tasks[i].delay_counter++;
200020a4:	00003012 	mflo	a2
200020a8:	24c60001 	addiu	a2,a2,1
200020ac:	000630c0 	sll	a2,a2,0x3
200020b0:	00c53021 	addu	a2,a2,a1
200020b4:	8cc70000 	lw	a3,0(a2)
200020b8:	00000000 	nop
200020bc:	24e70001 	addiu	a3,a3,1
200020c0:	acc70000 	sw	a3,0(a2)
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200020c4:	0043302b 	sltu	a2,v0,v1
200020c8:	14c0fff5 	bnez	a2,200020a0 <Scheduler_Init+0x44>
200020cc:	00440018 	mult	v0,a0
	{
		Tasks[i].delay_counter++;
	}
#endif
}
200020d0:	8fbf0014 	lw	ra,20(sp)
200020d4:	00000000 	nop
200020d8:	03e00008 	jr	ra
200020dc:	27bd0018 	addiu	sp,sp,24

200020e0 <Write_32>:

///////////////////////////////////////////////////////////////////////////////

void Write_32(const uint32_t value)
{
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 24);
200020e0:	8f820020 	lw	v0,32(gp)
200020e4:	3c034000 	lui	v1,0x4000
200020e8:	246305d8 	addiu	v1,v1,1496
200020ec:	24450001 	addiu	a1,v0,1
200020f0:	00043602 	srl	a2,a0,0x18
200020f4:	00431021 	addu	v0,v0,v1
200020f8:	a0460000 	sb	a2,0(v0)
200020fc:	af850020 	sw	a1,32(gp)
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 16);
20002100:	8f820020 	lw	v0,32(gp)
20002104:	00043402 	srl	a2,a0,0x10
20002108:	24450001 	addiu	a1,v0,1
2000210c:	30c600ff 	andi	a2,a2,0xff
20002110:	00431021 	addu	v0,v0,v1
20002114:	a0460000 	sb	a2,0(v0)
20002118:	af850020 	sw	a1,32(gp)
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 8);
2000211c:	8f820020 	lw	v0,32(gp)
20002120:	00043202 	srl	a2,a0,0x8
20002124:	24450001 	addiu	a1,v0,1
20002128:	30c600ff 	andi	a2,a2,0xff
2000212c:	00431021 	addu	v0,v0,v1
20002130:	a0460000 	sb	a2,0(v0)
20002134:	af850020 	sw	a1,32(gp)
	Log_Buffer[buffer_index++] = (uint8_t) value;
20002138:	8f820020 	lw	v0,32(gp)
2000213c:	308400ff 	andi	a0,a0,0xff
20002140:	00431821 	addu	v1,v0,v1
20002144:	24420001 	addiu	v0,v0,1
20002148:	a0640000 	sb	a0,0(v1)
2000214c:	af820020 	sw	v0,32(gp)
}
20002150:	03e00008 	jr	ra
20002154:	00000000 	nop

20002158 <Set_Watch>:

///////////////////////////////////////////////////////////////////////////////

void Set_Watch(const uint8_t number, const uint32_t value)
{
20002158:	308400ff 	andi	a0,a0,0xff
	switch (number)
2000215c:	24020002 	li	v0,2
20002160:	10820017 	beq	a0,v0,200021c0 <Set_Watch+0x68>
20002164:	2c820003 	sltiu	v0,a0,3
20002168:	10400007 	beqz	v0,20002188 <Set_Watch+0x30>
2000216c:	24020004 	li	v0,4
20002170:	1080000d 	beqz	a0,200021a8 <Set_Watch+0x50>
20002174:	24020001 	li	v0,1
20002178:	1482001b 	bne	a0,v0,200021e8 <Set_Watch+0x90>
2000217c:	00000000 	nop
20002180:	0800086d 	j	200021b4 <Set_Watch+0x5c>
20002184:	00000000 	nop
20002188:	10820013 	beq	a0,v0,200021d8 <Set_Watch+0x80>
2000218c:	2c820004 	sltiu	v0,a0,4
20002190:	1440000e 	bnez	v0,200021cc <Set_Watch+0x74>
20002194:	24020005 	li	v0,5
20002198:	14820013 	bne	a0,v0,200021e8 <Set_Watch+0x90>
2000219c:	00000000 	nop
200021a0:	08000879 	j	200021e4 <Set_Watch+0x8c>
200021a4:	00000000 	nop
	{
	case 0:
		__asm__ volatile ("mtc0 %0, $18"::"r"(value));
200021a8:	40859000 	mtc0	a1,$18
		break;
200021ac:	03e00008 	jr	ra
200021b0:	00000000 	nop
	case 1:
		__asm__ volatile ("mtc0 %0, $19"::"r"(value));
200021b4:	40859800 	mtc0	a1,$19
		break;
200021b8:	03e00008 	jr	ra
200021bc:	00000000 	nop
	case 2:
		__asm__ volatile ("mtc0 %0, $20"::"r"(value));
200021c0:	4085a000 	mtc0	a1,$20
		break;
200021c4:	03e00008 	jr	ra
200021c8:	00000000 	nop
	case 3:
		__asm__ volatile ("mtc0 %0, $21"::"r"(value));
200021cc:	4085a800 	mtc0	a1,$21
		break;
200021d0:	03e00008 	jr	ra
200021d4:	00000000 	nop
	case 4:
		__asm__ volatile ("mtc0 %0, $22"::"r"(value));
200021d8:	4085b000 	mtc0	a1,$22
		break;
200021dc:	03e00008 	jr	ra
200021e0:	00000000 	nop
	case 5:
		__asm__ volatile ("mtc0 %0, $23"::"r"(value));
200021e4:	4085b800 	mtc0	a1,$23
200021e8:	03e00008 	jr	ra
200021ec:	00000000 	nop

200021f0 <Get_Watch>:
}

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Watch(const uint8_t number)
{
200021f0:	308400ff 	andi	a0,a0,0xff
	uint32_t value = 0;

	switch (number)
200021f4:	24020002 	li	v0,2
200021f8:	1082001b 	beq	a0,v0,20002268 <Get_Watch+0x78>
200021fc:	00000000 	nop
20002200:	2c820003 	sltiu	v0,a0,3
20002204:	10400008 	beqz	v0,20002228 <Get_Watch+0x38>
20002208:	24020004 	li	v0,4
2000220c:	10800010 	beqz	a0,20002250 <Get_Watch+0x60>
20002210:	00000000 	nop
20002214:	24020001 	li	v0,1
20002218:	1482000b 	bne	a0,v0,20002248 <Get_Watch+0x58>
2000221c:	00000000 	nop
20002220:	08000897 	j	2000225c <Get_Watch+0x6c>
20002224:	00000000 	nop
20002228:	10820015 	beq	a0,v0,20002280 <Get_Watch+0x90>
2000222c:	00000000 	nop
20002230:	2c820004 	sltiu	v0,a0,4
20002234:	1440000f 	bnez	v0,20002274 <Get_Watch+0x84>
20002238:	00000000 	nop
2000223c:	24020005 	li	v0,5
20002240:	10820012 	beq	a0,v0,2000228c <Get_Watch+0x9c>
20002244:	00000000 	nop
20002248:	03e00008 	jr	ra
2000224c:	00001021 	move	v0,zero
	{
	case 0:
		__asm__ volatile ("mfc0 %0, $18":"=r"(value));
20002250:	40029000 	mfc0	v0,$18
		break;
20002254:	03e00008 	jr	ra
20002258:	00000000 	nop
	case 1:
		__asm__ volatile ("mfc0 %0, $19":"=r"(value));
2000225c:	40029800 	mfc0	v0,$19
		break;
20002260:	03e00008 	jr	ra
20002264:	00000000 	nop
	case 2:
		__asm__ volatile ("mfc0 %0, $20":"=r"(value));
20002268:	4002a000 	mfc0	v0,$20
		break;
2000226c:	03e00008 	jr	ra
20002270:	00000000 	nop
	case 3:
		__asm__ volatile ("mfc0 %0, $21":"=r"(value));
20002274:	4002a800 	mfc0	v0,$21
		break;
20002278:	03e00008 	jr	ra
2000227c:	00000000 	nop
	case 4:
		__asm__ volatile ("mfc0 %0, $22":"=r"(value));
20002280:	4002b000 	mfc0	v0,$22
		break;
20002284:	03e00008 	jr	ra
20002288:	00000000 	nop
	case 5:
		__asm__ volatile ("mfc0 %0, $23":"=r"(value));
2000228c:	4002b800 	mfc0	v0,$23
	default:
		value = 0;
	}

	return value;
}
20002290:	03e00008 	jr	ra
20002294:	00000000 	nop

20002298 <Log_Reset_Addresses>:
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
	Set_Watch(0, 0x20000008);
20002298:	3c052000 	lui	a1,0x2000
// Found in the startup.strt assembly file.
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
2000229c:	27bdffe8 	addiu	sp,sp,-24
	Set_Watch(0, 0x20000008);
200022a0:	34a50008 	ori	a1,a1,0x8
// Found in the startup.strt assembly file.
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
200022a4:	afbf0014 	sw	ra,20(sp)
	Set_Watch(0, 0x20000008);
200022a8:	0c000856 	jal	20002158 <Set_Watch>
200022ac:	00002021 	move	a0,zero
	Set_Watch(1, (uint32_t) End_IRQ_Ptr);
200022b0:	3c052000 	lui	a1,0x2000
200022b4:	24a51cf8 	addiu	a1,a1,7416
200022b8:	0c000856 	jal	20002158 <Set_Watch>
200022bc:	24040001 	li	a0,1
	Set_Watch(4, (uint32_t) Sleep_Ptr);
200022c0:	3c052000 	lui	a1,0x2000
}
200022c4:	8fbf0014 	lw	ra,20(sp)

void Log_Reset_Addresses(void)
{
	Set_Watch(0, 0x20000008);
	Set_Watch(1, (uint32_t) End_IRQ_Ptr);
	Set_Watch(4, (uint32_t) Sleep_Ptr);
200022c8:	24a51d74 	addiu	a1,a1,7540
200022cc:	24040004 	li	a0,4
200022d0:	08000856 	j	20002158 <Set_Watch>
200022d4:	27bd0018 	addiu	sp,sp,24

200022d8 <Log_Idle>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Idle(void)
{
200022d8:	27bdffe8 	addiu	sp,sp,-24
200022dc:	afbf0014 	sw	ra,20(sp)
	Disable_Interrupt();
200022e0:	0c000a48 	jal	20002920 <Disable_Interrupt>
200022e4:	00000000 	nop
	idle_index = Config_Num_Tasks;
200022e8:	8f82ffd8 	lw	v0,-40(gp)
	Enable_Interrupt();
}
200022ec:	8fbf0014 	lw	ra,20(sp)
200022f0:	27bd0018 	addiu	sp,sp,24
///////////////////////////////////////////////////////////////////////////////

void Log_Idle(void)
{
	Disable_Interrupt();
	idle_index = Config_Num_Tasks;
200022f4:	af82fff4 	sw	v0,-12(gp)
	Enable_Interrupt();
200022f8:	08000a3a 	j	200028e8 <Enable_Interrupt>
200022fc:	00000000 	nop

20002300 <Log_Set_Address>:

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
20002300:	27bdffe0 	addiu	sp,sp,-32
	idle_index = UINT8_MAX;
20002304:	240200ff 	li	v0,255

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
20002308:	308400ff 	andi	a0,a0,0xff
2000230c:	afb10018 	sw	s1,24(sp)
20002310:	afb00014 	sw	s0,20(sp)
20002314:	afbf001c 	sw	ra,28(sp)
	idle_index = UINT8_MAX;
20002318:	af82fff4 	sw	v0,-12(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
2000231c:	00c08021 	move	s0,a2
	idle_index = UINT8_MAX;
	if (in_isr)
20002320:	1080000a 	beqz	a0,2000234c <Log_Set_Address+0x4c>
20002324:	00a08821 	move	s1,a1
	{
		Set_Watch(1, start);
20002328:	0c000856 	jal	20002158 <Set_Watch>
2000232c:	24040001 	li	a0,1
		Set_Watch(0, finish);
20002330:	02002821 	move	a1,s0
		Disable_Interrupt();
		Set_Watch(2, start);
		Set_Watch(3, finish);
		Enable_Interrupt();
	}
}
20002334:	8fbf001c 	lw	ra,28(sp)
20002338:	8fb10018 	lw	s1,24(sp)
2000233c:	8fb00014 	lw	s0,20(sp)
{
	idle_index = UINT8_MAX;
	if (in_isr)
	{
		Set_Watch(1, start);
		Set_Watch(0, finish);
20002340:	00002021 	move	a0,zero
20002344:	08000856 	j	20002158 <Set_Watch>
20002348:	27bd0020 	addiu	sp,sp,32
	}
	else
	{
		Disable_Interrupt();
2000234c:	0c000a48 	jal	20002920 <Disable_Interrupt>
20002350:	00000000 	nop
		Set_Watch(2, start);
20002354:	02202821 	move	a1,s1
20002358:	0c000856 	jal	20002158 <Set_Watch>
2000235c:	24040002 	li	a0,2
		Set_Watch(3, finish);
20002360:	02002821 	move	a1,s0
20002364:	0c000856 	jal	20002158 <Set_Watch>
20002368:	24040003 	li	a0,3
		Enable_Interrupt();
	}
}
2000236c:	8fbf001c 	lw	ra,28(sp)
20002370:	8fb10018 	lw	s1,24(sp)
20002374:	8fb00014 	lw	s0,20(sp)
	else
	{
		Disable_Interrupt();
		Set_Watch(2, start);
		Set_Watch(3, finish);
		Enable_Interrupt();
20002378:	08000a3a 	j	200028e8 <Enable_Interrupt>
2000237c:	27bd0020 	addiu	sp,sp,32

20002380 <Check_Buffer>:
// Found in the startup.strt assembly file.
extern void LOG_Trigger_Breakpoint(void);

void Check_Buffer(const uint32_t size)
{
	if (Config_Log_Buffer_Size - buffer_index < size + 1)
20002380:	8f820020 	lw	v0,32(gp)
20002384:	240303e8 	li	v1,1000
20002388:	00621023 	subu	v0,v1,v0
2000238c:	24840001 	addiu	a0,a0,1

// Found in the startup.strt assembly file.
extern void LOG_Trigger_Breakpoint(void);

void Check_Buffer(const uint32_t size)
{
20002390:	27bdffe8 	addiu	sp,sp,-24
	if (Config_Log_Buffer_Size - buffer_index < size + 1)
20002394:	0044102b 	sltu	v0,v0,a0
20002398:	1040000a 	beqz	v0,200023c4 <Check_Buffer+0x44>
2000239c:	afbf0014 	sw	ra,20(sp)
	{
		Log_Buffer[buffer_index] = 'z';
200023a0:	8f830020 	lw	v1,32(gp)
200023a4:	3c024000 	lui	v0,0x4000
200023a8:	244205d8 	addiu	v0,v0,1496
200023ac:	00621021 	addu	v0,v1,v0
200023b0:	2403007a 	li	v1,122
200023b4:	a0430000 	sb	v1,0(v0)
		LOG_Trigger_Breakpoint();
200023b8:	0c000763 	jal	20001d8c <LOG_Trigger_Breakpoint>
200023bc:	00000000 	nop
		buffer_index = 0;
200023c0:	af800020 	sw	zero,32(gp)
	}
}
200023c4:	8fbf0014 	lw	ra,20(sp)
200023c8:	00000000 	nop
200023cc:	03e00008 	jr	ra
200023d0:	27bd0018 	addiu	sp,sp,24

200023d4 <Log_Task_Address>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
200023d4:	27bdffe0 	addiu	sp,sp,-32
200023d8:	afb00010 	sw	s0,16(sp)
200023dc:	00808021 	move	s0,a0
	Check_Buffer(7);
200023e0:	24040007 	li	a0,7
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
200023e4:	afbf001c 	sw	ra,28(sp)
200023e8:	afb20018 	sw	s2,24(sp)
200023ec:	afb10014 	sw	s1,20(sp)
200023f0:	30b200ff 	andi	s2,a1,0xff
	Check_Buffer(7);
200023f4:	0c0008e0 	jal	20002380 <Check_Buffer>
200023f8:	3c114000 	lui	s1,0x4000

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200023fc:	8f820020 	lw	v0,32(gp)
20002400:	263105d8 	addiu	s1,s1,1496
20002404:	24430001 	addiu	v1,v0,1
20002408:	24050058 	li	a1,88
2000240c:	00511021 	addu	v0,v0,s1

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
20002410:	02002021 	move	a0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002414:	a0450000 	sb	a1,0(v0)
20002418:	af830020 	sw	v1,32(gp)

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
2000241c:	0c000838 	jal	200020e0 <Write_32>
20002420:	00000000 	nop

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002424:	8f820020 	lw	v0,32(gp)
20002428:	24040070 	li	a0,112
2000242c:	24430001 	addiu	v1,v0,1
20002430:	00511021 	addu	v0,v0,s1
20002434:	a0440000 	sb	a0,0(v0)
20002438:	af830020 	sw	v1,32(gp)
2000243c:	8f820020 	lw	v0,32(gp)
20002440:	00000000 	nop
20002444:	00518821 	addu	s1,v0,s1
20002448:	a2320000 	sb	s2,0(s1)
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
2000244c:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002450:	24420001 	addiu	v0,v0,1
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
20002454:	8fb20018 	lw	s2,24(sp)
20002458:	8fb10014 	lw	s1,20(sp)
2000245c:	8fb00010 	lw	s0,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002460:	af820020 	sw	v0,32(gp)
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
20002464:	03e00008 	jr	ra
20002468:	27bd0020 	addiu	sp,sp,32

2000246c <Log_ISR_Time>:
///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
2000246c:	8f820018 	lw	v0,24(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
20002470:	27bdffd8 	addiu	sp,sp,-40

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002474:	00c2182b 	sltu	v1,a2,v0

///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
20002478:	afb20020 	sw	s2,32(sp)
2000247c:	afb1001c 	sw	s1,28(sp)
20002480:	afb00018 	sw	s0,24(sp)
20002484:	afbf0024 	sw	ra,36(sp)
20002488:	00808021 	move	s0,a0
2000248c:	00a08821 	move	s1,a1

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002490:	10600003 	beqz	v1,200024a0 <Log_ISR_Time+0x34>
20002494:	00c29023 	subu	s2,a2,v0
	{
		return second - first;
	}

	return second + (UINT32_MAX - first);
20002498:	00029027 	nor	s2,zero,v0
2000249c:	00d29021 	addu	s2,a2,s2

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
200024a0:	24040007 	li	a0,7
200024a4:	0c0008e0 	jal	20002380 <Check_Buffer>
200024a8:	afa60010 	sw	a2,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024ac:	8f820020 	lw	v0,32(gp)
200024b0:	3c034000 	lui	v1,0x4000
200024b4:	246305d8 	addiu	v1,v1,1496
200024b8:	24440001 	addiu	a0,v0,1
200024bc:	24050079 	li	a1,121
200024c0:	00431021 	addu	v0,v0,v1
200024c4:	a0450000 	sb	a1,0(v0)
200024c8:	af840020 	sw	a0,32(gp)
200024cc:	8f820020 	lw	v0,32(gp)
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
200024d0:	322500ff 	andi	a1,s1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024d4:	24440001 	addiu	a0,v0,1
200024d8:	00431021 	addu	v0,v0,v1
200024dc:	a0450000 	sb	a1,0(v0)
200024e0:	af840020 	sw	a0,32(gp)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200024e4:	2782fff8 	addiu	v0,gp,-8
200024e8:	00508021 	addu	s0,v0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024ec:	8f820020 	lw	v0,32(gp)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200024f0:	92050000 	lbu	a1,0(s0)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024f4:	00431821 	addu	v1,v0,v1
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
200024f8:	3a3100ff 	xori	s1,s1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200024fc:	24420001 	addiu	v0,v0,1
20002500:	a0650000 	sb	a1,0(v1)
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
20002504:	02402021 	move	a0,s2

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
20002508:	0011882b 	sltu	s1,zero,s1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000250c:	af820020 	sw	v0,32(gp)
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
20002510:	0c000838 	jal	200020e0 <Write_32>
20002514:	00000000 	nop

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002518:	3a220001 	xori	v0,s1,0x1
2000251c:	8f830018 	lw	v1,24(gp)
20002520:	8fa60010 	lw	a2,16(sp)
20002524:	00118823 	negu	s1,s1
20002528:	00021023 	negu	v0,v0
2000252c:	02263024 	and	a2,s1,a2
20002530:	00431024 	and	v0,v0,v1
						(-no_update & previous_isr_time);
}
20002534:	8fbf0024 	lw	ra,36(sp)
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002538:	00463025 	or	a2,v0,a2
						(-no_update & previous_isr_time);
}
2000253c:	8fb20020 	lw	s2,32(sp)
20002540:	8fb1001c 	lw	s1,28(sp)
20002544:	8fb00018 	lw	s0,24(sp)
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002548:	af860018 	sw	a2,24(gp)
						(-no_update & previous_isr_time);
}
2000254c:	03e00008 	jr	ra
20002550:	27bd0028 	addiu	sp,sp,40

20002554 <Log_Tick_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
20002554:	27bdffe0 	addiu	sp,sp,-32
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
20002558:	8f850010 	lw	a1,16(gp)
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
2000255c:	afb00018 	sw	s0,24(sp)
20002560:	00808021 	move	s0,a0
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
20002564:	24040001 	li	a0,1
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
20002568:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
2000256c:	0c00087c 	jal	200021f0 <Get_Watch>
20002570:	afa50010 	sw	a1,16(sp)
20002574:	8fa50010 	lw	a1,16(sp)
20002578:	00403021 	move	a2,v0
2000257c:	0c00091b 	jal	2000246c <Log_ISR_Time>
20002580:	24040003 	li	a0,3
	Log_ISR_Time(LOG_INTERRUPT_END, idle_index, Get_Watch(4));
20002584:	8f85fff4 	lw	a1,-12(gp)
20002588:	24040004 	li	a0,4
2000258c:	0c00087c 	jal	200021f0 <Get_Watch>
20002590:	afa50010 	sw	a1,16(sp)
20002594:	8fa50010 	lw	a1,16(sp)
20002598:	00403021 	move	a2,v0
2000259c:	0c00091b 	jal	2000246c <Log_ISR_Time>
200025a0:	24040003 	li	a0,3

	last_index = task_index;

	Log_ISR_Time(LOG_INTERRUPT_START, task_index, Get_Watch(0));
200025a4:	00002021 	move	a0,zero
200025a8:	0c00087c 	jal	200021f0 <Get_Watch>
200025ac:	af900010 	sw	s0,16(gp)
200025b0:	00403021 	move	a2,v0
200025b4:	02002821 	move	a1,s0
}
200025b8:	8fbf001c 	lw	ra,28(sp)
200025bc:	8fb00018 	lw	s0,24(sp)
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
	Log_ISR_Time(LOG_INTERRUPT_END, idle_index, Get_Watch(4));

	last_index = task_index;

	Log_ISR_Time(LOG_INTERRUPT_START, task_index, Get_Watch(0));
200025c0:	24040002 	li	a0,2
200025c4:	0800091b 	j	2000246c <Log_ISR_Time>
200025c8:	27bd0020 	addiu	sp,sp,32

200025cc <Log_Hybrid_End>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
200025cc:	27bdffe0 	addiu	sp,sp,-32
200025d0:	00802821 	move	a1,a0
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
200025d4:	00002021 	move	a0,zero
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
200025d8:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
200025dc:	0c00087c 	jal	200021f0 <Get_Watch>
200025e0:	afa50010 	sw	a1,16(sp)
200025e4:	8fa50010 	lw	a1,16(sp)
}
200025e8:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
200025ec:	00403021 	move	a2,v0
200025f0:	24040005 	li	a0,5
200025f4:	0800091b 	j	2000246c <Log_ISR_Time>
200025f8:	27bd0020 	addiu	sp,sp,32

200025fc <Log_Hybrid_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
200025fc:	27bdffe0 	addiu	sp,sp,-32
20002600:	00802821 	move	a1,a0
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002604:	24040001 	li	a0,1
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
20002608:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
2000260c:	0c00087c 	jal	200021f0 <Get_Watch>
20002610:	afa50010 	sw	a1,16(sp)
20002614:	8fa50010 	lw	a1,16(sp)
}
20002618:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
2000261c:	00403021 	move	a2,v0
20002620:	24040004 	li	a0,4
20002624:	0800091b 	j	2000246c <Log_ISR_Time>
20002628:	27bd0020 	addiu	sp,sp,32

2000262c <Log_Time>:
///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
2000262c:	8f820014 	lw	v0,20(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
20002630:	27bdffd8 	addiu	sp,sp,-40

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002634:	00c2182b 	sltu	v1,a2,v0

///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
20002638:	afb10020 	sw	s1,32(sp)
2000263c:	afb0001c 	sw	s0,28(sp)
20002640:	afbf0024 	sw	ra,36(sp)
20002644:	00808021 	move	s0,a0

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002648:	10600003 	beqz	v1,20002658 <Log_Time+0x2c>
2000264c:	00c28823 	subu	s1,a2,v0
	{
		return second - first;
	}

	return second + (UINT32_MAX - first);
20002650:	00028827 	nor	s1,zero,v0
20002654:	00d18821 	addu	s1,a2,s1

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
20002658:	24040007 	li	a0,7
2000265c:	afa60014 	sw	a2,20(sp)
20002660:	0c0008e0 	jal	20002380 <Check_Buffer>
20002664:	afa50010 	sw	a1,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002668:	8f820020 	lw	v0,32(gp)
2000266c:	3c034000 	lui	v1,0x4000
20002670:	246305d8 	addiu	v1,v1,1496
20002674:	24440001 	addiu	a0,v0,1
20002678:	24070079 	li	a3,121
2000267c:	00431021 	addu	v0,v0,v1
20002680:	a0470000 	sb	a3,0(v0)
20002684:	af840020 	sw	a0,32(gp)
20002688:	8f820020 	lw	v0,32(gp)
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
2000268c:	8fa50010 	lw	a1,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002690:	24440001 	addiu	a0,v0,1
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
20002694:	30a500ff 	andi	a1,a1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002698:	00431021 	addu	v0,v0,v1
2000269c:	a0450000 	sb	a1,0(v0)
200026a0:	af840020 	sw	a0,32(gp)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200026a4:	2782fff8 	addiu	v0,gp,-8
200026a8:	00508021 	addu	s0,v0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026ac:	8f820020 	lw	v0,32(gp)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200026b0:	92050000 	lbu	a1,0(s0)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026b4:	00431821 	addu	v1,v0,v1
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
200026b8:	02202021 	move	a0,s1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026bc:	24420001 	addiu	v0,v0,1
200026c0:	a0650000 	sb	a1,0(v1)
200026c4:	af820020 	sw	v0,32(gp)
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
200026c8:	0c000838 	jal	200020e0 <Write_32>
200026cc:	00000000 	nop
	previous_time = cycle_count;
200026d0:	8fa60014 	lw	a2,20(sp)
}
200026d4:	8fbf0024 	lw	ra,36(sp)
200026d8:	8fb10020 	lw	s1,32(sp)
200026dc:	8fb0001c 	lw	s0,28(sp)
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
	previous_time = cycle_count;
200026e0:	af860014 	sw	a2,20(gp)
}
200026e4:	03e00008 	jr	ra
200026e8:	27bd0028 	addiu	sp,sp,40

200026ec <Log_Task_End>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
200026ec:	27bdffe0 	addiu	sp,sp,-32
200026f0:	00802821 	move	a1,a0
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
200026f4:	24040003 	li	a0,3
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
200026f8:	afbf001c 	sw	ra,28(sp)
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
200026fc:	0c00087c 	jal	200021f0 <Get_Watch>
20002700:	afa50010 	sw	a1,16(sp)
20002704:	8fa50010 	lw	a1,16(sp)
}
20002708:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
2000270c:	00403021 	move	a2,v0
20002710:	24040001 	li	a0,1
20002714:	0800098b 	j	2000262c <Log_Time>
20002718:	27bd0020 	addiu	sp,sp,32

2000271c <Log_Task_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
2000271c:	27bdffe0 	addiu	sp,sp,-32
20002720:	00802821 	move	a1,a0
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
20002724:	24040002 	li	a0,2
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
20002728:	afbf001c 	sw	ra,28(sp)
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
2000272c:	0c00087c 	jal	200021f0 <Get_Watch>
20002730:	afa50010 	sw	a1,16(sp)
20002734:	8fa50010 	lw	a1,16(sp)
}
20002738:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
2000273c:	00403021 	move	a2,v0
20002740:	00002021 	move	a0,zero
20002744:	0800098b 	j	2000262c <Log_Time>
20002748:	27bd0020 	addiu	sp,sp,32

2000274c <Log_Init>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Init(void)
{
2000274c:	27bdffd8 	addiu	sp,sp,-40
	Check_Buffer(5);
20002750:	24040005 	li	a0,5
}

///////////////////////////////////////////////////////////////////////////////

void Log_Init(void)
{
20002754:	afbf0024 	sw	ra,36(sp)
20002758:	afb30020 	sw	s3,32(sp)
2000275c:	afb2001c 	sw	s2,28(sp)
20002760:	afb10018 	sw	s1,24(sp)
	Check_Buffer(5);
20002764:	0c0008e0 	jal	20002380 <Check_Buffer>
20002768:	afb00014 	sw	s0,20(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000276c:	8f820020 	lw	v0,32(gp)
20002770:	3c034000 	lui	v1,0x4000
20002774:	246305d8 	addiu	v1,v1,1496
20002778:	00431821 	addu	v1,v0,v1
2000277c:	24050057 	li	a1,87

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
20002780:	3c0402fa 	lui	a0,0x2fa

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002784:	24420001 	addiu	v0,v0,1
20002788:	a0650000 	sb	a1,0(v1)

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
2000278c:	3484f080 	ori	a0,a0,0xf080

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002790:	af820020 	sw	v0,32(gp)

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
20002794:	0c000838 	jal	200020e0 <Write_32>
20002798:	3c124000 	lui	s2,0x4000

	last_index = Config_Num_Tasks;
2000279c:	8f93ffd8 	lw	s3,-40(gp)
200027a0:	00000000 	nop
200027a4:	af930010 	sw	s3,16(gp)

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		if (Tasks[i].exec_from_isr == TRUE)
200027a8:	26520058 	addiu	s2,s2,88
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);

	last_index = Config_Num_Tasks;
200027ac:	00008021 	move	s0,zero

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200027b0:	080009fd 	j	200027f4 <Log_Init+0xa8>
200027b4:	24110018 	li	s1,24
200027b8:	8f850010 	lw	a1,16(gp)
200027bc:	00000000 	nop
	{
		if (Tasks[i].exec_from_isr == TRUE)
		{
			priority = (last_index * 2) - i;
200027c0:	00051040 	sll	v0,a1,0x1
		}
		else
		{
			priority = last_index - i;
200027c4:	00b02823 	subu	a1,a1,s0
		}
		Log_Task_Address(Tasks[i].task_function, priority);
200027c8:	00001812 	mflo	v1
200027cc:	00721821 	addu	v1,v1,s2
	last_index = Config_Num_Tasks;

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		if (Tasks[i].exec_from_isr == TRUE)
200027d0:	90640014 	lbu	a0,20(v1)
200027d4:	00000000 	nop
200027d8:	10800002 	beqz	a0,200027e4 <Log_Init+0x98>
200027dc:	00000000 	nop
		{
			priority = (last_index * 2) - i;
200027e0:	00502823 	subu	a1,v0,s0
		}
		else
		{
			priority = last_index - i;
		}
		Log_Task_Address(Tasks[i].task_function, priority);
200027e4:	8c640000 	lw	a0,0(v1)
200027e8:	0c0008f5 	jal	200023d4 <Log_Task_Address>
200027ec:	30a500ff 	andi	a1,a1,0xff
	Write_32(Config_Oscillator_Frequency);

	last_index = Config_Num_Tasks;

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200027f0:	26100001 	addiu	s0,s0,1
200027f4:	0213102b 	sltu	v0,s0,s3
200027f8:	1440ffef 	bnez	v0,200027b8 <Log_Init+0x6c>
200027fc:	02110018 	mult	s0,s1
			priority = last_index - i;
		}
		Log_Task_Address(Tasks[i].task_function, priority);
	}

	Log_Reset_Addresses();
20002800:	0c0008a6 	jal	20002298 <Log_Reset_Addresses>
20002804:	00000000 	nop

	previous_time = Get_Watch(0);
20002808:	0c00087c 	jal	200021f0 <Get_Watch>
2000280c:	00002021 	move	a0,zero
	previous_isr_time = previous_time;
	Log_Time(LOG_TASK_START, last_index, 0);
20002810:	8f850010 	lw	a1,16(gp)
}
20002814:	8fbf0024 	lw	ra,36(sp)
20002818:	8fb30020 	lw	s3,32(sp)
2000281c:	8fb2001c 	lw	s2,28(sp)
20002820:	8fb10018 	lw	s1,24(sp)
20002824:	8fb00014 	lw	s0,20(sp)

	Log_Reset_Addresses();

	previous_time = Get_Watch(0);
	previous_isr_time = previous_time;
	Log_Time(LOG_TASK_START, last_index, 0);
20002828:	00002021 	move	a0,zero
2000282c:	00003021 	move	a2,zero
}
20002830:	27bd0028 	addiu	sp,sp,40
	}

	Log_Reset_Addresses();

	previous_time = Get_Watch(0);
	previous_isr_time = previous_time;
20002834:	af820018 	sw	v0,24(gp)
	Log_Time(LOG_TASK_START, last_index, 0);
20002838:	0800098b 	j	2000262c <Log_Time>
2000283c:	af820014 	sw	v0,20(gp)

20002840 <Log_Tick_End>:

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
	current_tick++;
20002840:	8f82001c 	lw	v0,28(gp)
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
20002844:	27bdffe8 	addiu	sp,sp,-24
	current_tick++;
20002848:	24420001 	addiu	v0,v0,1
	if (current_tick > Config_Log_Num_Ticks)
2000284c:	2c430065 	sltiu	v1,v0,101
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
20002850:	afb00010 	sw	s0,16(sp)
20002854:	afbf0014 	sw	ra,20(sp)
20002858:	00808021 	move	s0,a0
	current_tick++;
	if (current_tick > Config_Log_Num_Ticks)
2000285c:	1460000d 	bnez	v1,20002894 <Log_Tick_End+0x54>
20002860:	af82001c 	sw	v0,28(gp)
	{
		Check_Buffer(1);
20002864:	0c0008e0 	jal	20002380 <Check_Buffer>
20002868:	24040001 	li	a0,1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000286c:	8f820020 	lw	v0,32(gp)
20002870:	3c034000 	lui	v1,0x4000
20002874:	246305d8 	addiu	v1,v1,1496
20002878:	00431821 	addu	v1,v0,v1
2000287c:	24040067 	li	a0,103
20002880:	24420001 	addiu	v0,v0,1
20002884:	a0640000 	sb	a0,0(v1)
20002888:	af820020 	sw	v0,32(gp)
	current_tick++;
	if (current_tick > Config_Log_Num_Ticks)
	{
		Check_Buffer(1);
		Write_8('g');
		LOG_Trigger_Breakpoint();
2000288c:	0c000763 	jal	20001d8c <LOG_Trigger_Breakpoint>
20002890:	00000000 	nop
	}

	if (task_index >= Config_Num_Tasks)
20002894:	8f82ffd8 	lw	v0,-40(gp)
20002898:	00000000 	nop
2000289c:	0202802b 	sltu	s0,s0,v0
200028a0:	16000002 	bnez	s0,200028ac <Log_Tick_End+0x6c>
200028a4:	240200ff 	li	v0,255
	{
		idle_index = UINT8_MAX;
200028a8:	af82fff4 	sw	v0,-12(gp)
	}
}
200028ac:	8fbf0014 	lw	ra,20(sp)
200028b0:	8fb00010 	lw	s0,16(sp)
200028b4:	03e00008 	jr	ra
200028b8:	27bd0018 	addiu	sp,sp,24

200028bc <Init_Interrupt>:
///////////////////////////////////////////////////////////////////////////////


void Init_Interrupt(void)
{
	TableBase = (uint32_t)InterruptHandler;
200028bc:	3c022000 	lui	v0,0x2000
200028c0:	24421bc8 	addiu	v0,v0,7112
200028c4:	af82ff98 	sw	v0,-104(gp)
 *
 */
uint32_t Status_Reg_Get()
{
	uint32_t regValue;
	__asm volatile("mfc0 %0, $12" : "=d" (regValue) :);
200028c8:	40026000 	mfc0	v0,c0_sr
200028cc:	00000000 	nop
 *
 * \param[in] The value to write.
 */
void Status_Reg_Set(uint32_t value)
{
	__asm volatile("mtc0 %0, $12" :: "d" ((unsigned long)(value)));
200028d0:	34420700 	ori	v0,v0,0x700
200028d4:	40826000 	mtc0	v0,c0_sr

void Init_Interrupt(void)
{
	TableBase = (uint32_t)InterruptHandler;
	Enable_System_Interrupt(Config_Scheduler_Interrupt_Number);
}
200028d8:	03e00008 	jr	ra
200028dc:	00000000 	nop

200028e0 <Handle_Interrupts>:

///////////////////////////////////////////////////////////////////////////////

void Handle_Interrupts(void)
{
	Scheduler_Tick();
200028e0:	08000765 	j	20001d94 <Scheduler_Tick>
200028e4:	00000000 	nop

200028e8 <Enable_Interrupt>:

///////////////////////////////////////////////////////////////////////////////

void Enable_Interrupt(void)
{
	if (nesting_level > 0)
200028e8:	8f820024 	lw	v0,36(gp)
200028ec:	00000000 	nop
200028f0:	10400005 	beqz	v0,20002908 <Enable_Interrupt+0x20>
200028f4:	00000000 	nop
	{
		nesting_level--;
200028f8:	2442ffff 	addiu	v0,v0,-1
200028fc:	af820024 	sw	v0,36(gp)
	}

	if (nesting_level == 0)
20002900:	8f820024 	lw	v0,36(gp)
20002904:	00000000 	nop
20002908:	14400003 	bnez	v0,20002918 <Enable_Interrupt+0x30>
2000290c:	00000000 	nop
	{
		Enable_Interrupts();
20002910:	0800073f 	j	20001cfc <Enable_Interrupts>
20002914:	00000000 	nop
20002918:	03e00008 	jr	ra
2000291c:	00000000 	nop

20002920 <Disable_Interrupt>:
}

///////////////////////////////////////////////////////////////////////////////

void Disable_Interrupt(void)
{
20002920:	27bdffe8 	addiu	sp,sp,-24
20002924:	afbf0014 	sw	ra,20(sp)
	Disable_Interrupts();
20002928:	0c00074b 	jal	20001d2c <Disable_Interrupts>
2000292c:	00000000 	nop
	nesting_level++;
20002930:	8f820024 	lw	v0,36(gp)
}
20002934:	8fbf0014 	lw	ra,20(sp)
///////////////////////////////////////////////////////////////////////////////

void Disable_Interrupt(void)
{
	Disable_Interrupts();
	nesting_level++;
20002938:	24420001 	addiu	v0,v0,1
2000293c:	af820024 	sw	v0,36(gp)
}
20002940:	03e00008 	jr	ra
20002944:	27bd0018 	addiu	sp,sp,24

20002948 <Timer_Init>:
	Timer_Set_Prescalar(timer, 0);
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
20002948:	14e00002 	bnez	a3,20002954 <Timer_Init+0xc>
2000294c:	00c7001b 	divu	zero,a2,a3
20002950:	0007000d 	break	0x7

///////////////////////////////////////////////////////////////////////////////

uint32_t Timer_Init(const uint8_t timer, const uint32_t tick_us,
		const uint32_t oscillator_frequency, const uint32_t clock_divider)
{
20002954:	308400ff 	andi	a0,a0,0xff

///////////////////////////////////////////////////////////////////////////////

void Timer_Stop(const uint8_t timer)
{
	timer_register[timer].control &= ~control_start;
20002958:	3c028000 	lui	v0,0x8000
2000295c:	00042200 	sll	a0,a0,0x8
20002960:	00822021 	addu	a0,a0,v0
20002964:	8c870000 	lw	a3,0(a0)
20002968:	2402fffe 	li	v0,-2
2000296c:	00e21024 	and	v0,a3,v0
20002970:	ac820000 	sw	v0,0(a0)
///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Prescalar(const uint8_t timer, const uint32_t prescalar)
{
	const uint32_t value = prescalar > 0 ? prescalar - 1 : 0;
	timer_register[timer].prescalar_match = value;
20002974:	ac800008 	sw	zero,8(a0)

///////////////////////////////////////////////////////////////////////////////

void Timer_Clear(const uint8_t timer)
{
	timer_register[timer].timer_counter = 0;
20002978:	ac80000c 	sw	zero,12(a0)

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
2000297c:	8c870000 	lw	a3,0(a0)
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002980:	3c06000f 	lui	a2,0xf

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002984:	2402fffd 	li	v0,-3
20002988:	00e21024 	and	v0,a3,v0
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
2000298c:	34c64240 	ori	a2,a2,0x4240

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002990:	ac820000 	sw	v0,0(a0)
	Timer_Set_Prescalar(timer, 0);
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
20002994:	00001812 	mflo	v1
	...
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);

	const uint32_t match = timer_frequency / (timer_frequency / tick_us);
200029a0:	14a00002 	bnez	a1,200029ac <Timer_Init+0x64>
200029a4:	0065001b 	divu	zero,v1,a1
200029a8:	0007000d 	break	0x7
200029ac:	00002812 	mflo	a1
	...
200029b8:	14a00002 	bnez	a1,200029c4 <Timer_Init+0x7c>
200029bc:	0065001b 	divu	zero,v1,a1
200029c0:	0007000d 	break	0x7
200029c4:	00001012 	mflo	v0

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
200029c8:	0002282b 	sltu	a1,zero,v0
200029cc:	00052823 	negu	a1,a1
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
200029d0:	14c00002 	bnez	a2,200029dc <Timer_Init+0x94>
200029d4:	0066001b 	divu	zero,v1,a2
200029d8:	0007000d 	break	0x7

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
200029dc:	2447ffff 	addiu	a3,v0,-1
200029e0:	00e53824 	and	a3,a3,a1
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
200029e4:	00001812 	mflo	v1

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Prescalar(const uint8_t timer, const uint32_t prescalar)
{
	const uint32_t value = prescalar > 0 ? prescalar - 1 : 0;
200029e8:	0003282b 	sltu	a1,zero,v1
200029ec:	00052823 	negu	a1,a1
200029f0:	2463ffff 	addiu	v1,v1,-1
200029f4:	00651824 	and	v1,v1,a1
	timer_register[timer].prescalar_match = value;
200029f8:	ac830008 	sw	v1,8(a0)
///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
	timer_register[timer].timer_match = value;
200029fc:	ac870010 	sw	a3,16(a0)

	const uint32_t match = timer_frequency / (timer_frequency / tick_us);
	Timer_Set_Match(timer, match);

	return match;
}
20002a00:	03e00008 	jr	ra
20002a04:	00000000 	nop

20002a08 <Timer_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Timer_Start(const uint8_t timer)
{
20002a08:	308400ff 	andi	a0,a0,0xff
	timer_register[timer].control |= control_start;
20002a0c:	3c028000 	lui	v0,0x8000
20002a10:	00042200 	sll	a0,a0,0x8
20002a14:	00822021 	addu	a0,a0,v0
20002a18:	8c820000 	lw	v0,0(a0)
20002a1c:	00000000 	nop
20002a20:	34420001 	ori	v0,v0,0x1
20002a24:	ac820000 	sw	v0,0(a0)
}
20002a28:	03e00008 	jr	ra
20002a2c:	00000000 	nop

20002a30 <SPI_Init>:
static const uint32_t control_cpol     = (1 << 2);

///////////////////////////////////////////////////////////////////////////////

void SPI_Init(const uint8_t spi, const uint32_t mode, const uint32_t clock_divider)
{
20002a30:	308400ff 	andi	a0,a0,0xff
	spi_register[spi].control = ((mode & 0x03) << 1);
20002a34:	3c028000 	lui	v0,0x8000
20002a38:	34420a00 	ori	v0,v0,0xa00
20002a3c:	00042200 	sll	a0,a0,0x8
20002a40:	00822021 	addu	a0,a0,v0
20002a44:	30a50003 	andi	a1,a1,0x3
	spi_register[spi].clk_div = clock_divider & 0xFFFFFFFC;
20002a48:	2402fffc 	li	v0,-4
20002a4c:	00c21024 	and	v0,a2,v0

///////////////////////////////////////////////////////////////////////////////

void SPI_Init(const uint8_t spi, const uint32_t mode, const uint32_t clock_divider)
{
	spi_register[spi].control = ((mode & 0x03) << 1);
20002a50:	00052840 	sll	a1,a1,0x1
20002a54:	ac850000 	sw	a1,0(a0)
	spi_register[spi].clk_div = clock_divider & 0xFFFFFFFC;
20002a58:	ac820004 	sw	v0,4(a0)
}
20002a5c:	03e00008 	jr	ra
20002a60:	00000000 	nop

20002a64 <SPI_Swap>:
}

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
20002a64:	308400ff 	andi	a0,a0,0xff

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002a68:	3c028000 	lui	v0,0x8000
20002a6c:	00042200 	sll	a0,a0,0x8
20002a70:	34420a00 	ori	v0,v0,0xa00
20002a74:	00822021 	addu	a0,a0,v0
}

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
20002a78:	30a500ff 	andi	a1,a1,0xff

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002a7c:	8c820000 	lw	v0,0(a0)
20002a80:	00000000 	nop

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
	while(!SPI_Ready(spi));
20002a84:	30420001 	andi	v0,v0,0x1
20002a88:	1040fffc 	beqz	v0,20002a7c <SPI_Swap+0x18>
20002a8c:	00000000 	nop
	spi_register[spi].data = data;
20002a90:	ac850008 	sw	a1,8(a0)

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002a94:	8c820000 	lw	v0,0(a0)
20002a98:	00000000 	nop

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
	while(!SPI_Ready(spi));
	spi_register[spi].data = data;
	while(!SPI_Ready(spi));
20002a9c:	30420001 	andi	v0,v0,0x1
20002aa0:	1040fffc 	beqz	v0,20002a94 <SPI_Swap+0x30>
20002aa4:	00000000 	nop
	return spi_register[spi].data;
20002aa8:	8c820008 	lw	v0,8(a0)
}
20002aac:	03e00008 	jr	ra
20002ab0:	304200ff 	andi	v0,v0,0xff

20002ab4 <Segment_Clear_Decimal>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Clear_Decimal(const segment_digit_t digit)
{
20002ab4:	27bdffe0 	addiu	sp,sp,-32
20002ab8:	afb10018 	sw	s1,24(sp)
20002abc:	afb00014 	sw	s0,20(sp)
20002ac0:	3091ffff 	andi	s1,a0,0xffff
20002ac4:	309000ff 	andi	s0,a0,0xff
20002ac8:	afbf001c 	sw	ra,28(sp)
20002acc:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002ad0:	12000005 	beqz	s0,20002ae8 <Segment_Clear_Decimal+0x34>
20002ad4:	00118a02 	srl	s1,s1,0x8
20002ad8:	3c044000 	lui	a0,0x4000
20002adc:	24840000 	addiu	a0,a0,0
20002ae0:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002ae4:	24050056 	li	a1,86
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002ae8:	2e220004 	sltiu	v0,s1,4
20002aec:	14400006 	bnez	v0,20002b08 <Segment_Clear_Decimal+0x54>
20002af0:	3c024000 	lui	v0,0x4000
20002af4:	3c044000 	lui	a0,0x4000
20002af8:	24840000 	addiu	a0,a0,0
20002afc:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002b00:	24050057 	li	a1,87

	segment_register[digit.segment].decimals &= ~segment_decimal[digit.digit];
20002b04:	3c024000 	lui	v0,0x4000
20002b08:	24420028 	addiu	v0,v0,40
20002b0c:	00118880 	sll	s1,s1,0x2
20002b10:	02228821 	addu	s1,s1,v0
20002b14:	3c028000 	lui	v0,0x8000
20002b18:	34420900 	ori	v0,v0,0x900
20002b1c:	00108200 	sll	s0,s0,0x8
20002b20:	02028021 	addu	s0,s0,v0
20002b24:	8e220000 	lw	v0,0(s1)
20002b28:	8e030008 	lw	v1,8(s0)
20002b2c:	00021027 	nor	v0,zero,v0
}
20002b30:	8fbf001c 	lw	ra,28(sp)
void Segment_Clear_Decimal(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].decimals &= ~segment_decimal[digit.digit];
20002b34:	00431024 	and	v0,v0,v1
20002b38:	ae020008 	sw	v0,8(s0)
}
20002b3c:	8fb10018 	lw	s1,24(sp)
20002b40:	8fb00014 	lw	s0,20(sp)
20002b44:	03e00008 	jr	ra
20002b48:	27bd0020 	addiu	sp,sp,32

20002b4c <Segment_Set_Decimal>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Set_Decimal(const segment_digit_t digit)
{
20002b4c:	27bdffe0 	addiu	sp,sp,-32
20002b50:	afb10018 	sw	s1,24(sp)
20002b54:	afb00014 	sw	s0,20(sp)
20002b58:	309100ff 	andi	s1,a0,0xff
20002b5c:	3090ffff 	andi	s0,a0,0xffff
20002b60:	afbf001c 	sw	ra,28(sp)
20002b64:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002b68:	12200005 	beqz	s1,20002b80 <Segment_Set_Decimal+0x34>
20002b6c:	00108202 	srl	s0,s0,0x8
20002b70:	3c044000 	lui	a0,0x4000
20002b74:	24840000 	addiu	a0,a0,0
20002b78:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002b7c:	2405004c 	li	a1,76
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002b80:	2e020004 	sltiu	v0,s0,4
20002b84:	14400006 	bnez	v0,20002ba0 <Segment_Set_Decimal+0x54>
20002b88:	3c028000 	lui	v0,0x8000
20002b8c:	3c044000 	lui	a0,0x4000
20002b90:	24840000 	addiu	a0,a0,0
20002b94:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002b98:	2405004d 	li	a1,77

	segment_register[digit.segment].decimals |= segment_decimal[digit.digit];
20002b9c:	3c028000 	lui	v0,0x8000
20002ba0:	34420900 	ori	v0,v0,0x900
20002ba4:	00118a00 	sll	s1,s1,0x8
20002ba8:	02228821 	addu	s1,s1,v0
20002bac:	3c024000 	lui	v0,0x4000
20002bb0:	24420028 	addiu	v0,v0,40
20002bb4:	00108080 	sll	s0,s0,0x2
20002bb8:	02028021 	addu	s0,s0,v0
20002bbc:	8e230008 	lw	v1,8(s1)
20002bc0:	8e020000 	lw	v0,0(s0)
}
20002bc4:	8fbf001c 	lw	ra,28(sp)
void Segment_Set_Decimal(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].decimals |= segment_decimal[digit.digit];
20002bc8:	00621025 	or	v0,v1,v0
20002bcc:	ae220008 	sw	v0,8(s1)
}
20002bd0:	8fb00014 	lw	s0,20(sp)
20002bd4:	8fb10018 	lw	s1,24(sp)
20002bd8:	03e00008 	jr	ra
20002bdc:	27bd0020 	addiu	sp,sp,32

20002be0 <Segment_Write>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Write(const segment_digit_t digit, const uint8_t value)
{
20002be0:	27bdffe0 	addiu	sp,sp,-32
20002be4:	afb10014 	sw	s1,20(sp)
20002be8:	afb00010 	sw	s0,16(sp)
20002bec:	3091ffff 	andi	s1,a0,0xffff
20002bf0:	309000ff 	andi	s0,a0,0xff
20002bf4:	afb20018 	sw	s2,24(sp)
20002bf8:	afbf001c 	sw	ra,28(sp)
20002bfc:	a7a40020 	sh	a0,32(sp)
20002c00:	30b200ff 	andi	s2,a1,0xff
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002c04:	12000005 	beqz	s0,20002c1c <Segment_Write+0x3c>
20002c08:	00118a02 	srl	s1,s1,0x8
20002c0c:	3c044000 	lui	a0,0x4000
20002c10:	24840000 	addiu	a0,a0,0
20002c14:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002c18:	24050041 	li	a1,65
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002c1c:	2e220004 	sltiu	v0,s1,4
20002c20:	14400006 	bnez	v0,20002c3c <Segment_Write+0x5c>
20002c24:	3c024000 	lui	v0,0x4000
20002c28:	3c044000 	lui	a0,0x4000
20002c2c:	24840000 	addiu	a0,a0,0
20002c30:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002c34:	24050042 	li	a1,66

	segment_register[digit.segment].values &= ~segment_value[digit.digit];
20002c38:	3c024000 	lui	v0,0x4000
20002c3c:	00118880 	sll	s1,s1,0x2
20002c40:	24420038 	addiu	v0,v0,56
20002c44:	3c038000 	lui	v1,0x8000
20002c48:	02221021 	addu	v0,s1,v0
20002c4c:	34630900 	ori	v1,v1,0x900
20002c50:	00108200 	sll	s0,s0,0x8
20002c54:	02038021 	addu	s0,s0,v1
20002c58:	8c420000 	lw	v0,0(v0)
20002c5c:	8e030004 	lw	v1,4(s0)
20002c60:	00021027 	nor	v0,zero,v0
20002c64:	00431024 	and	v0,v0,v1
20002c68:	ae020004 	sw	v0,4(s0)
	segment_register[digit.segment].values |= (value << (digit.digit * 4));
20002c6c:	8e020004 	lw	v0,4(s0)
20002c70:	02328804 	sllv	s1,s2,s1
}
20002c74:	8fbf001c 	lw	ra,28(sp)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].values &= ~segment_value[digit.digit];
	segment_register[digit.segment].values |= (value << (digit.digit * 4));
20002c78:	02228825 	or	s1,s1,v0
20002c7c:	ae110004 	sw	s1,4(s0)
}
20002c80:	8fb20018 	lw	s2,24(sp)
20002c84:	8fb10014 	lw	s1,20(sp)
20002c88:	8fb00010 	lw	s0,16(sp)
20002c8c:	03e00008 	jr	ra
20002c90:	27bd0020 	addiu	sp,sp,32

20002c94 <Segment_Enable>:
											(1 << 2), (1 << 3) };

///////////////////////////////////////////////////////////////////////////////

void Segment_Enable(const segment_digit_t digit)
{
20002c94:	27bdffe0 	addiu	sp,sp,-32
20002c98:	afb10018 	sw	s1,24(sp)
20002c9c:	afb00014 	sw	s0,20(sp)
20002ca0:	309100ff 	andi	s1,a0,0xff
20002ca4:	3090ffff 	andi	s0,a0,0xffff
20002ca8:	afbf001c 	sw	ra,28(sp)
20002cac:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002cb0:	12200005 	beqz	s1,20002cc8 <Segment_Enable+0x34>
20002cb4:	00108202 	srl	s0,s0,0x8
20002cb8:	3c044000 	lui	a0,0x4000
20002cbc:	24840000 	addiu	a0,a0,0
20002cc0:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002cc4:	2405002d 	li	a1,45
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002cc8:	2e020004 	sltiu	v0,s0,4
20002ccc:	14400006 	bnez	v0,20002ce8 <Segment_Enable+0x54>
20002cd0:	3c028000 	lui	v0,0x8000
20002cd4:	3c044000 	lui	a0,0x4000
20002cd8:	24840000 	addiu	a0,a0,0
20002cdc:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002ce0:	2405002e 	li	a1,46

	segment_register[digit.segment].enabled |= segment_enabled[digit.digit];
20002ce4:	3c028000 	lui	v0,0x8000
20002ce8:	34420900 	ori	v0,v0,0x900
20002cec:	00118a00 	sll	s1,s1,0x8
20002cf0:	02228821 	addu	s1,s1,v0
20002cf4:	3c024000 	lui	v0,0x4000
20002cf8:	24420048 	addiu	v0,v0,72
20002cfc:	00108080 	sll	s0,s0,0x2
20002d00:	02028021 	addu	s0,s0,v0
20002d04:	8e230000 	lw	v1,0(s1)
20002d08:	8e020000 	lw	v0,0(s0)
}
20002d0c:	8fbf001c 	lw	ra,28(sp)
void Segment_Enable(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].enabled |= segment_enabled[digit.digit];
20002d10:	00621025 	or	v0,v1,v0
20002d14:	ae220000 	sw	v0,0(s1)
}
20002d18:	8fb00014 	lw	s0,20(sp)
20002d1c:	8fb10018 	lw	s1,24(sp)
20002d20:	03e00008 	jr	ra
20002d24:	27bd0020 	addiu	sp,sp,32

20002d28 <Device_Add>:
20002d28:	3c034000 	lui	v1,0x4000
20002d2c:	8c6501c8 	lw	a1,456(v1)
20002d30:	00000000 	nop
20002d34:	14a00004 	bnez	a1,20002d48 <Device_Add+0x20>
20002d38:	2402ffff 	li	v0,-1
20002d3c:	ac6401c8 	sw	a0,456(v1)
20002d40:	00001021 	move	v0,zero
20002d44:	3c034000 	lui	v1,0x4000
20002d48:	246301c8 	addiu	v1,v1,456
20002d4c:	8c650004 	lw	a1,4(v1)
20002d50:	00000000 	nop
20002d54:	14a00003 	bnez	a1,20002d64 <Device_Add+0x3c>
20002d58:	00000000 	nop
20002d5c:	ac640004 	sw	a0,4(v1)
20002d60:	24020001 	li	v0,1
20002d64:	3c034000 	lui	v1,0x4000
20002d68:	246301c8 	addiu	v1,v1,456
20002d6c:	8c650008 	lw	a1,8(v1)
20002d70:	00000000 	nop
20002d74:	14a00003 	bnez	a1,20002d84 <Device_Add+0x5c>
20002d78:	00000000 	nop
20002d7c:	ac640008 	sw	a0,8(v1)
20002d80:	24020002 	li	v0,2
20002d84:	3c034000 	lui	v1,0x4000
20002d88:	246301c8 	addiu	v1,v1,456
20002d8c:	8c65000c 	lw	a1,12(v1)
20002d90:	00000000 	nop
20002d94:	14a00003 	bnez	a1,20002da4 <Device_Add+0x7c>
20002d98:	00000000 	nop
20002d9c:	ac64000c 	sw	a0,12(v1)
20002da0:	24020003 	li	v0,3
20002da4:	03e00008 	jr	ra
20002da8:	00000000 	nop
