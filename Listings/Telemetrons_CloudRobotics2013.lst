
Telemetrons_CloudRobotics2013.elf:     file format elf32-littlemips


Disassembly of section .text:

20000000 <_text>:
   .extern _etext
   .extern _ebss
   .extern Handle_Interrupts

   .set noreorder
		nop
20000000:	00000000 	nop
        j _startup            # Reset vector
20000004:	08000005 	j	20000014 <_startup>
        nop
20000008:	00000000 	nop

        j Handler            # Interrupt vector
2000000c:	08000752 	j	20001d48 <Handler>
        nop
20000010:	00000000 	nop

20000014 <_startup>:

   .func   _startup
_startup:                     # Start of code section
/* Set global pointer register */
        la $28, _gp
20000014:	3c1c4000 	lui	gp,0x4000
20000018:	279c01a0 	addiu	gp,gp,416

/* Set the stack pointer */
        la $t0, USR_Stk_Base_Val
2000001c:	3c084000 	lui	t0,0x4000
20000020:	35083e00 	ori	t0,t0,0x3e00
        move $sp, $t0
20000024:	0100e821 	move	sp,t0

        mtc0 $sp, $25         # Save CP0 Status Reg
20000028:	409dc800 	mtc0	sp,$25

/* Fill the stack */
        la $3, Top_Stack - 4
2000002c:	3c034000 	lui	v1,0x4000
20000030:	34633ffc 	ori	v1,v1,0x3ffc
        la $4, Top_Stack -IRQ_Stk -USR_Stk
20000034:	3c044000 	lui	a0,0x4000
20000038:	34843600 	ori	a0,a0,0x3600
        la $5, 0xDEC0ADDE
2000003c:	3c05dec0 	lui	a1,0xdec0
20000040:	34a5adde 	ori	a1,a1,0xadde

20000044 <Stk_fill>:
Stk_fill:
		sw $5, 0($4)
20000044:	ac850000 	sw	a1,0(a0)
		slt $2, $4, $3
20000048:	0083102a 	slt	v0,a0,v1
		bnez $2, Stk_fill
2000004c:	1440fffd 	bnez	v0,20000044 <Stk_fill>
		addiu $4, $4, 4
20000050:	24840004 	addiu	a0,a0,4
/* End of stack-filler */

		/* Special value at the bottom of the interrupt stack */
		la $4, Top_Stack -IRQ_Stk
20000054:	3c044000 	lui	a0,0x4000
20000058:	34843e00 	ori	a0,a0,0x3e00
		la $5, INT_Stk_Val
2000005c:	3c054000 	lui	a1,0x4000
20000060:	24a50134 	addiu	a1,a1,308
		lw $5, 0($5)
20000064:	8ca50000 	lw	a1,0(a1)
		nop
20000068:	00000000 	nop
		sw $5, 0($4)
2000006c:	ac850000 	sw	a1,0(a0)

		/* Special value at the bottom of the user stack */
		la $4, Top_Stack -IRQ_Stk -USR_Stk
20000070:	3c044000 	lui	a0,0x4000
20000074:	34843600 	ori	a0,a0,0x3600
		la $5, USR_Stk_Val
20000078:	3c054000 	lui	a1,0x4000
2000007c:	24a50130 	addiu	a1,a1,304
		lw $5, 0($5)
20000080:	8ca50000 	lw	a1,0(a1)
		nop
20000084:	00000000 	nop
		sw $5, 0($4)
20000088:	ac850000 	sw	a1,0(a0)

        la $4, _etext
2000008c:	3c042000 	lui	a0,0x2000
20000090:	24842fa8 	addiu	a0,a0,12200
        la $5, _text
20000094:	3c052000 	lui	a1,0x2000
20000098:	24a50000 	addiu	a1,a1,0
        subu $4, $4, $5
2000009c:	00852023 	subu	a0,a0,a1
        la $5, _edata
200000a0:	3c054000 	lui	a1,0x4000
200000a4:	24a501a0 	addiu	a1,a1,416
        la $6, _data
200000a8:	3c064000 	lui	a2,0x4000
200000ac:	24c60000 	addiu	a2,a2,0

200000b0 <Data_copy>:
Data_copy:
        lw $2, 0($4)
200000b0:	8c820000 	lw	v0,0(a0)
        nop
200000b4:	00000000 	nop
        slt $3, $6, $5
200000b8:	00c5182a 	slt	v1,a2,a1
        sw $2, 0($6)
200000bc:	acc20000 	sw	v0,0(a2)
        addiu $6, $6, 4
200000c0:	24c60004 	addiu	a2,a2,4
        bnez  $3, Data_copy
200000c4:	1460fffa 	bnez	v1,200000b0 <Data_copy>
        addiu $4, $4, 4
200000c8:	24840004 	addiu	a0,a0,4

/* Clear .bss section (Zero init) */
        la $4, _bss   # Clear BSS Segment
200000cc:	3c044000 	lui	a0,0x4000
200000d0:	248401a0 	addiu	a0,a0,416
        la $5, _ebss  # Clear BSS Segment
200000d4:	3c054000 	lui	a1,0x4000
200000d8:	24a509d0 	addiu	a1,a1,2512

200000dc <BSS_clear>:
BSS_clear:
        sw  $0, 0($4)
200000dc:	ac800000 	sw	zero,0(a0)
        slt $3, $4, $5
200000e0:	0085182a 	slt	v1,a0,a1
        bnez  $3, BSS_clear
200000e4:	1460fffd 	bnez	v1,200000dc <BSS_clear>
        addiu $4, $4, 4
200000e8:	24840004 	addiu	a0,a0,4

        la $4, _stext
200000ec:	3c040000 	lui	a0,0x0
200000f0:	24840000 	addiu	a0,a0,0
        la $5, _etext
200000f4:	3c052000 	lui	a1,0x2000
200000f8:	24a52fa8 	addiu	a1,a1,12200
        la $6, _text
200000fc:	3c062000 	lui	a2,0x2000
20000100:	24c60000 	addiu	a2,a2,0

20000104 <Code_copy>:
Code_copy:
        lw $2, 0($4)
20000104:	8c820000 	lw	v0,0(a0)
        nop
20000108:	00000000 	nop
        slt $3, $6, $5
2000010c:	00c5182a 	slt	v1,a2,a1
        sw $2, 0($6)
20000110:	acc20000 	sw	v0,0(a2)
        addiu $6, $6, 4
20000114:	24c60004 	addiu	a2,a2,4
        bnez  $3, Code_copy
20000118:	1460fffa 	bnez	v1,20000104 <Code_copy>
        addiu $4, $4, 4
2000011c:	24840004 	addiu	a0,a0,4


/* Enable system interrupts */
        mfc0 $4, $12         # Read CP0 Status Reg
20000120:	40046000 	mfc0	a0,c0_sr
        nop
20000124:	00000000 	nop
        ori $4, $4, 0x700    # Set IE and IRQ = 7
20000128:	34840700 	ori	a0,a0,0x700
        nop
2000012c:	00000000 	nop
        mtc0 $4, $12         # Save CP0 Status Reg
20000130:	40846000 	mtc0	a0,c0_sr
        nop
20000134:	00000000 	nop
        
        la $4, 0xFF00
20000138:	3404ff00 	li	a0,0xff00
        nop
2000013c:	00000000 	nop
        mtc0 $4, $13
20000140:	40846800 	mtc0	a0,c0_cause
        jalr $t0
		nop
#endif

/* Finally, start running the C code - branch to main() */
		la $t0, main
20000144:	3c082000 	lui	t0,0x2000
20000148:	25080160 	addiu	t0,t0,352
        jalr $t0        # Call main()
2000014c:	0100f809 	jalr	t0
        nop
20000150:	00000000 	nop

20000154 <_exit>:

	.global _exit
_exit:                  # Halt if main returns
        b   _exit
20000154:	1000ffff                                ....

20000158 <DEBUG_Assert_Failed>:
 *
 * \param[in]	file	The name of the file where the assertion failed.
 * \param[in]	line	The line number where the assertion failed.
 */
void DEBUG_Assert_Failed(TTE_UNUSED char* file, TTE_UNUSED int line)
{
20000158:	08000056 	j	20000158 <DEBUG_Assert_Failed>
2000015c:	00000000 	nop

20000160 <main>:
 *
 * This function should never exit, as embedded systems do not have an
 * operating system to return to.
 */
int main(void)
{
20000160:	27bdffe8 	addiu	sp,sp,-24
20000164:	afbf0014 	sw	ra,20(sp)
 * @param
 */
TTE_ALWAYS_INLINE
static inline void Target_Mapping_Init(void)
{
	Device_Add(NULL);
20000168:	0c000bc9 	jal	20002f24 <Device_Add>
2000016c:	00002021 	move	a0,zero
	return 0;
#endif

	Target_Mapping_Init();

	Scheduler_Init(Config_Tick_Period);
20000170:	0c000896 	jal	20002258 <Scheduler_Init>
20000174:	240403e8 	li	a0,1000
	Tasks_Init();
20000178:	0c000066 	jal	20000198 <Tasks_Init>
2000017c:	00000000 	nop

	Scheduler_Start();
20000180:	0c00088c 	jal	20002230 <Scheduler_Start>
20000184:	00000000 	nop

	while (TRUE)
	{
		Scheduler_Dispatch();
20000188:	0c00082e 	jal	200020b8 <Scheduler_Dispatch>
2000018c:	00000000 	nop
20000190:	08000062 	j	20000188 <main+0x28>
20000194:	00000000 	nop

20000198 <Tasks_Init>:

/**
 * Initialise all hardware for all tasks.
 */
void Tasks_Init(void)
{
20000198:	27bdffe8 	addiu	sp,sp,-24
2000019c:	afbf0014 	sw	ra,20(sp)
	Flashing_LED_Init();
200001a0:	0c00068d 	jal	20001a34 <Flashing_LED_Init>
200001a4:	00000000 	nop
	System_Control_Init();
200001a8:	0c000149 	jal	20000524 <System_Control_Init>
200001ac:	00000000 	nop
	Read_Enc_Init();
200001b0:	0c00021a 	jal	20000868 <Read_Enc_Init>
200001b4:	00000000 	nop
	Motor_Right_Init();
200001b8:	0c00036d 	jal	20000db4 <Motor_Right_Init>
200001bc:	00000000 	nop
	Motor_Left_Init();
200001c0:	0c000424 	jal	20001090 <Motor_Left_Init>
200001c4:	00000000 	nop
	Course_Corrector_Init();
200001c8:	0c0006c6 	jal	20001b18 <Course_Corrector_Init>
200001cc:	00000000 	nop
	CAN_relay_Init();
200001d0:	0c0006e0 	jal	20001b80 <CAN_relay_Init>
200001d4:	00000000 	nop
	Message_Sender_Init();
200001d8:	0c000661 	jal	20001984 <Message_Sender_Init>
200001dc:	00000000 	nop
	object_detection_Init();
}
200001e0:	8fbf0014 	lw	ra,20(sp)
	Motor_Right_Init();
	Motor_Left_Init();
	Course_Corrector_Init();
	CAN_relay_Init();
	Message_Sender_Init();
	object_detection_Init();
200001e4:	0800007b 	j	200001ec <object_detection_Init>
200001e8:	27bd0018 	addiu	sp,sp,24

200001ec <object_detection_Init>:
 * Initialisation for the object_detection package.
 * This will be called from Tasks_Init by default.
 */
void object_detection_Init(void)
{
	objectFollower = Fd;
200001ec:	24020001 	li	v0,1
	nextMove = Fd;
200001f0:	af8200f4 	sw	v0,244(gp)
 * Initialisation for the object_detection package.
 * This will be called from Tasks_Init by default.
 */
void object_detection_Init(void)
{
	objectFollower = Fd;
200001f4:	af8200f8 	sw	v0,248(gp)
	nextMove = Fd;
	avoidance = STRAIGHT;
200001f8:	af8000fc 	sw	zero,252(gp)
	lastAvoidance = STRAIGHT;
}
200001fc:	03e00008 	jr	ra
20000200:	af800100 	sw	zero,256(gp)

20000204 <object_detection_Update>:
void object_detection_Update(void)
{
	static uint16_t stop = 0;
	Bool IRFlag = False;

	switch(avoidance)
20000204:	8f8200fc 	lw	v0,252(gp)
20000208:	24040002 	li	a0,2
2000020c:	10440080 	beq	v0,a0,20000410 <object_detection_Update+0x20c>
20000210:	2c430003 	sltiu	v1,v0,3
20000214:	10600008 	beqz	v1,20000238 <object_detection_Update+0x34>
20000218:	24030004 	li	v1,4
2000021c:	1040000f 	beqz	v0,2000025c <object_detection_Update+0x58>
20000220:	24050001 	li	a1,1
20000224:	24030001 	li	v1,1
20000228:	144300bc 	bne	v0,v1,2000051c <object_detection_Update+0x318>
2000022c:	3c034000 	lui	v1,0x4000
			}
		}

		break;
	case AVOID_L:
		movement_G = Rt;
20000230:	080000fb 	j	200003ec <object_detection_Update+0x1e8>
20000234:	24050004 	li	a1,4
void object_detection_Update(void)
{
	static uint16_t stop = 0;
	Bool IRFlag = False;

	switch(avoidance)
20000238:	10430099 	beq	v0,v1,200004a0 <object_detection_Update+0x29c>
2000023c:	2c430004 	sltiu	v1,v0,4
20000240:	14600082 	bnez	v1,2000044c <object_detection_Update+0x248>
20000244:	24040003 	li	a0,3
20000248:	24030005 	li	v1,5
2000024c:	144300b3 	bne	v0,v1,2000051c <object_detection_Update+0x318>
20000250:	00000000 	nop
20000254:	0800013e 	j	200004f8 <object_detection_Update+0x2f4>
20000258:	00000000 	nop
	{
	case STRAIGHT:
		movement_G = Fd;

		if((sensorReadings.IRLeft-sensorReadings.IRRight > IR_NOISE)||(sensorReadings.IRRight-sensorReadings.IRLeft > IR_NOISE))
2000025c:	3c024000 	lui	v0,0x4000
20000260:	244603dc 	addiu	a2,v0,988
20000264:	8c4303dc 	lw	v1,988(v0)
20000268:	8cc20004 	lw	v0,4(a2)
2000026c:	00000000 	nop
20000270:	00623823 	subu	a3,v1,v0
20000274:	2ce70006 	sltiu	a3,a3,6
20000278:	10e00018 	beqz	a3,200002dc <object_detection_Update+0xd8>
2000027c:	af8500ec 	sw	a1,236(gp)
20000280:	00433823 	subu	a3,v0,v1
20000284:	2ce70006 	sltiu	a3,a3,6
20000288:	10e00014 	beqz	a3,200002dc <object_detection_Update+0xd8>
2000028c:	00000000 	nop
		{
			IRFlag = True;
		}
		else if((avoidance != AVOID_L) && (avoidance != AVOID_R) && ((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > US_NOISE))&&(nextMove == Fd))
20000290:	8cc60008 	lw	a2,8(a2)
20000294:	00000000 	nop
20000298:	24c6fff0 	addiu	a2,a2,-16
2000029c:	2cc6000b 	sltiu	a2,a2,11
200002a0:	10c00010 	beqz	a2,200002e4 <object_detection_Update+0xe0>
200002a4:	00000000 	nop
200002a8:	8f8600f4 	lw	a2,244(gp)
200002ac:	00000000 	nop
200002b0:	14c5000c 	bne	a2,a1,200002e4 <object_detection_Update+0xe0>
200002b4:	00000000 	nop
		{
			if(lastAvoidance == STRAIGHT)
200002b8:	8f850100 	lw	a1,256(gp)
200002bc:	00000000 	nop
200002c0:	14a00002 	bnez	a1,200002cc <object_detection_Update+0xc8>
200002c4:	00000000 	nop
			{
				lastAvoidance = AVOID_R;
200002c8:	af840100 	sw	a0,256(gp)
			}
			avoidance = lastAvoidance;
200002cc:	8f840100 	lw	a0,256(gp)

			stop = 0;
200002d0:	a7800000 	sh	zero,0(gp)
		{
			if(lastAvoidance == STRAIGHT)
			{
				lastAvoidance = AVOID_R;
			}
			avoidance = lastAvoidance;
200002d4:	080000b9 	j	200002e4 <object_detection_Update+0xe0>
200002d8:	af8400fc 	sw	a0,252(gp)

			stop = 0;
200002dc:	080000ba 	j	200002e8 <object_detection_Update+0xe4>
200002e0:	24040001 	li	a0,1
200002e4:	00002021 	move	a0,zero
		}

		if((avoidance == STRAIGHT) && (lastAvoidance == AVOID_L) && (sensorReadings.IRLeft >= IR_MAX))
200002e8:	8f8500fc 	lw	a1,252(gp)
200002ec:	00000000 	nop
200002f0:	14a00021 	bnez	a1,20000378 <object_detection_Update+0x174>
200002f4:	24060001 	li	a2,1
200002f8:	8f850100 	lw	a1,256(gp)
200002fc:	00000000 	nop
20000300:	14a6000e 	bne	a1,a2,2000033c <object_detection_Update+0x138>
20000304:	00000000 	nop
20000308:	2c650017 	sltiu	a1,v1,23
2000030c:	14a0001a 	bnez	a1,20000378 <object_detection_Update+0x174>
20000310:	00000000 	nop
		{
			if(++stop >= 13*HAMMER_TIME)
20000314:	97820000 	lhu	v0,0(gp)
20000318:	00000000 	nop
2000031c:	24420001 	addiu	v0,v0,1
20000320:	3042ffff 	andi	v0,v0,0xffff
20000324:	2c43028a 	sltiu	v1,v0,650
20000328:	a7820000 	sh	v0,0(gp)
2000032c:	1060006f 	beqz	v1,200004ec <object_detection_Update+0x2e8>
20000330:	24020003 	li	v0,3
20000334:	08000147 	j	2000051c <object_detection_Update+0x318>
20000338:	00000000 	nop
			{
				avoidance = FOLLOW_L;
				stop = 0;
			}
		}
		else if((avoidance == STRAIGHT) && (lastAvoidance == AVOID_R) && (sensorReadings.IRRight >= IR_MAX))
2000033c:	24060002 	li	a2,2
20000340:	14a6000d 	bne	a1,a2,20000378 <object_detection_Update+0x174>
20000344:	2c450017 	sltiu	a1,v0,23
20000348:	14a0000b 	bnez	a1,20000378 <object_detection_Update+0x174>
2000034c:	00000000 	nop
		{
			if(++stop >= 13*HAMMER_TIME)
20000350:	97820000 	lhu	v0,0(gp)
20000354:	00000000 	nop
20000358:	24420001 	addiu	v0,v0,1
2000035c:	3042ffff 	andi	v0,v0,0xffff
20000360:	2c43028a 	sltiu	v1,v0,650
20000364:	a7820000 	sh	v0,0(gp)
20000368:	10600060 	beqz	v1,200004ec <object_detection_Update+0x2e8>
2000036c:	24020004 	li	v0,4
20000370:	08000147 	j	2000051c <object_detection_Update+0x318>
20000374:	00000000 	nop
			{
				avoidance = FOLLOW_R;
				stop = 0;
			}
		}
		else if(IRFlag == True)
20000378:	10800068 	beqz	a0,2000051c <object_detection_Update+0x318>
2000037c:	0062202b 	sltu	a0,v1,v0
		{
			stop = 0;

			if((sensorReadings.IRLeft < sensorReadings.IRRight) && ((sensorReadings.IRLeft < IR_MIN)||((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > US_NOISE))))
20000380:	1080000c 	beqz	a0,200003b4 <object_detection_Update+0x1b0>
20000384:	a7800000 	sh	zero,0(gp)
20000388:	2c640015 	sltiu	a0,v1,21
2000038c:	14800007 	bnez	a0,200003ac <object_detection_Update+0x1a8>
20000390:	3c044000 	lui	a0,0x4000
20000394:	8c8403e4 	lw	a0,996(a0)
20000398:	00000000 	nop
2000039c:	2484fff0 	addiu	a0,a0,-16
200003a0:	2c84000b 	sltiu	a0,a0,11
200003a4:	10800003 	beqz	a0,200003b4 <object_detection_Update+0x1b0>
200003a8:	00000000 	nop
			{
				avoidance = AVOID_L;
200003ac:	08000111 	j	20000444 <object_detection_Update+0x240>
200003b0:	24020001 	li	v0,1
			}
			else if((sensorReadings.IRLeft > sensorReadings.IRRight) && ((sensorReadings.IRRight < IR_MIN)||((sensorReadings.USFwd < US_MIN) && (sensorReadings.USFwd > US_NOISE))))
200003b4:	0043182b 	sltu	v1,v0,v1
200003b8:	10600058 	beqz	v1,2000051c <object_detection_Update+0x318>
200003bc:	2c420015 	sltiu	v0,v0,21
200003c0:	14400020 	bnez	v0,20000444 <object_detection_Update+0x240>
200003c4:	24020002 	li	v0,2
200003c8:	3c024000 	lui	v0,0x4000
200003cc:	8c4203e4 	lw	v0,996(v0)
200003d0:	00000000 	nop
200003d4:	2442fff0 	addiu	v0,v0,-16
200003d8:	2c42000b 	sltiu	v0,v0,11
200003dc:	1040004f 	beqz	v0,2000051c <object_detection_Update+0x318>
200003e0:	24020002 	li	v0,2
200003e4:	08000111 	j	20000444 <object_detection_Update+0x240>
200003e8:	00000000 	nop

		break;
	case AVOID_L:
		movement_G = Rt;
		lastAvoidance = AVOID_L;
		if((sensorReadings.IRLeft >= IR_MIN) && (sensorReadings.USFwd >= US_MIN))
200003ec:	8c6403dc 	lw	a0,988(v1)
200003f0:	00000000 	nop
200003f4:	2c840015 	sltiu	a0,a0,21
			}
		}

		break;
	case AVOID_L:
		movement_G = Rt;
200003f8:	af8500ec 	sw	a1,236(gp)
		lastAvoidance = AVOID_L;
200003fc:	af820100 	sw	v0,256(gp)
		if((sensorReadings.IRLeft >= IR_MIN) && (sensorReadings.USFwd >= US_MIN))
20000400:	1080000b 	beqz	a0,20000430 <object_detection_Update+0x22c>
20000404:	246303dc 	addiu	v1,v1,988
20000408:	08000147 	j	2000051c <object_detection_Update+0x318>
2000040c:	00000000 	nop
		}
		break;
	case AVOID_R:
		movement_G = Lf;
		lastAvoidance = AVOID_R;
		if((sensorReadings.IRRight >= IR_MIN) && (sensorReadings.USFwd >= US_MIN))
20000410:	3c034000 	lui	v1,0x4000
20000414:	246303dc 	addiu	v1,v1,988
20000418:	8c640004 	lw	a0,4(v1)
		{
			avoidance = WAIT;
		}
		break;
	case AVOID_R:
		movement_G = Lf;
2000041c:	24050003 	li	a1,3
		lastAvoidance = AVOID_R;
		if((sensorReadings.IRRight >= IR_MIN) && (sensorReadings.USFwd >= US_MIN))
20000420:	2c840015 	sltiu	a0,a0,21
		{
			avoidance = WAIT;
		}
		break;
	case AVOID_R:
		movement_G = Lf;
20000424:	af8500ec 	sw	a1,236(gp)
		lastAvoidance = AVOID_R;
		if((sensorReadings.IRRight >= IR_MIN) && (sensorReadings.USFwd >= US_MIN))
20000428:	1480003c 	bnez	a0,2000051c <object_detection_Update+0x318>
2000042c:	af820100 	sw	v0,256(gp)
20000430:	8c620008 	lw	v0,8(v1)
20000434:	00000000 	nop
20000438:	2c42001b 	sltiu	v0,v0,27
2000043c:	14400037 	bnez	v0,2000051c <object_detection_Update+0x318>
20000440:	24020005 	li	v0,5
		{
			avoidance = WAIT;
20000444:	03e00008 	jr	ra
20000448:	af8200fc 	sw	v0,252(gp)
		}
		break;
	case FOLLOW_L:
		movement_G = Lf;

		if(++stop >= 13*HAMMER_TIME)
2000044c:	97820000 	lhu	v0,0(gp)
20000450:	00000000 	nop
20000454:	24420001 	addiu	v0,v0,1
20000458:	3042ffff 	andi	v0,v0,0xffff
2000045c:	2c43028a 	sltiu	v1,v0,650
		{
			avoidance = WAIT;
		}
		break;
	case FOLLOW_L:
		movement_G = Lf;
20000460:	af8400ec 	sw	a0,236(gp)

		if(++stop >= 13*HAMMER_TIME)
20000464:	14600002 	bnez	v1,20000470 <object_detection_Update+0x26c>
20000468:	a7820000 	sh	v0,0(gp)
		{
			lastAvoidance = STRAIGHT;
2000046c:	af800100 	sw	zero,256(gp)
		}
		if((sensorReadings.IRLeft <= IR_MAX) || (lastAvoidance == STRAIGHT))
20000470:	3c024000 	lui	v0,0x4000
20000474:	8c4203dc 	lw	v0,988(v0)
20000478:	00000000 	nop
2000047c:	2c420018 	sltiu	v0,v0,24
20000480:	14400005 	bnez	v0,20000498 <object_detection_Update+0x294>
20000484:	24020005 	li	v0,5
20000488:	8f820100 	lw	v0,256(gp)
2000048c:	00000000 	nop
20000490:	14400022 	bnez	v0,2000051c <object_detection_Update+0x318>
20000494:	24020005 	li	v0,5
		{
			stop = 0;
			avoidance = WAIT;
20000498:	af8200fc 	sw	v0,252(gp)
		{
			lastAvoidance = STRAIGHT;
		}
		if((sensorReadings.IRLeft <= IR_MAX) || (lastAvoidance == STRAIGHT))
		{
			stop = 0;
2000049c:	a7800000 	sh	zero,0(gp)
		else
		break;
	case FOLLOW_R:
		movement_G = Rt;

		if(++stop >= 13*HAMMER_TIME)
200004a0:	97820000 	lhu	v0,0(gp)
			avoidance = WAIT;
		}
		else
		break;
	case FOLLOW_R:
		movement_G = Rt;
200004a4:	24040004 	li	a0,4

		if(++stop >= 13*HAMMER_TIME)
200004a8:	24420001 	addiu	v0,v0,1
200004ac:	3042ffff 	andi	v0,v0,0xffff
200004b0:	2c43028a 	sltiu	v1,v0,650
			avoidance = WAIT;
		}
		else
		break;
	case FOLLOW_R:
		movement_G = Rt;
200004b4:	af8400ec 	sw	a0,236(gp)

		if(++stop >= 13*HAMMER_TIME)
200004b8:	14600002 	bnez	v1,200004c4 <object_detection_Update+0x2c0>
200004bc:	a7820000 	sh	v0,0(gp)
		{
			lastAvoidance = STRAIGHT;
200004c0:	af800100 	sw	zero,256(gp)
		}
		if((sensorReadings.IRRight <= IR_MAX) || (lastAvoidance == STRAIGHT))
200004c4:	3c024000 	lui	v0,0x4000
200004c8:	8c4203e0 	lw	v0,992(v0)
200004cc:	00000000 	nop
200004d0:	2c420018 	sltiu	v0,v0,24
200004d4:	14400005 	bnez	v0,200004ec <object_detection_Update+0x2e8>
200004d8:	24020005 	li	v0,5
200004dc:	8f820100 	lw	v0,256(gp)
200004e0:	00000000 	nop
200004e4:	1440000d 	bnez	v0,2000051c <object_detection_Update+0x318>
200004e8:	24020005 	li	v0,5
		{
			stop = 0;
			avoidance = WAIT;
200004ec:	af8200fc 	sw	v0,252(gp)
		{
			lastAvoidance = STRAIGHT;
		}
		if((sensorReadings.IRRight <= IR_MAX) || (lastAvoidance == STRAIGHT))
		{
			stop = 0;
200004f0:	03e00008 	jr	ra
200004f4:	a7800000 	sh	zero,0(gp)
			avoidance = WAIT;
		}
		break;
	case WAIT:
		movement_G = Stp;
		if(++stop >= HAMMER_TIME)
200004f8:	97820000 	lhu	v0,0(gp)
			stop = 0;
			avoidance = WAIT;
		}
		break;
	case WAIT:
		movement_G = Stp;
200004fc:	af8000ec 	sw	zero,236(gp)
		if(++stop >= HAMMER_TIME)
20000500:	24420001 	addiu	v0,v0,1
20000504:	3042ffff 	andi	v0,v0,0xffff
20000508:	2c430032 	sltiu	v1,v0,50
2000050c:	14600003 	bnez	v1,2000051c <object_detection_Update+0x318>
20000510:	a7820000 	sh	v0,0(gp)
		{
			avoidance = STRAIGHT;
20000514:	af8000fc 	sw	zero,252(gp)
			stop = 0;
20000518:	a7800000 	sh	zero,0(gp)
2000051c:	03e00008 	jr	ra
20000520:	00000000 	nop

20000524 <System_Control_Init>:
 * This will be called from Tasks_Init by default.
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
20000524:	3c028000 	lui	v0,0x8000
20000528:	34430500 	ori	v1,v0,0x500
2000052c:	8c650004 	lw	a1,4(v1)
20000530:	2404fffe 	li	a0,-2
20000534:	00a42024 	and	a0,a1,a0
20000538:	ac640004 	sw	a0,4(v1)
2000053c:	8c640004 	lw	a0,4(v1)
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
20000540:	34420200 	ori	v0,v0,0x200
 * This will be called from Tasks_Init by default.
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
20000544:	ac640004 	sw	a0,4(v1)
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);
20000548:	8c650004 	lw	a1,4(v1)
2000054c:	2404fffd 	li	a0,-3
20000550:	00a42024 	and	a0,a1,a0
20000554:	ac640004 	sw	a0,4(v1)
20000558:	8c650004 	lw	a1,4(v1)

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
2000055c:	2404feff 	li	a0,-257
 */
void System_Control_Init(void)
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);
20000560:	ac650004 	sw	a1,4(v1)

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
20000564:	8c450004 	lw	a1,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
20000568:	2406ffbf 	li	a2,-65
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
2000056c:	00a42824 	and	a1,a1,a0
20000570:	ac450004 	sw	a1,4(v0)
20000574:	8c470004 	lw	a3,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
20000578:	2405ff7f 	li	a1,-129
{
	/* Port initialisation */
	GPIO_Set_Direction(Red_Cord_SW, GPIO_INPUT);
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
2000057c:	34e70100 	ori	a3,a3,0x100
20000580:	ac470004 	sw	a3,4(v0)
	GPIO_Write(Error_Lamp, GPIO_LOW);
20000584:	8c470000 	lw	a3,0(v0)
20000588:	00000000 	nop
2000058c:	00e42024 	and	a0,a3,a0
20000590:	ac440000 	sw	a0,0(v0)
20000594:	8c440000 	lw	a0,0(v0)
20000598:	00000000 	nop
2000059c:	ac440000 	sw	a0,0(v0)

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
200005a0:	8c470004 	lw	a3,4(v0)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
200005a4:	3c040080 	lui	a0,0x80
	GPIO_Set_Direction(Blue_Cord_SW, GPIO_INPUT);

	GPIO_Set_Direction(Error_Lamp, GPIO_OUTPUT);
	GPIO_Write(Error_Lamp, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Rd, GPIO_OUTPUT);
200005a8:	00e63824 	and	a3,a3,a2
200005ac:	ac470004 	sw	a3,4(v0)
200005b0:	8c470004 	lw	a3,4(v0)
200005b4:	00000000 	nop
200005b8:	34e70040 	ori	a3,a3,0x40
200005bc:	ac470004 	sw	a3,4(v0)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200005c0:	8c470000 	lw	a3,0(v0)
200005c4:	00000000 	nop
200005c8:	00e63024 	and	a2,a3,a2
200005cc:	ac460000 	sw	a2,0(v0)
200005d0:	8c460000 	lw	a2,0(v0)
200005d4:	00000000 	nop
200005d8:	ac460000 	sw	a2,0(v0)

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
200005dc:	8c460004 	lw	a2,4(v0)
200005e0:	00000000 	nop
200005e4:	00c53024 	and	a2,a2,a1
200005e8:	ac460004 	sw	a2,4(v0)
200005ec:	8c460004 	lw	a2,4(v0)
200005f0:	00000000 	nop
200005f4:	34c60080 	ori	a2,a2,0x80
200005f8:	ac460004 	sw	a2,4(v0)
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
200005fc:	8c460000 	lw	a2,0(v0)
20000600:	00000000 	nop
20000604:	00c52824 	and	a1,a2,a1
20000608:	ac450000 	sw	a1,0(v0)
2000060c:	8c450000 	lw	a1,0(v0)
20000610:	00000000 	nop
20000614:	ac450000 	sw	a1,0(v0)

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
20000618:	8c650004 	lw	a1,4(v1)
2000061c:	3c02ff7f 	lui	v0,0xff7f
20000620:	3442ffff 	ori	v0,v0,0xffff
20000624:	00a21024 	and	v0,a1,v0
20000628:	ac620004 	sw	v0,4(v1)
2000062c:	8c620004 	lw	v0,4(v1)
	GPIO_Write(KILL_ALL, GPIO_HIGH);

	/* State and orientation initialisation */
	System_Mode_G = Ready;
20000630:	af800104 	sw	zero,260(gp)
	GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
20000634:	00441025 	or	v0,v0,a0
20000638:	ac620004 	sw	v0,4(v1)
	GPIO_Write(KILL_ALL, GPIO_HIGH);
2000063c:	8c620000 	lw	v0,0(v1)

	/* State and orientation initialisation */
	System_Mode_G = Ready;
	debounce = 0;
20000640:	a3800108 	sb	zero,264(gp)

	GPIO_Set_Direction(Ready_Lamp_Bl, GPIO_OUTPUT);
	GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);

	GPIO_Set_Direction(KILL_ALL, GPIO_OUTPUT);
	GPIO_Write(KILL_ALL, GPIO_HIGH);
20000644:	ac620000 	sw	v0,0(v1)
20000648:	8c620000 	lw	v0,0(v1)
2000064c:	00000000 	nop
20000650:	00442025 	or	a0,v0,a0
20000654:	ac640000 	sw	a0,0(v1)

	/* State and orientation initialisation */
	System_Mode_G = Ready;
	debounce = 0;
}
20000658:	03e00008 	jr	ra
2000065c:	00000000 	nop

20000660 <System_Control_Update>:
/**
 * Main system mode control
 */
void System_Control_Update(void)
{
	switch(System_Mode_G)
20000660:	8f820104 	lw	v0,260(gp)
20000664:	24030002 	li	v1,2
20000668:	10430027 	beq	v0,v1,20000708 <System_Control_Update+0xa8>
2000066c:	2c440003 	sltiu	a0,v0,3
20000670:	10800007 	beqz	a0,20000690 <System_Control_Update+0x30>
20000674:	00000000 	nop
20000678:	1040000d 	beqz	v0,200006b0 <System_Control_Update+0x50>
2000067c:	24040001 	li	a0,1
20000680:	1444005f 	bne	v0,a0,20000800 <System_Control_Update+0x1a0>
20000684:	3c028000 	lui	v0,0x8000
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
20000688:	080001af 	j	200006bc <System_Control_Update+0x5c>
2000068c:	34420500 	ori	v0,v0,0x500
/**
 * Main system mode control
 */
void System_Control_Update(void)
{
	switch(System_Mode_G)
20000690:	24030003 	li	v1,3
20000694:	10430024 	beq	v0,v1,20000728 <System_Control_Update+0xc8>
20000698:	00000000 	nop
2000069c:	24030004 	li	v1,4
200006a0:	14430057 	bne	v0,v1,20000800 <System_Control_Update+0x1a0>
200006a4:	3c028000 	lui	v0,0x8000
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200006a8:	080001e8 	j	200007a0 <System_Control_Update+0x140>
200006ac:	34430500 	ori	v1,v0,0x500
	switch(System_Mode_G)
	{
	/* Wait for pull cord to determine direction */
	case Ready:

		movement_G = Fd;
200006b0:	24020001 	li	v0,1
200006b4:	080001c0 	j	20000700 <System_Control_Update+0xa0>
200006b8:	af8200ec 	sw	v0,236(gp)
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
200006bc:	8c440000 	lw	a0,0(v0)
200006c0:	00000000 	nop
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
200006c4:	30840001 	andi	a0,a0,0x1
200006c8:	10800065 	beqz	a0,20000860 <System_Control_Update+0x200>
200006cc:	00000000 	nop
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
				&&
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
200006d0:	8c420000 	lw	v0,0(v0)
200006d4:	00000000 	nop
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
200006d8:	30420002 	andi	v0,v0,0x2
200006dc:	10400060 	beqz	v0,20000860 <System_Control_Update+0x200>
200006e0:	00000000 	nop
				(GPIO_Get(Red_Cord_SW) == GPIO_HIGH)
				&&
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
				&&
				(++debounce > 100)
200006e4:	93820108 	lbu	v0,264(gp)
200006e8:	00000000 	nop
200006ec:	24420001 	addiu	v0,v0,1
200006f0:	304200ff 	andi	v0,v0,0xff
		System_Mode_G = Go;
		break;

	/* Wait for removal of pull cord to "Go" */
	case Set:
		if(
200006f4:	2c440065 	sltiu	a0,v0,101
200006f8:	1480003f 	bnez	a0,200007f8 <System_Control_Update+0x198>
200006fc:	a3820108 	sb	v0,264(gp)
				(GPIO_Get(Blue_Cord_SW) == GPIO_HIGH)
				&&
				(++debounce > 100)
		)
		{
			System_Mode_G = Go;
20000700:	03e00008 	jr	ra
20000704:	af830104 	sw	v1,260(gp)
		}
		break;

	/* Do nothing */
	case Go:
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000708:	3c028000 	lui	v0,0x8000
2000070c:	34420200 	ori	v0,v0,0x200
20000710:	8c430000 	lw	v1,0(v0)
		debounce = 0;
20000714:	a3800108 	sb	zero,264(gp)
		}
		break;

	/* Do nothing */
	case Go:
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000718:	ac430000 	sw	v1,0(v0)
2000071c:	8c430000 	lw	v1,0(v0)
20000720:	080001fd 	j	200007f4 <System_Control_Update+0x194>
20000724:	34630040 	ori	v1,v1,0x40
		debounce = 0;
		break;

	/* Signal E Stop */
	case E_Stop:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000728:	3c028000 	lui	v0,0x8000
2000072c:	34430500 	ori	v1,v0,0x500
20000730:	8c650000 	lw	a1,0(v1)
20000734:	3c04ff7f 	lui	a0,0xff7f
20000738:	3484ffff 	ori	a0,a0,0xffff
2000073c:	00a42024 	and	a0,a1,a0
20000740:	ac640000 	sw	a0,0(v1)
20000744:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Error_Lamp, GPIO_HIGH);
20000748:	34420200 	ori	v0,v0,0x200
		debounce = 0;
		break;

	/* Signal E Stop */
	case E_Stop:
		GPIO_Write(KILL_ALL, GPIO_LOW);
2000074c:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Error_Lamp, GPIO_HIGH);
20000750:	8c430000 	lw	v1,0(v0)
20000754:	00000000 	nop
20000758:	ac430000 	sw	v1,0(v0)
2000075c:	8c430000 	lw	v1,0(v0)
20000760:	00000000 	nop
20000764:	34630100 	ori	v1,v1,0x100
20000768:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
2000076c:	8c430000 	lw	v1,0(v0)
20000770:	00000000 	nop
20000774:	ac430000 	sw	v1,0(v0)
20000778:	8c430000 	lw	v1,0(v0)
2000077c:	00000000 	nop
20000780:	34630040 	ori	v1,v1,0x40
20000784:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
20000788:	8c430000 	lw	v1,0(v0)
2000078c:	00000000 	nop
20000790:	ac430000 	sw	v1,0(v0)
20000794:	8c430000 	lw	v1,0(v0)
20000798:	080001fd 	j	200007f4 <System_Control_Update+0x194>
2000079c:	34630080 	ori	v1,v1,0x80
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200007a0:	8c650000 	lw	a1,0(v1)
200007a4:	3c04ff7f 	lui	a0,0xff7f
200007a8:	3484ffff 	ori	a0,a0,0xffff
200007ac:	00a42024 	and	a0,a1,a0
200007b0:	ac640000 	sw	a0,0(v1)
200007b4:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200007b8:	34420200 	ori	v0,v0,0x200
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
		break;

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
200007bc:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200007c0:	8c440000 	lw	a0,0(v0)
200007c4:	2403ffbf 	li	v1,-65
200007c8:	00831824 	and	v1,a0,v1
200007cc:	ac430000 	sw	v1,0(v0)
200007d0:	8c430000 	lw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
		System_Mode_G = Ready; // TODO: Remove!
200007d4:	af800104 	sw	zero,260(gp)

	/* Signal Game Over */
	case Game_Over:
		GPIO_Write(KILL_ALL, GPIO_LOW);
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_LOW);
200007d8:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
200007dc:	8c440000 	lw	a0,0(v0)
200007e0:	2403ff7f 	li	v1,-129
200007e4:	00831824 	and	v1,a0,v1
200007e8:	ac430000 	sw	v1,0(v0)
200007ec:	8c430000 	lw	v1,0(v0)
200007f0:	00000000 	nop
200007f4:	ac430000 	sw	v1,0(v0)
		System_Mode_G = Ready; // TODO: Remove!
		break;
200007f8:	03e00008 	jr	ra
200007fc:	00000000 	nop

	default:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000800:	3c028000 	lui	v0,0x8000
20000804:	34430500 	ori	v1,v0,0x500
20000808:	8c650000 	lw	a1,0(v1)
2000080c:	3c04ff7f 	lui	a0,0xff7f
20000810:	3484ffff 	ori	a0,a0,0xffff
20000814:	00a42024 	and	a0,a1,a0
20000818:	ac640000 	sw	a0,0(v1)
2000081c:	8c640000 	lw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000820:	34420200 	ori	v0,v0,0x200
		GPIO_Write(Ready_Lamp_Bl, GPIO_LOW);
		System_Mode_G = Ready; // TODO: Remove!
		break;

	default:
		GPIO_Write(KILL_ALL, GPIO_LOW);
20000824:	ac640000 	sw	a0,0(v1)
		//GPIO_Set_Direction(KILL_ALL, GPIO_INPUT);
		GPIO_Write(Ready_Lamp_Rd, GPIO_HIGH);
20000828:	8c430000 	lw	v1,0(v0)
2000082c:	00000000 	nop
20000830:	ac430000 	sw	v1,0(v0)
20000834:	8c430000 	lw	v1,0(v0)
20000838:	00000000 	nop
2000083c:	34630040 	ori	v1,v1,0x40
20000840:	ac430000 	sw	v1,0(v0)
		GPIO_Write(Ready_Lamp_Bl, GPIO_HIGH);
20000844:	8c430000 	lw	v1,0(v0)
20000848:	00000000 	nop
2000084c:	ac430000 	sw	v1,0(v0)
20000850:	8c430000 	lw	v1,0(v0)
20000854:	00000000 	nop
20000858:	34630080 	ori	v1,v1,0x80
2000085c:	ac430000 	sw	v1,0(v0)
20000860:	03e00008 	jr	ra
20000864:	00000000 	nop

20000868 <Read_Enc_Init>:
 * Initialisation for the Read_Enc package.
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
20000868:	3c028000 	lui	v0,0x8000
2000086c:	34420500 	ori	v0,v0,0x500
20000870:	8c440004 	lw	a0,4(v0)
20000874:	2403fbff 	li	v1,-1025
20000878:	00831824 	and	v1,a0,v1
2000087c:	ac430004 	sw	v1,4(v0)
20000880:	8c430004 	lw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
20000884:	af800114 	sw	zero,276(gp)
 * Initialisation for the Read_Enc package.
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
20000888:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
2000088c:	8c440004 	lw	a0,4(v0)
20000890:	2403f7ff 	li	v1,-2049
20000894:	00831824 	and	v1,a0,v1
20000898:	ac430004 	sw	v1,4(v0)
2000089c:	8c430004 	lw	v1,4(v0)

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */
200008a0:	af800124 	sw	zero,292(gp)
 * This will be called from Tasks_Init by default.
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
200008a4:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
200008a8:	8c440004 	lw	a0,4(v0)
200008ac:	3c03fff7 	lui	v1,0xfff7
200008b0:	3463ffff 	ori	v1,v1,0xffff
200008b4:	00831824 	and	v1,a0,v1
200008b8:	ac430004 	sw	v1,4(v0)
200008bc:	8c430004 	lw	v1,4(v0)
	WheelCounts_Right_G = 0;

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
200008c0:	af800118 	sw	zero,280(gp)
 */
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
200008c4:	ac430004 	sw	v1,4(v0)
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
200008c8:	8c440004 	lw	a0,4(v0)
200008cc:	3c03fffb 	lui	v1,0xfffb
200008d0:	3463ffff 	ori	v1,v1,0xffff
200008d4:	00831824 	and	v1,a0,v1

	WheelCounts_Left_G = 0;
200008d8:	af800088 	sw	zero,136(gp)
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
200008dc:	ac430004 	sw	v1,4(v0)
200008e0:	8c430004 	lw	v1,4(v0)

	EncSignal_A[0] = 0;								/* Signal A from left encoder */
	EncSignal_B[0] = 0;								/* Signal B from left encoder */

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
	EncSignal_B[1] = 0;								/* Signal B from right encoder */
200008e4:	af800128 	sw	zero,296(gp)
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);

	WheelCounts_Left_G = 0;
	WheelCounts_Right_G = 0;
200008e8:	af8000c8 	sw	zero,200(gp)
void Read_Enc_Init(void)
{
	GPIO_Set_Direction(EncL_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncL_CH_B, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_A, GPIO_INPUT);
	GPIO_Set_Direction(EncR_CH_B, GPIO_INPUT);
200008ec:	ac430004 	sw	v1,4(v0)

	EncSignal_A[1] = 0;								/* Signal A from right encoder */
	EncSignal_B[1] = 0;								/* Signal B from right encoder */

	/* Left */
	RevCount[0] = 0;
200008f0:	af80011c 	sw	zero,284(gp)
	EncoderCount[0] = 0;
200008f4:	af80012c 	sw	zero,300(gp)
	WheelCount[0] = 0;
200008f8:	af80010c 	sw	zero,268(gp)

	/* Right */
	RevCount[1] = 0;
200008fc:	af800120 	sw	zero,288(gp)
	EncoderCount[1] = 0;
20000900:	af800130 	sw	zero,304(gp)
	WheelCount[1] = 0;
20000904:	af800110 	sw	zero,272(gp)

	bufferTime = 0;
}
20000908:	03e00008 	jr	ra
2000090c:	a3800134 	sb	zero,308(gp)

20000910 <Read_Enc_Update>:
/**
 * Reads the value of the Encoders
 */
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
20000910:	8f830104 	lw	v1,260(gp)
20000914:	24020002 	li	v0,2
20000918:	1462005d 	bne	v1,v0,20000a90 <Read_Enc_Update+0x180>
2000091c:	3c028000 	lui	v0,0x8000
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
20000920:	34420500 	ori	v0,v0,0x500
20000924:	8c450000 	lw	a1,0(v0)
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000928:	8c440000 	lw	a0,0(v0)

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
2000092c:	8c430000 	lw	v1,0(v0)
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000930:	8c420000 	lw	v0,0(v0)
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
20000934:	00052a82 	srl	a1,a1,0xa
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000938:	000422c2 	srl	a0,a0,0xb

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
2000093c:	00031cc2 	srl	v1,v1,0x13
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000940:	00021482 	srl	v0,v0,0x12
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
20000944:	30a50001 	andi	a1,a1,0x1
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000948:	30840001 	andi	a0,a0,0x1

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
2000094c:	30630001 	andi	v1,v1,0x1
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000950:	30420001 	andi	v0,v0,0x1
void Read_Enc_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Read signals from encoders */
		EncSignal_A[0] = GPIO_Get(EncL_CH_A);	/* Left_A;	Signal A from left encoder */
20000954:	af850114 	sw	a1,276(gp)
		EncSignal_B[0] = GPIO_Get(EncL_CH_B);	/* Left_B;	Signal B from left encoder */
20000958:	af840124 	sw	a0,292(gp)

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
2000095c:	af830118 	sw	v1,280(gp)
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */
20000960:	af820128 	sw	v0,296(gp)
20000964:	27840140 	addiu	a0,gp,320
20000968:	2783012c 	addiu	v1,gp,300
2000096c:	27860138 	addiu	a2,gp,312
20000970:	27890114 	addiu	t1,gp,276
20000974:	27880124 	addiu	t0,gp,292
20000978:	00002821 	move	a1,zero

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
		{
			if(Pulse_Flag[i] == High)
2000097c:	24020001 	li	v0,1
				}

				/* Full cycle detection when both signals dropped off */
				else if((EncSignal_A[i] == Low) && (EncSignal_B[i] == Low))
				{
					switch(WheelDirection[i])
20000980:	240a0002 	li	t2,2
				WheelDirection[i] = WheelDirection[i];
				Pulse_Flag[i] = Pulse_Flag[i];
			}

			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
20000984:	278e010c 	addiu	t6,gp,268
20000988:	278d011c 	addiu	t5,gp,284

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
2000098c:	240c0008 	li	t4,8
		{
			if(Pulse_Flag[i] == High)
20000990:	8c8b0000 	lw	t3,0(a0)
20000994:	8d270000 	lw	a3,0(t1)
20000998:	15620020 	bne	t3,v0,20000a1c <Read_Enc_Update+0x10c>
2000099c:	00000000 	nop
			{
				/* Direction detection on single signal drop-off */
				if(EncSignal_A[i] != EncSignal_B[i])
200009a0:	8d0b0000 	lw	t3,0(t0)
200009a4:	00000000 	nop
200009a8:	10eb0009 	beq	a3,t3,200009d0 <Read_Enc_Update+0xc0>
200009ac:	00000000 	nop
				{
					switch(EncSignal_A[i])
200009b0:	10e00005 	beqz	a3,200009c8 <Read_Enc_Update+0xb8>
200009b4:	00000000 	nop
200009b8:	14e20022 	bne	a3,v0,20000a44 <Read_Enc_Update+0x134>
200009bc:	00ad3821 	addu	a3,a1,t5
					{
						case High:
							WheelDirection[i] = Reverse;
							break;
200009c0:	08000291 	j	20000a44 <Read_Enc_Update+0x134>
200009c4:	acca0000 	sw	t2,0(a2)
						case Low:
							WheelDirection[i] = Forwards;
200009c8:	08000290 	j	20000a40 <Read_Enc_Update+0x130>
200009cc:	acc20000 	sw	v0,0(a2)
							break;
					}
				}

				/* Full cycle detection when both signals dropped off */
				else if((EncSignal_A[i] == Low) && (EncSignal_B[i] == Low))
200009d0:	14e0001c 	bnez	a3,20000a44 <Read_Enc_Update+0x134>
200009d4:	00ad3821 	addu	a3,a1,t5
				{
					switch(WheelDirection[i])
200009d8:	8cc70000 	lw	a3,0(a2)
200009dc:	00000000 	nop
200009e0:	10e20005 	beq	a3,v0,200009f8 <Read_Enc_Update+0xe8>
200009e4:	00000000 	nop
200009e8:	14ea000a 	bne	a3,t2,20000a14 <Read_Enc_Update+0x104>
200009ec:	00000000 	nop
200009f0:	08000281 	j	20000a04 <Read_Enc_Update+0xf4>
200009f4:	00000000 	nop
					{
						case Forwards:
							EncoderCount[i] ++;
200009f8:	8c670000 	lw	a3,0(v1)
200009fc:	08000284 	j	20000a10 <Read_Enc_Update+0x100>
20000a00:	24e70001 	addiu	a3,a3,1
							break;
						case Reverse:
							EncoderCount[i] --;
20000a04:	8c670000 	lw	a3,0(v1)
20000a08:	00000000 	nop
20000a0c:	24e7ffff 	addiu	a3,a3,-1
20000a10:	ac670000 	sw	a3,0(v1)
						case Off:
							break;
						default:
							break;
					}
					Pulse_Flag[i] = Low;
20000a14:	08000290 	j	20000a40 <Read_Enc_Update+0x130>
20000a18:	ac800000 	sw	zero,0(a0)
				}
			}
			/* Wait for both A and B to be high to raise Pulse_Flag */
			else if((EncSignal_A[i] == High) && (EncSignal_B[i] == High))
20000a1c:	14e20007 	bne	a3,v0,20000a3c <Read_Enc_Update+0x12c>
20000a20:	00000000 	nop
20000a24:	8d070000 	lw	a3,0(t0)
20000a28:	00000000 	nop
20000a2c:	14e20003 	bne	a3,v0,20000a3c <Read_Enc_Update+0x12c>
20000a30:	00000000 	nop
20000a34:	08000290 	j	20000a40 <Read_Enc_Update+0x130>
20000a38:	ac820000 	sw	v0,0(a0)
			/* ET Padding to reduce jitter */
			else
			{
				EncoderCount[i] = EncoderCount[i];
				WheelDirection[i] = WheelDirection[i];
				Pulse_Flag[i] = Pulse_Flag[i];
20000a3c:	ac8b0000 	sw	t3,0(a0)
			}

			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
20000a40:	00ad3821 	addu	a3,a1,t5
20000a44:	8ceb0000 	lw	t3,0(a3)
20000a48:	8c670000 	lw	a3,0(v1)
20000a4c:	000b59c0 	sll	t3,t3,0x7
20000a50:	01675821 	addu	t3,t3,a3
20000a54:	00ae3821 	addu	a3,a1,t6
20000a58:	24a50004 	addiu	a1,a1,4
20000a5c:	aceb0000 	sw	t3,0(a3)
20000a60:	24840004 	addiu	a0,a0,4
20000a64:	24630004 	addiu	v1,v1,4
20000a68:	24c60004 	addiu	a2,a2,4
20000a6c:	25290004 	addiu	t1,t1,4

		EncSignal_A[1] = GPIO_Get(EncR_CH_A);	/* Right_A;	Signal A from right encoder */
		EncSignal_B[1] = GPIO_Get(EncR_CH_B);	/* Right_B;	Signal B from right encoder */

		/* Loop through both sides */
		for(uint8_t i = 0; i <= 1; i ++)
20000a70:	14acffc7 	bne	a1,t4,20000990 <Read_Enc_Update+0x80>
20000a74:	25080004 	addiu	t0,t0,4
			/* Calculate total counts for wheel */
			WheelCount[i] = ((RevCount[i] * ROBOT_ENC_COUNTS_PER_REV) + EncoderCount[i]);
		}

		/* Output distance wheels have travelled to global variable */
		WheelCounts_Left_G = WheelCount[0];
20000a78:	8f82010c 	lw	v0,268(gp)
20000a7c:	00000000 	nop
20000a80:	af820088 	sw	v0,136(gp)
		WheelCounts_Right_G = WheelCount[1];
20000a84:	8f820110 	lw	v0,272(gp)
20000a88:	03e00008 	jr	ra
20000a8c:	af8200c8 	sw	v0,200(gp)
	}
	else
	{
		WheelCount[0] = 0;
20000a90:	af80010c 	sw	zero,268(gp)
		WheelCount[1] = 0;
20000a94:	03e00008 	jr	ra
20000a98:	af800110 	sw	zero,272(gp)

20000a9c <speedControlRight>:

uint16_t speedControlRight(Bool correctionL, Bool correctionR)
{
	static uint16_t speed;

	if(Right_motor_speed_G == 0)
20000a9c:	978200b2 	lhu	v0,178(gp)
20000aa0:	00000000 	nop
20000aa4:	14400002 	bnez	v0,20000ab0 <speedControlRight+0x14>
20000aa8:	2402000f 	li	v0,15
	{
		Right_motor_speed_G = CRAWL_SPEED;
20000aac:	a78200b2 	sh	v0,178(gp)
	}

	if((correctionL == False) && (correctionR == True))
20000ab0:	14800006 	bnez	a0,20000acc <speedControlRight+0x30>
20000ab4:	24020001 	li	v0,1
20000ab8:	14a2000c 	bne	a1,v0,20000aec <speedControlRight+0x50>
20000abc:	00000000 	nop
	{
		Right_motor_speed_G++;
20000ac0:	978200b2 	lhu	v0,178(gp)
20000ac4:	080002ba 	j	20000ae8 <speedControlRight+0x4c>
20000ac8:	24420001 	addiu	v0,v0,1
	}
	else if((correctionL == True) && (correctionR == False))
20000acc:	14820007 	bne	a0,v0,20000aec <speedControlRight+0x50>
20000ad0:	00000000 	nop
20000ad4:	14a00005 	bnez	a1,20000aec <speedControlRight+0x50>
20000ad8:	00000000 	nop
	{
		Right_motor_speed_G--;
20000adc:	978200b2 	lhu	v0,178(gp)
20000ae0:	00000000 	nop
20000ae4:	2442ffff 	addiu	v0,v0,-1
20000ae8:	a78200b2 	sh	v0,178(gp)
	}

	if(Right_motor_speed_G < (CRAWL_SPEED - CORRECTION_VALUE_LOWER))
20000aec:	978200b2 	lhu	v0,178(gp)
20000af0:	00000000 	nop
20000af4:	2c42000f 	sltiu	v0,v0,15
20000af8:	10400002 	beqz	v0,20000b04 <speedControlRight+0x68>
20000afc:	2402000f 	li	v0,15
	{
		Right_motor_speed_G = (CRAWL_SPEED - CORRECTION_VALUE_LOWER);
20000b00:	a78200b2 	sh	v0,178(gp)
	}

	if(Right_motor_speed_G > (CRAWL_SPEED + CORRECTION_VALUE_UPPER))
20000b04:	978200b2 	lhu	v0,178(gp)
20000b08:	00000000 	nop
20000b0c:	2c420012 	sltiu	v0,v0,18
20000b10:	14400003 	bnez	v0,20000b20 <speedControlRight+0x84>
20000b14:	00000000 	nop
	{
		Right_motor_speed_G = CRAWL_SPEED + CORRECTION_VALUE_UPPER;
20000b18:	24020011 	li	v0,17
20000b1c:	a78200b2 	sh	v0,178(gp)
	}

	return speed;
}
20000b20:	03e00008 	jr	ra
20000b24:	00001021 	move	v0,zero

20000b28 <visualsRt>:
	return result;
}

void visualsRt(void)
{
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000b28:	8f820104 	lw	v0,260(gp)
	result = (uint16_t)(speed);
	return result;
}

void visualsRt(void)
{
20000b2c:	27bdffe0 	addiu	sp,sp,-32
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000b30:	24030002 	li	v1,2
	result = (uint16_t)(speed);
	return result;
}

void visualsRt(void)
{
20000b34:	afbf001c 	sw	ra,28(sp)
20000b38:	afb10018 	sw	s1,24(sp)
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000b3c:	10430004 	beq	v0,v1,20000b50 <visualsRt+0x28>
20000b40:	afb00014 	sw	s0,20(sp)
20000b44:	24030004 	li	v1,4
20000b48:	14430009 	bne	v0,v1,20000b70 <visualsRt+0x48>
20000b4c:	00000000 	nop
	{
		Segment_Set_Decimal(displayA);
20000b50:	8f84ffdc 	lw	a0,-36(gp)
20000b54:	0c000b52 	jal	20002d48 <Segment_Set_Decimal>
20000b58:	00000000 	nop
		Segment_Set_Decimal(displayB);
20000b5c:	8f84ffe0 	lw	a0,-32(gp)
20000b60:	0c000b52 	jal	20002d48 <Segment_Set_Decimal>
20000b64:	00000000 	nop
	return result;
}

void visualsRt(void)
{
	if(System_Mode_G == Go || System_Mode_G == Game_Over)
20000b68:	080002e2 	j	20000b88 <visualsRt+0x60>
20000b6c:	00000000 	nop
		Segment_Set_Decimal(displayA);
		Segment_Set_Decimal(displayB);
	}
	else
	{
		Segment_Clear_Decimal(displayA);
20000b70:	8f84ffdc 	lw	a0,-36(gp)
20000b74:	0c000b2c 	jal	20002cb0 <Segment_Clear_Decimal>
20000b78:	00000000 	nop
		Segment_Clear_Decimal(displayB);
20000b7c:	8f84ffe0 	lw	a0,-32(gp)
20000b80:	0c000b2c 	jal	20002cb0 <Segment_Clear_Decimal>
20000b84:	00000000 	nop
	}

	if(
		Right_motor_direction_G == Forwards
		&& Right_motor_speed_G != 0
20000b88:	8f830084 	lw	v1,132(gp)
	{
		Segment_Clear_Decimal(displayA);
		Segment_Clear_Decimal(displayB);
	}

	if(
20000b8c:	24020001 	li	v0,1
20000b90:	1462000f 	bne	v1,v0,20000bd0 <visualsRt+0xa8>
20000b94:	3c028000 	lui	v0,0x8000
20000b98:	978200b2 	lhu	v0,178(gp)
20000b9c:	00000000 	nop
20000ba0:	1040000b 	beqz	v0,20000bd0 <visualsRt+0xa8>
20000ba4:	3c028000 	lui	v0,0x8000
		Right_motor_direction_G == Forwards
		&& Right_motor_speed_G != 0
		)
	{
		GPIO_Write(LED_Pin_RtFd, GPIO_HIGH);
20000ba8:	34420200 	ori	v0,v0,0x200
20000bac:	8c430000 	lw	v1,0(v0)
20000bb0:	00000000 	nop
20000bb4:	ac430000 	sw	v1,0(v0)
20000bb8:	8c430000 	lw	v1,0(v0)
20000bbc:	00000000 	nop
20000bc0:	34630002 	ori	v1,v1,0x2
20000bc4:	ac430000 	sw	v1,0(v0)
20000bc8:	08000303 	j	20000c0c <visualsRt+0xe4>
20000bcc:	00000000 	nop
	}
	else
	{
		GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000bd0:	34420200 	ori	v0,v0,0x200
20000bd4:	8c450000 	lw	a1,0(v0)
20000bd8:	2404fffd 	li	a0,-3
20000bdc:	00a42024 	and	a0,a1,a0
20000be0:	ac440000 	sw	a0,0(v0)
20000be4:	8c440000 	lw	a0,0(v0)
20000be8:	00000000 	nop
20000bec:	ac440000 	sw	a0,0(v0)
	}

	if(( Right_motor_direction_G == Reverse && Right_motor_speed_G != 0) || (Course_correction_Rt == True))
20000bf0:	24020002 	li	v0,2
20000bf4:	14620005 	bne	v1,v0,20000c0c <visualsRt+0xe4>
20000bf8:	00000000 	nop
20000bfc:	978200b2 	lhu	v0,178(gp)
20000c00:	00000000 	nop
20000c04:	14400005 	bnez	v0,20000c1c <visualsRt+0xf4>
20000c08:	3c028000 	lui	v0,0x8000
20000c0c:	8f830064 	lw	v1,100(gp)
20000c10:	24020001 	li	v0,1
20000c14:	14620008 	bne	v1,v0,20000c38 <visualsRt+0x110>
20000c18:	3c028000 	lui	v0,0x8000
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_HIGH);
20000c1c:	34420200 	ori	v0,v0,0x200
20000c20:	8c430000 	lw	v1,0(v0)
20000c24:	00000000 	nop
20000c28:	ac430000 	sw	v1,0(v0)
20000c2c:	8c430000 	lw	v1,0(v0)
20000c30:	08000314 	j	20000c50 <visualsRt+0x128>
20000c34:	34630001 	ori	v1,v1,0x1
	}
	else
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c38:	34420200 	ori	v0,v0,0x200
20000c3c:	8c440000 	lw	a0,0(v0)
20000c40:	2403fffe 	li	v1,-2
20000c44:	00831824 	and	v1,a0,v1
20000c48:	ac430000 	sw	v1,0(v0)
20000c4c:	8c430000 	lw	v1,0(v0)

//	Segment_Write(displayA, (sensorReadings.USFwd & 0x000F) >> 0);
//	Segment_Write(displayB, (sensorReadings.USFwd & 0x00F0) >> 4);
//	Segment_Write(displayC, (bufferRX0.ID & 0x000F) >> 0);

	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
20000c50:	3c104000 	lui	s0,0x4000
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_HIGH);
	}
	else
	{
		GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000c54:	ac430000 	sw	v1,0(v0)

//	Segment_Write(displayA, (sensorReadings.USFwd & 0x000F) >> 0);
//	Segment_Write(displayB, (sensorReadings.USFwd & 0x00F0) >> 4);
//	Segment_Write(displayC, (bufferRX0.ID & 0x000F) >> 0);

	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
20000c58:	261103dc 	addiu	s1,s0,988
20000c5c:	92250004 	lbu	a1,4(s1)
20000c60:	8f84ffdc 	lw	a0,-36(gp)
20000c64:	0c000b77 	jal	20002ddc <Segment_Write>
20000c68:	30a5000f 	andi	a1,a1,0xf
	Segment_Write(displayB, (sensorReadings.IRRight & 0x00F0) >> 4);
20000c6c:	8e250004 	lw	a1,4(s1)
20000c70:	8f84ffe0 	lw	a0,-32(gp)
20000c74:	30a500f0 	andi	a1,a1,0xf0
20000c78:	0c000b77 	jal	20002ddc <Segment_Write>
20000c7c:	00052902 	srl	a1,a1,0x4
	Segment_Write(displayC, (sensorReadings.IRLeft & 0x000F) >> 0);
20000c80:	920503dc 	lbu	a1,988(s0)
20000c84:	8f84ffe4 	lw	a0,-28(gp)
20000c88:	0c000b77 	jal	20002ddc <Segment_Write>
20000c8c:	30a5000f 	andi	a1,a1,0xf
	Segment_Write(displayD, (sensorReadings.IRLeft & 0x00F0) >> 4);
20000c90:	8e0503dc 	lw	a1,988(s0)
20000c94:	8f84ffe8 	lw	a0,-24(gp)
20000c98:	30a500f0 	andi	a1,a1,0xf0

}
20000c9c:	8fbf001c 	lw	ra,28(sp)
20000ca0:	8fb10018 	lw	s1,24(sp)
20000ca4:	8fb00014 	lw	s0,20(sp)
//	Segment_Write(displayC, (bufferRX0.ID & 0x000F) >> 0);

	Segment_Write(displayA, (sensorReadings.IRRight & 0x000F) >> 0);
	Segment_Write(displayB, (sensorReadings.IRRight & 0x00F0) >> 4);
	Segment_Write(displayC, (sensorReadings.IRLeft & 0x000F) >> 0);
	Segment_Write(displayD, (sensorReadings.IRLeft & 0x00F0) >> 4);
20000ca8:	00052902 	srl	a1,a1,0x4
20000cac:	08000b77 	j	20002ddc <Segment_Write>
20000cb0:	27bd0020 	addiu	sp,sp,32

20000cb4 <Motor_Right_Update>:
/**
 * Motor_Right controller operation
 */
void Motor_Right_Update(void)
{
	if(System_Mode_G == Go)
20000cb4:	8f850104 	lw	a1,260(gp)

/**
 * Motor_Right controller operation
 */
void Motor_Right_Update(void)
{
20000cb8:	27bdffe8 	addiu	sp,sp,-24
	if(System_Mode_G == Go)
20000cbc:	24020002 	li	v0,2
20000cc0:	14a20034 	bne	a1,v0,20000d94 <Motor_Right_Update+0xe0>
20000cc4:	afbf0014 	sw	ra,20(sp)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Rt_Diff = (WheelCounts_Right_G - Enc_Rt_Old);
20000cc8:	8f8400c8 	lw	a0,200(gp)
20000ccc:	8f830150 	lw	v1,336(gp)

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Lf)
20000cd0:	8f8200ec 	lw	v0,236(gp)
void Motor_Right_Update(void)
{
	if(System_Mode_G == Go)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Rt_Diff = (WheelCounts_Right_G - Enc_Rt_Old);
20000cd4:	00831823 	subu	v1,a0,v1

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Lf)
20000cd8:	24060001 	li	a2,1
20000cdc:	10460004 	beq	v0,a2,20000cf0 <Motor_Right_Update+0x3c>
20000ce0:	af830154 	sw	v1,340(gp)
20000ce4:	24060003 	li	a2,3
20000ce8:	14460004 	bne	v0,a2,20000cfc <Motor_Right_Update+0x48>
20000cec:	00000000 	nop
		{
			Motor_Rt_Enc_Track += Enc_Rt_Diff;
20000cf0:	8f8500d8 	lw	a1,216(gp)
20000cf4:	08000346 	j	20000d18 <Motor_Right_Update+0x64>
20000cf8:	00a31821 	addu	v1,a1,v1
		}
		else if(movement_G == Bd || movement_G == Rt)
20000cfc:	10450003 	beq	v0,a1,20000d0c <Motor_Right_Update+0x58>
20000d00:	24050004 	li	a1,4
20000d04:	14450005 	bne	v0,a1,20000d1c <Motor_Right_Update+0x68>
20000d08:	00000000 	nop
		{
			Motor_Rt_Enc_Track -= Enc_Rt_Diff;
20000d0c:	8f8500d8 	lw	a1,216(gp)
20000d10:	00000000 	nop
20000d14:	00a31823 	subu	v1,a1,v1
20000d18:	af8300d8 	sw	v1,216(gp)
		}

		Enc_Rt_Old = WheelCounts_Right_G;

		/* Script reader */
		switch(movement_G)
20000d1c:	24030002 	li	v1,2
20000d20:	10430017 	beq	v0,v1,20000d80 <Motor_Right_Update+0xcc>
20000d24:	af840150 	sw	a0,336(gp)
20000d28:	2c430003 	sltiu	v1,v0,3
20000d2c:	10600006 	beqz	v1,20000d48 <Motor_Right_Update+0x94>
20000d30:	24030003 	li	v1,3
20000d34:	24030001 	li	v1,1
20000d38:	14430017 	bne	v0,v1,20000d98 <Motor_Right_Update+0xe4>
20000d3c:	00000000 	nop
20000d40:	08000358 	j	20000d60 <Motor_Right_Update+0xac>
20000d44:	00000000 	nop
20000d48:	1043000b 	beq	v0,v1,20000d78 <Motor_Right_Update+0xc4>
20000d4c:	24030004 	li	v1,4
20000d50:	14430011 	bne	v0,v1,20000d98 <Motor_Right_Update+0xe4>
20000d54:	24020002 	li	v0,2
			Right_motor_direction_G = Forwards;
			Right_motor_speed_G = CRAWL_SPEED-2;
			break;
		case Bd:
		case Rt:
			Right_motor_direction_G = Reverse;
20000d58:	08000362 	j	20000d88 <Motor_Right_Update+0xd4>
20000d5c:	af820084 	sw	v0,132(gp)
		/* Script reader */
		switch(movement_G)
		{
		case Fd:
			Right_motor_direction_G = Forwards;
			speedControlRight(Course_correction_Lf, Course_correction_Rt);
20000d60:	8f840074 	lw	a0,116(gp)
20000d64:	8f850064 	lw	a1,100(gp)
20000d68:	0c0002a7 	jal	20000a9c <speedControlRight>
20000d6c:	af820084 	sw	v0,132(gp)
			break;
20000d70:	0800036a 	j	20000da8 <Motor_Right_Update+0xf4>
20000d74:	00000000 	nop
		case Lf:
			Right_motor_direction_G = Forwards;
20000d78:	08000361 	j	20000d84 <Motor_Right_Update+0xd0>
20000d7c:	24020001 	li	v0,1
			Right_motor_speed_G = CRAWL_SPEED-2;
			break;
		case Bd:
		case Rt:
			Right_motor_direction_G = Reverse;
20000d80:	24020002 	li	v0,2
20000d84:	af820084 	sw	v0,132(gp)
			Right_motor_speed_G = CRAWL_SPEED-2;
20000d88:	2402000d 	li	v0,13
			break;
20000d8c:	0800036a 	j	20000da8 <Motor_Right_Update+0xf4>
20000d90:	a78200b2 	sh	v0,178(gp)
			break;
		}
	}
	else
	{
		Right_motor_direction_G = Off;
20000d94:	af800084 	sw	zero,132(gp)
		Right_motor_speed_G = 0;
20000d98:	a78000b2 	sh	zero,178(gp)
		Motor_Rt_Enc_Track = 0;
20000d9c:	af8000d8 	sw	zero,216(gp)
		Enc_Rt_Diff = 0;
20000da0:	af800154 	sw	zero,340(gp)
		Enc_Rt_Old = 0;
20000da4:	af800150 	sw	zero,336(gp)
	}

	visualsRt();
}
20000da8:	8fbf0014 	lw	ra,20(sp)
		Motor_Rt_Enc_Track = 0;
		Enc_Rt_Diff = 0;
		Enc_Rt_Old = 0;
	}

	visualsRt();
20000dac:	080002ca 	j	20000b28 <visualsRt>
20000db0:	27bd0018 	addiu	sp,sp,24

20000db4 <Motor_Right_Init>:
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
20000db4:	3c038000 	lui	v1,0x8000
20000db8:	34620200 	ori	v0,v1,0x200
20000dbc:	8c450004 	lw	a1,4(v0)
20000dc0:	2404fffd 	li	a0,-3
20000dc4:	00a42824 	and	a1,a1,a0
20000dc8:	ac450004 	sw	a1,4(v0)
20000dcc:	8c460004 	lw	a2,4(v0)
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000dd0:	2405fffe 	li	a1,-2
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
20000dd4:	34c60002 	ori	a2,a2,0x2
20000dd8:	ac460004 	sw	a2,4(v0)
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000ddc:	8c460000 	lw	a2,0(v0)
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000de0:	34630500 	ori	v1,v1,0x500
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000de4:	00c42024 	and	a0,a2,a0
20000de8:	ac440000 	sw	a0,0(v0)
20000dec:	8c440000 	lw	a0,0(v0)
/**
 * Initialisation for the Motor_Right package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
20000df0:	27bdffe8 	addiu	sp,sp,-24
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
20000df4:	ac440000 	sw	a0,0(v0)
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000df8:	8c460004 	lw	a2,4(v0)
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);

	Segment_Enable(displayA);
20000dfc:	8f84ffdc 	lw	a0,-36(gp)
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000e00:	00c53024 	and	a2,a2,a1
20000e04:	ac460004 	sw	a2,4(v0)
20000e08:	8c460004 	lw	a2,4(v0)
/**
 * Initialisation for the Motor_Right package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
20000e0c:	afbf0014 	sw	ra,20(sp)
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
20000e10:	34c60001 	ori	a2,a2,0x1
20000e14:	ac460004 	sw	a2,4(v0)
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000e18:	8c460000 	lw	a2,0(v0)
 * This will be called from Tasks_Init by default.
 */
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
20000e1c:	af800084 	sw	zero,132(gp)
	Motor_Rt_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000e20:	00c52824 	and	a1,a2,a1
20000e24:	ac450000 	sw	a1,0(v0)
20000e28:	8c450000 	lw	a1,0(v0)
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
	Motor_Rt_Enc_Track = 0;
20000e2c:	af8000d8 	sw	zero,216(gp)

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
20000e30:	ac450000 	sw	a1,0(v0)
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000e34:	8c650004 	lw	a1,4(v1)
20000e38:	2402ffdf 	li	v0,-33
20000e3c:	00a21024 	and	v0,a1,v0
20000e40:	ac620004 	sw	v0,4(v1)
20000e44:	8c620004 	lw	v0,4(v1)
 */
void Motor_Right_Init(void)
{
	/* Task initialisation */
	Right_motor_direction_G = Off;
	Right_motor_speed_G = 0;
20000e48:	a78000b2 	sh	zero,178(gp)

	GPIO_Set_Direction(LED_Pin_RtFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_RtBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_RtBd, GPIO_LOW);
	GPIO_Set_Direction(Right_SW, GPIO_INPUT);
20000e4c:	ac620004 	sw	v0,4(v1)

	Segment_Enable(displayA);
20000e50:	0c000ba4 	jal	20002e90 <Segment_Enable>
20000e54:	00000000 	nop
	Segment_Write(displayA, 0x0);
20000e58:	8f84ffdc 	lw	a0,-36(gp)
20000e5c:	0c000b77 	jal	20002ddc <Segment_Write>
20000e60:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayA);
20000e64:	8f84ffdc 	lw	a0,-36(gp)
20000e68:	0c000b2c 	jal	20002cb0 <Segment_Clear_Decimal>
20000e6c:	00000000 	nop
	Segment_Enable(displayB);
20000e70:	8f84ffe0 	lw	a0,-32(gp)
20000e74:	0c000ba4 	jal	20002e90 <Segment_Enable>
20000e78:	00000000 	nop
	Segment_Write(displayB, 0x0);
20000e7c:	8f84ffe0 	lw	a0,-32(gp)
20000e80:	0c000b77 	jal	20002ddc <Segment_Write>
20000e84:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayB);
20000e88:	8f84ffe0 	lw	a0,-32(gp)
}
20000e8c:	8fbf0014 	lw	ra,20(sp)
	Segment_Enable(displayA);
	Segment_Write(displayA, 0x0);
	Segment_Clear_Decimal(displayA);
	Segment_Enable(displayB);
	Segment_Write(displayB, 0x0);
	Segment_Clear_Decimal(displayB);
20000e90:	08000b2c 	j	20002cb0 <Segment_Clear_Decimal>
20000e94:	27bd0018 	addiu	sp,sp,24

20000e98 <visualsLf>:
	return result;
}

void visualsLf(void)
{
	if(System_Mode_G == Game_Over)
20000e98:	8f830104 	lw	v1,260(gp)
	result = (uint16_t)(speed);
	return result;
}

void visualsLf(void)
{
20000e9c:	27bdffe8 	addiu	sp,sp,-24
	if(System_Mode_G == Game_Over)
20000ea0:	24020004 	li	v0,4
20000ea4:	14620009 	bne	v1,v0,20000ecc <visualsLf+0x34>
20000ea8:	afbf0014 	sw	ra,20(sp)
	{
		Segment_Set_Decimal(displayC);
20000eac:	8f84ffec 	lw	a0,-20(gp)
20000eb0:	0c000b52 	jal	20002d48 <Segment_Set_Decimal>
20000eb4:	00000000 	nop
		Segment_Set_Decimal(displayD);
20000eb8:	8f84fff0 	lw	a0,-16(gp)
20000ebc:	0c000b52 	jal	20002d48 <Segment_Set_Decimal>
20000ec0:	00000000 	nop
20000ec4:	080003b9 	j	20000ee4 <visualsLf+0x4c>
20000ec8:	00000000 	nop
	}
	else
	{
		Segment_Clear_Decimal(displayC);
20000ecc:	8f84ffec 	lw	a0,-20(gp)
20000ed0:	0c000b2c 	jal	20002cb0 <Segment_Clear_Decimal>
20000ed4:	00000000 	nop
		Segment_Clear_Decimal(displayD);
20000ed8:	8f84fff0 	lw	a0,-16(gp)
20000edc:	0c000b2c 	jal	20002cb0 <Segment_Clear_Decimal>
20000ee0:	00000000 	nop
	}

	if(
		Left_motor_direction_G == Forwards
		&& Left_motor_speed_G != 0
20000ee4:	8f830094 	lw	v1,148(gp)
	{
		Segment_Clear_Decimal(displayC);
		Segment_Clear_Decimal(displayD);
	}

	if(
20000ee8:	24020001 	li	v0,1
20000eec:	1462000f 	bne	v1,v0,20000f2c <visualsLf+0x94>
20000ef0:	3c028000 	lui	v0,0x8000
20000ef4:	978200b0 	lhu	v0,176(gp)
20000ef8:	00000000 	nop
20000efc:	1040000b 	beqz	v0,20000f2c <visualsLf+0x94>
20000f00:	3c028000 	lui	v0,0x8000
		Left_motor_direction_G == Forwards
		&& Left_motor_speed_G != 0
		)
	{
		GPIO_Write(LED_Pin_LfFd, GPIO_HIGH);
20000f04:	34420200 	ori	v0,v0,0x200
20000f08:	8c430000 	lw	v1,0(v0)
20000f0c:	00000000 	nop
20000f10:	ac430000 	sw	v1,0(v0)
20000f14:	8c430000 	lw	v1,0(v0)
20000f18:	00000000 	nop
20000f1c:	34630008 	ori	v1,v1,0x8
20000f20:	ac430000 	sw	v1,0(v0)
20000f24:	080003da 	j	20000f68 <visualsLf+0xd0>
20000f28:	00000000 	nop
	}
	else
	{
		GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
20000f2c:	34420200 	ori	v0,v0,0x200
20000f30:	8c450000 	lw	a1,0(v0)
20000f34:	2404fff7 	li	a0,-9
20000f38:	00a42024 	and	a0,a1,a0
20000f3c:	ac440000 	sw	a0,0(v0)
20000f40:	8c440000 	lw	a0,0(v0)
20000f44:	00000000 	nop
20000f48:	ac440000 	sw	a0,0(v0)
	}

	if((Left_motor_direction_G == Reverse && Left_motor_speed_G != 0	) || (Course_correction_Lf == True))
20000f4c:	24020002 	li	v0,2
20000f50:	14620005 	bne	v1,v0,20000f68 <visualsLf+0xd0>
20000f54:	00000000 	nop
20000f58:	978200b0 	lhu	v0,176(gp)
20000f5c:	00000000 	nop
20000f60:	14400005 	bnez	v0,20000f78 <visualsLf+0xe0>
20000f64:	3c028000 	lui	v0,0x8000
20000f68:	8f830074 	lw	v1,116(gp)
20000f6c:	24020001 	li	v0,1
20000f70:	14620008 	bne	v1,v0,20000f94 <visualsLf+0xfc>
20000f74:	3c028000 	lui	v0,0x8000
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_HIGH);
20000f78:	34420200 	ori	v0,v0,0x200
20000f7c:	8c430000 	lw	v1,0(v0)
20000f80:	00000000 	nop
20000f84:	ac430000 	sw	v1,0(v0)
20000f88:	8c430000 	lw	v1,0(v0)
20000f8c:	080003eb 	j	20000fac <visualsLf+0x114>
20000f90:	34630004 	ori	v1,v1,0x4
	}
	else
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000f94:	34420200 	ori	v0,v0,0x200
20000f98:	8c440000 	lw	a0,0(v0)
20000f9c:	2403fffb 	li	v1,-5
20000fa0:	00831824 	and	v1,a0,v1
20000fa4:	ac430000 	sw	v1,0(v0)
20000fa8:	8c430000 	lw	v1,0(v0)
	}

//	Segment_Write(displayC, (Motor_Lf_Enc_Track & 0x000F) >> 0);
//	Segment_Write(displayD, (Motor_Lf_Enc_Track & 0x00F0) >> 4);

}
20000fac:	8fbf0014 	lw	ra,20(sp)
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_HIGH);
	}
	else
	{
		GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
20000fb0:	ac430000 	sw	v1,0(v0)
	}

//	Segment_Write(displayC, (Motor_Lf_Enc_Track & 0x000F) >> 0);
//	Segment_Write(displayD, (Motor_Lf_Enc_Track & 0x00F0) >> 4);

}
20000fb4:	03e00008 	jr	ra
20000fb8:	27bd0018 	addiu	sp,sp,24

20000fbc <Motor_Left_Update>:
 * Motor_Left controller operation.
 */
void Motor_Left_Update(void)
{

	if(System_Mode_G == Go)
20000fbc:	8f830104 	lw	v1,260(gp)
20000fc0:	24020002 	li	v0,2
20000fc4:	1462002b 	bne	v1,v0,20001074 <Motor_Left_Update+0xb8>
20000fc8:	24050001 	li	a1,1
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Lf_Diff = (WheelCounts_Left_G - Enc_Lf_Old);
20000fcc:	8f840088 	lw	a0,136(gp)
20000fd0:	8f83015c 	lw	v1,348(gp)

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Rt)
20000fd4:	8f8200ec 	lw	v0,236(gp)
{

	if(System_Mode_G == Go)
	{
		/* Calculate the absolute value of encoder counts since previous update */
		Enc_Lf_Diff = (WheelCounts_Left_G - Enc_Lf_Old);
20000fd8:	00831823 	subu	v1,a0,v1

		/* Encoder counting */
		if(movement_G == Fd || movement_G == Rt)
20000fdc:	10450004 	beq	v0,a1,20000ff0 <Motor_Left_Update+0x34>
20000fe0:	af830158 	sw	v1,344(gp)
20000fe4:	24050004 	li	a1,4
20000fe8:	14450004 	bne	v0,a1,20000ffc <Motor_Left_Update+0x40>
20000fec:	2445fffe 	addiu	a1,v0,-2
		{
			Motor_Lf_Enc_Track += Enc_Lf_Diff;
20000ff0:	8f850040 	lw	a1,64(gp)
20000ff4:	08000405 	j	20001014 <Motor_Left_Update+0x58>
20000ff8:	00a31821 	addu	v1,a1,v1
		}
		else if(movement_G == Bd || movement_G == Lf)
20000ffc:	2ca50002 	sltiu	a1,a1,2
20001000:	10a00005 	beqz	a1,20001018 <Motor_Left_Update+0x5c>
20001004:	00000000 	nop
		{
			Motor_Lf_Enc_Track -= Enc_Lf_Diff;
20001008:	8f850040 	lw	a1,64(gp)
2000100c:	00000000 	nop
20001010:	00a31823 	subu	v1,a1,v1
20001014:	af830040 	sw	v1,64(gp)
		}

		Enc_Lf_Old = WheelCounts_Left_G;

		/* Script reader */
		switch(movement_G)
20001018:	2c430004 	sltiu	v1,v0,4
2000101c:	10600008 	beqz	v1,20001040 <Motor_Left_Update+0x84>
20001020:	af84015c 	sw	a0,348(gp)
20001024:	2c430002 	sltiu	v1,v0,2
20001028:	10600010 	beqz	v1,2000106c <Motor_Left_Update+0xb0>
2000102c:	24030001 	li	v1,1
20001030:	14430011 	bne	v0,v1,20001078 <Motor_Left_Update+0xbc>
20001034:	00000000 	nop
		{
		case Fd:
			/* Check the encoder tracker has reached the target count */
			Left_motor_direction_G = Forwards;
20001038:	08000415 	j	20001054 <Motor_Left_Update+0x98>
2000103c:	af820094 	sw	v0,148(gp)
		}

		Enc_Lf_Old = WheelCounts_Left_G;

		/* Script reader */
		switch(movement_G)
20001040:	24030004 	li	v1,4
20001044:	1443000c 	bne	v0,v1,20001078 <Motor_Left_Update+0xbc>
20001048:	24020001 	li	v0,1
			Left_motor_direction_G = Forwards;
			Left_motor_speed_G = CRAWL_SPEED;
			break;
		case Rt:
			/* Check the encoder tracker has reached the target count */
			Left_motor_direction_G = Forwards;
2000104c:	08000418 	j	20001060 <Motor_Left_Update+0xa4>
20001050:	af820094 	sw	v0,148(gp)
		switch(movement_G)
		{
		case Fd:
			/* Check the encoder tracker has reached the target count */
			Left_motor_direction_G = Forwards;
			Left_motor_speed_G = CRAWL_SPEED;
20001054:	08000419 	j	20001064 <Motor_Left_Update+0xa8>
20001058:	2402000f 	li	v0,15
			break;
		case Rt:
			/* Check the encoder tracker has reached the target count */
			Left_motor_direction_G = Forwards;
2000105c:	af820094 	sw	v0,148(gp)
			Left_motor_speed_G = CRAWL_SPEED-2;
20001060:	2402000d 	li	v0,13

			break;
20001064:	08000422 	j	20001088 <Motor_Left_Update+0xcc>
20001068:	a78200b0 	sh	v0,176(gp)
		case Bd:
		case Lf:
			Left_motor_direction_G = Reverse;
2000106c:	08000417 	j	2000105c <Motor_Left_Update+0xa0>
20001070:	24020002 	li	v0,2
			break;
		}
	}
	else
	{
		Left_motor_direction_G = Off;
20001074:	af800094 	sw	zero,148(gp)
		Left_motor_speed_G = 0;
20001078:	a78000b0 	sh	zero,176(gp)
		Motor_Lf_Enc_Track = 0;
2000107c:	af800040 	sw	zero,64(gp)
		Enc_Lf_Diff = 0;
20001080:	af800158 	sw	zero,344(gp)
		Enc_Lf_Old = 0;
20001084:	af80015c 	sw	zero,348(gp)
	}

	visualsLf();
20001088:	080003a6 	j	20000e98 <visualsLf>
2000108c:	00000000 	nop

20001090 <Motor_Left_Init>:
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
20001090:	3c038000 	lui	v1,0x8000
20001094:	34620200 	ori	v0,v1,0x200
20001098:	8c440004 	lw	a0,4(v0)
2000109c:	2405fff7 	li	a1,-9
200010a0:	00852024 	and	a0,a0,a1
200010a4:	ac440004 	sw	a0,4(v0)
200010a8:	8c440004 	lw	a0,4(v0)
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
200010ac:	2406fffb 	li	a2,-5
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
200010b0:	34840008 	ori	a0,a0,0x8
200010b4:	ac440004 	sw	a0,4(v0)
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
200010b8:	8c440000 	lw	a0,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
200010bc:	34630500 	ori	v1,v1,0x500
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
200010c0:	00852024 	and	a0,a0,a1
200010c4:	ac440000 	sw	a0,0(v0)
200010c8:	8c470000 	lw	a3,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);

	Segment_Enable(displayC);
200010cc:	8f84ffec 	lw	a0,-20(gp)
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
200010d0:	ac470000 	sw	a3,0(v0)
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
200010d4:	8c470004 	lw	a3,4(v0)
/**
 * Initialisation for the Motor_Left package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
200010d8:	27bdffe8 	addiu	sp,sp,-24
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
200010dc:	00e63824 	and	a3,a3,a2
200010e0:	ac470004 	sw	a3,4(v0)
200010e4:	8c470004 	lw	a3,4(v0)
/**
 * Initialisation for the Motor_Left package.
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
200010e8:	afbf0014 	sw	ra,20(sp)
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
200010ec:	34e70004 	ori	a3,a3,0x4
200010f0:	ac470004 	sw	a3,4(v0)
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
200010f4:	8c470000 	lw	a3,0(v0)
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
	Motor_Lf_Enc_Track = 0;
200010f8:	af800040 	sw	zero,64(gp)

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
200010fc:	00e63024 	and	a2,a3,a2
20001100:	ac460000 	sw	a2,0(v0)
20001104:	8c460000 	lw	a2,0(v0)
 * This will be called from Tasks_Init by default.
 */
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
20001108:	af800094 	sw	zero,148(gp)
	Motor_Lf_Enc_Track = 0;

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
2000110c:	ac460000 	sw	a2,0(v0)
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20001110:	8c620004 	lw	v0,4(v1)
 */
void Motor_Left_Init(void)
{
	/* Task initialisation */
	Left_motor_direction_G = Off;
	Left_motor_speed_G = 0;
20001114:	a78000b0 	sh	zero,176(gp)

	GPIO_Set_Direction(LED_Pin_LfFd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfFd, GPIO_LOW);
	GPIO_Set_Direction(LED_Pin_LfBd, GPIO_OUTPUT);
	GPIO_Write(LED_Pin_LfBd, GPIO_LOW);
	GPIO_Set_Direction(Left_SW, GPIO_INPUT);
20001118:	00452824 	and	a1,v0,a1
2000111c:	ac650004 	sw	a1,4(v1)
20001120:	8c620004 	lw	v0,4(v1)
20001124:	00000000 	nop
20001128:	ac620004 	sw	v0,4(v1)

	Segment_Enable(displayC);
2000112c:	0c000ba4 	jal	20002e90 <Segment_Enable>
20001130:	00000000 	nop
	Segment_Write(displayC, 0x0);
20001134:	8f84ffec 	lw	a0,-20(gp)
20001138:	0c000b77 	jal	20002ddc <Segment_Write>
2000113c:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayC);
20001140:	8f84ffec 	lw	a0,-20(gp)
20001144:	0c000b2c 	jal	20002cb0 <Segment_Clear_Decimal>
20001148:	00000000 	nop
	Segment_Enable(displayD);
2000114c:	8f84fff0 	lw	a0,-16(gp)
20001150:	0c000ba4 	jal	20002e90 <Segment_Enable>
20001154:	00000000 	nop
	Segment_Write(displayD, 0x0);
20001158:	8f84fff0 	lw	a0,-16(gp)
2000115c:	0c000b77 	jal	20002ddc <Segment_Write>
20001160:	00002821 	move	a1,zero
	Segment_Clear_Decimal(displayD);
20001164:	8f84fff0 	lw	a0,-16(gp)
}
20001168:	8fbf0014 	lw	ra,20(sp)
	Segment_Enable(displayC);
	Segment_Write(displayC, 0x0);
	Segment_Clear_Decimal(displayC);
	Segment_Enable(displayD);
	Segment_Write(displayD, 0x0);
	Segment_Clear_Decimal(displayD);
2000116c:	08000b2c 	j	20002cb0 <Segment_Clear_Decimal>
20001170:	27bd0018 	addiu	sp,sp,24

20001174 <spi_receive_CAN>:
	uint32_t Byte_counter, length;// displayID;

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
20001174:	3c028000 	lui	v0,0x8000
20001178:	34420600 	ori	v0,v0,0x600
2000117c:	8c460000 	lw	a2,0(v0)
20001180:	2403ffbf 	li	v1,-65
20001184:	00c31824 	and	v1,a2,v1
20001188:	ac430000 	sw	v1,0(v0)
2000118c:	8c430000 	lw	v1,0(v0)
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
20001190:	27bdffe0 	addiu	sp,sp,-32

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
20001194:	308400ff 	andi	a0,a0,0xff
	uint32_t Byte_counter, length;// displayID;

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
20001198:	ac430000 	sw	v1,0(v0)
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
2000119c:	afb10014 	sw	s1,20(sp)
200011a0:	00a08821 	move	s1,a1

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
200011a4:	00802821 	move	a1,a0
200011a8:	00002021 	move	a0,zero
/**
 * Processes received CAN messages
 * @param buffer_ins The SPI buffer receive instruction.
 */
void spi_receive_CAN(uint32_t buffer_ins, Receive_Buffers * buffer)
{
200011ac:	afbf001c 	sw	ra,28(sp)
200011b0:	afb20018 	sw	s2,24(sp)
200011b4:	afb00010 	sw	s0,16(sp)

	PAD_ID = 0x0;

	/* Pull CS pin low - indicates start of transmission */
	GPIO_Write(CS_PIN, GPIO_LOW);
	SPI_Swap(SPI0, buffer_ins);
200011b8:	0c000b18 	jal	20002c60 <SPI_Swap>
200011bc:	af800184 	sw	zero,388(gp)

	/* Burn 5 Bytes: EXT_ID and Length */
	SPI_Swap(SPI0, 0xFF);
200011c0:	00002021 	move	a0,zero
200011c4:	0c000b18 	jal	20002c60 <SPI_Swap>
200011c8:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
200011cc:	00002021 	move	a0,zero
200011d0:	0c000b18 	jal	20002c60 <SPI_Swap>
200011d4:	240500ff 	li	a1,255
	SPI_Swap(SPI0, 0xFF);
200011d8:	00002021 	move	a0,zero
200011dc:	0c000b18 	jal	20002c60 <SPI_Swap>
200011e0:	240500ff 	li	a1,255
	buffer->ID = SPI_Swap(SPI0, 0xFF);
200011e4:	00002021 	move	a0,zero
200011e8:	0c000b18 	jal	20002c60 <SPI_Swap>
200011ec:	240500ff 	li	a1,255
200011f0:	ae220004 	sw	v0,4(s1)
	SPI_Swap(SPI0, 0xFF);
200011f4:	00002021 	move	a0,zero
200011f8:	0c000b18 	jal	20002c60 <SPI_Swap>
200011fc:	240500ff 	li	a1,255
20001200:	00008021 	move	s0,zero

	/* Known length */
	length = 8;

	/* Extract the CAN data and insert into the Receive Buffer */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001204:	24120008 	li	s2,8
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
20001208:	00002021 	move	a0,zero
2000120c:	0c000b18 	jal	20002c60 <SPI_Swap>
20001210:	240500ff 	li	a1,255
20001214:	02301821 	addu	v1,s1,s0

	/* Known length */
	length = 8;

	/* Extract the CAN data and insert into the Receive Buffer */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
20001218:	26100001 	addiu	s0,s0,1
2000121c:	1612fffa 	bne	s0,s2,20001208 <spi_receive_CAN+0x94>
20001220:	a0620008 	sb	v0,8(v1)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001224:	3c028000 	lui	v0,0x8000
20001228:	34420600 	ori	v0,v0,0x600
2000122c:	8c430000 	lw	v1,0(v0)
}
20001230:	8fbf001c 	lw	ra,28(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001234:	ac430000 	sw	v1,0(v0)
20001238:	8c430000 	lw	v1,0(v0)
}
2000123c:	8fb20018 	lw	s2,24(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
20001240:	34630040 	ori	v1,v1,0x40
}
20001244:	8fb10014 	lw	s1,20(sp)
20001248:	8fb00010 	lw	s0,16(sp)
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		buffer->CAN_Data[Byte_counter] = SPI_Swap(SPI0, 0xFF);
	}

	GPIO_Write(CS_PIN, GPIO_HIGH);
2000124c:	ac430000 	sw	v1,0(v0)
}
20001250:	03e00008 	jr	ra
20001254:	27bd0020 	addiu	sp,sp,32

20001258 <spi_buffer_CAN>:

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
20001258:	3c020003 	lui	v0,0x3

	/* Mask 4 bytes of CAN ID */
	MaskedID = CAN_ID & 0xFFFFFFFF;

	/* Separate Standard ID portion and shift for extra 3 bits */
	SID = MaskedID & 0x1FFC0000;
2000125c:	3c031ffc 	lui	v1,0x1ffc

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
20001260:	3442ffff 	ori	v0,v0,0xffff
20001264:	00821024 	and	v0,a0,v0

	/* Mask 4 bytes of CAN ID */
	MaskedID = CAN_ID & 0xFFFFFFFF;

	/* Separate Standard ID portion and shift for extra 3 bits */
	SID = MaskedID & 0x1FFC0000;
20001268:	00832024 	and	a0,a0,v1

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
2000126c:	3c030008 	lui	v1,0x8
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
20001270:	27bdffd8 	addiu	sp,sp,-40

	/* Separate Extended ID portion */
	EID = MaskedID & 0x3FFFF;

	/* Combine Standard ID, 3 padding bits and Extended ID */
	PAD_ID = ((SID | 0x80000) | EID);
20001274:	00431025 	or	v0,v0,v1
20001278:	000420c0 	sll	a0,a0,0x3
2000127c:	00442025 	or	a0,v0,a0
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
20001280:	afb10018 	sw	s1,24(sp)
20001284:	30b100ff 	andi	s1,a1,0xff
20001288:	afb00014 	sw	s0,20(sp)
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
2000128c:	00041e02 	srl	v1,a0,0x18
		PAD_ID >>= 8;
20001290:	00043a02 	srl	a3,a0,0x8
20001294:	00042c02 	srl	a1,a0,0x10
	}

	/* add data length to byte array */
	ID_Array[4] = (DL & 0x0F);
20001298:	3222000f 	andi	v0,s1,0xf
2000129c:	27900168 	addiu	s0,gp,360
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
200012a0:	afb30020 	sw	s3,32(sp)
200012a4:	afb2001c 	sw	s2,28(sp)
200012a8:	afbf0024 	sw	ra,36(sp)
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
200012ac:	a387016a 	sb	a3,362(gp)
200012b0:	a3850169 	sb	a1,361(gp)
200012b4:	a3830168 	sb	v1,360(gp)
		PAD_ID >>= 8;
	}

	/* add data length to byte array */
	ID_Array[4] = (DL & 0x0F);
200012b8:	a382016c 	sb	v0,364(gp)
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
{
200012bc:	00c09021 	move	s2,a2
	PAD_ID = ((SID | 0x80000) | EID);

	/* Write to byte array */
	for(Byte = 3; Byte >= 0; Byte--)
	{
		ID_Array[Byte] = (PAD_ID & 0xFF);
200012c0:	a384016b 	sb	a0,363(gp)
 * Send CAN message into SPI buffer
 * @param EXT_ID Transmission ID for the CAN message.
 * @param length The size of the CAN data message.
 * @param Data_array The CAN data.
 */
void spi_buffer_CAN(uint32_t EXT_ID, uint8_t length, uint8_t Data_array[])
200012c4:	26130005 	addiu	s3,s0,5
	build_EXT_ID_bytes(EXT_ID, EXT_ID_Bytes, length);

	/* Send padded CAN ID */
	for (Byte_counter = 0; Byte_counter < 5; Byte_counter++)
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
200012c8:	92050000 	lbu	a1,0(s0)
200012cc:	00002021 	move	a0,zero
200012d0:	0c000b18 	jal	20002c60 <SPI_Swap>
200012d4:	26100001 	addiu	s0,s0,1

	/* Pad ID with LOAD_TX0_INS info (see MCP2515 datasheet) */
	build_EXT_ID_bytes(EXT_ID, EXT_ID_Bytes, length);

	/* Send padded CAN ID */
	for (Byte_counter = 0; Byte_counter < 5; Byte_counter++)
200012d8:	1613fffb 	bne	s0,s3,200012c8 <spi_buffer_CAN+0x70>
200012dc:	00000000 	nop
200012e0:	080004bd 	j	200012f4 <spi_buffer_CAN+0x9c>
200012e4:	00008021 	move	s0,zero
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
200012e8:	90650000 	lbu	a1,0(v1)
200012ec:	0c000b18 	jal	20002c60 <SPI_Swap>
200012f0:	26100001 	addiu	s0,s0,1
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
200012f4:	0211102b 	sltu	v0,s0,s1
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
200012f8:	02501821 	addu	v1,s2,s0
	{
		SPI_Swap(SPI0, EXT_ID_Bytes[Byte_counter]);
	}

	/* Send CAN Data */
	for (Byte_counter = 0; Byte_counter < length; Byte_counter++)
200012fc:	1440fffa 	bnez	v0,200012e8 <spi_buffer_CAN+0x90>
20001300:	00002021 	move	a0,zero
	{
		SPI_Swap(SPI0, Data_array[Byte_counter]);
	}
}
20001304:	8fbf0024 	lw	ra,36(sp)
20001308:	8fb30020 	lw	s3,32(sp)
2000130c:	8fb2001c 	lw	s2,28(sp)
20001310:	8fb10018 	lw	s1,24(sp)
20001314:	8fb00014 	lw	s0,20(sp)
20001318:	03e00008 	jr	ra
2000131c:	27bd0028 	addiu	sp,sp,40

20001320 <Message_Sender_Update>:
 */
void Message_Sender_Update(void)
{

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
20001320:	8f820170 	lw	v0,368(gp)

/**
 * Specifies messages to send by SPI
 */
void Message_Sender_Update(void)
{
20001324:	27bdffe0 	addiu	sp,sp,-32
20001328:	afbf001c 	sw	ra,28(sp)
2000132c:	afb10018 	sw	s1,24(sp)

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
20001330:	1440011e 	bnez	v0,200017ac <Message_Sender_Update+0x48c>
20001334:	afb00014 	sw	s0,20(sp)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001338:	3c108000 	lui	s0,0x8000
2000133c:	36100600 	ori	s0,s0,0x600
20001340:	8e020000 	lw	v0,0(s0)
20001344:	2411ffbf 	li	s1,-65
20001348:	00511024 	and	v0,v0,s1
2000134c:	ae020000 	sw	v0,0(s0)
20001350:	8e020000 	lw	v0,0(s0)
		SPI_Swap(SPI0, 0xC0);
20001354:	00002021 	move	a0,zero
20001358:	240500c0 	li	a1,192

	/* First Update ensures the CONFIG values are correct */
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000135c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0xC0);
20001360:	0c000b18 	jal	20002c60 <SPI_Swap>
20001364:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001368:	8e020000 	lw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000136c:	00002021 	move	a0,zero
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0xC0);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001370:	ae020000 	sw	v0,0(s0)
20001374:	8e020000 	lw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001378:	24050002 	li	a1,2
	if(init == False)
	{
		/* Soft Reset */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0xC0);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000137c:	34420040 	ori	v0,v0,0x40
20001380:	ae020000 	sw	v0,0(s0)

		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001384:	8e020000 	lw	v0,0(s0)
20001388:	00000000 	nop
2000138c:	00511024 	and	v0,v0,s1
20001390:	ae020000 	sw	v0,0(s0)
20001394:	8e020000 	lw	v0,0(s0)
20001398:	00000000 	nop
2000139c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200013a0:	0c000b18 	jal	20002c60 <SPI_Swap>
200013a4:	00000000 	nop
		SPI_Swap(SPI0, 0x0F);
200013a8:	00002021 	move	a0,zero
200013ac:	0c000b18 	jal	20002c60 <SPI_Swap>
200013b0:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0x80);
200013b4:	00002021 	move	a0,zero
200013b8:	0c000b18 	jal	20002c60 <SPI_Swap>
200013bc:	24050080 	li	a1,128
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013c0:	8e020000 	lw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
200013c4:	00002021 	move	a0,zero
		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x80);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013c8:	ae020000 	sw	v0,0(s0)
200013cc:	8e020000 	lw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
200013d0:	24050003 	li	a1,3
		/* Set into CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x80);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200013d4:	34420040 	ori	v0,v0,0x40
200013d8:	ae020000 	sw	v0,0(s0)

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
200013dc:	8e020000 	lw	v0,0(s0)
200013e0:	00000000 	nop
200013e4:	00511024 	and	v0,v0,s1
200013e8:	ae020000 	sw	v0,0(s0)
200013ec:	8e020000 	lw	v0,0(s0)
200013f0:	00000000 	nop
200013f4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x03);
200013f8:	0c000b18 	jal	20002c60 <SPI_Swap>
200013fc:	00000000 	nop
		SPI_Swap(SPI0, 0x0E);
20001400:	00002021 	move	a0,zero
20001404:	0c000b18 	jal	20002c60 <SPI_Swap>
20001408:	2405000e 	li	a1,14
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000140c:	8e020000 	lw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001410:	00002021 	move	a0,zero

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x0E);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001414:	ae020000 	sw	v0,0(s0)
20001418:	8e020000 	lw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000141c:	24050002 	li	a1,2

		/* Verify CONFIG mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x0E);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001420:	34420040 	ori	v0,v0,0x40
20001424:	ae020000 	sw	v0,0(s0)

		/* Set values in the CONFIG registers for 250 kbps CAN */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001428:	8e020000 	lw	v0,0(s0)
2000142c:	00000000 	nop
20001430:	00511024 	and	v0,v0,s1
20001434:	ae020000 	sw	v0,0(s0)
20001438:	8e020000 	lw	v0,0(s0)
2000143c:	00000000 	nop
20001440:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001444:	0c000b18 	jal	20002c60 <SPI_Swap>
20001448:	00000000 	nop
		SPI_Swap(SPI0, 0x28);
2000144c:	00002021 	move	a0,zero
20001450:	0c000b18 	jal	20002c60 <SPI_Swap>
20001454:	24050028 	li	a1,40
		SPI_Swap(SPI0, 0x02);
20001458:	00002021 	move	a0,zero
2000145c:	0c000b18 	jal	20002c60 <SPI_Swap>
20001460:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x90);
20001464:	00002021 	move	a0,zero
20001468:	0c000b18 	jal	20002c60 <SPI_Swap>
2000146c:	24050090 	li	a1,144
		SPI_Swap(SPI0, 0x03);
20001470:	00002021 	move	a0,zero
20001474:	0c000b18 	jal	20002c60 <SPI_Swap>
20001478:	24050003 	li	a1,3
		SPI_Swap(SPI0, 0x00);
2000147c:	00002021 	move	a0,zero
20001480:	0c000b18 	jal	20002c60 <SPI_Swap>
20001484:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001488:	8e020000 	lw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
2000148c:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x28);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x90);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001490:	ae020000 	sw	v0,0(s0)
20001494:	8e020000 	lw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
20001498:	24050003 	li	a1,3
		SPI_Swap(SPI0, 0x28);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x90);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000149c:	34420040 	ori	v0,v0,0x40
200014a0:	ae020000 	sw	v0,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
200014a4:	8e020000 	lw	v0,0(s0)
200014a8:	00000000 	nop
200014ac:	00511024 	and	v0,v0,s1
200014b0:	ae020000 	sw	v0,0(s0)
200014b4:	8e020000 	lw	v0,0(s0)
200014b8:	00000000 	nop
200014bc:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x03);
200014c0:	0c000b18 	jal	20002c60 <SPI_Swap>
200014c4:	00000000 	nop
		SPI_Swap(SPI0, 0x2A);
200014c8:	00002021 	move	a0,zero
200014cc:	0c000b18 	jal	20002c60 <SPI_Swap>
200014d0:	2405002a 	li	a1,42
		speedPin = SPI_Swap(SPI0, 0xFF);
200014d4:	00002021 	move	a0,zero
200014d8:	0c000b18 	jal	20002c60 <SPI_Swap>
200014dc:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
200014e0:	8e030000 	lw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200014e4:	00002021 	move	a0,zero
		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200014e8:	ae030000 	sw	v1,0(s0)
200014ec:	8e030000 	lw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200014f0:	24050002 	li	a1,2
		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200014f4:	34630040 	ori	v1,v1,0x40
200014f8:	ae030000 	sw	v1,0(s0)

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
200014fc:	8e030000 	lw	v1,0(s0)

		/* Verify set values */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x03);
		SPI_Swap(SPI0, 0x2A);
		speedPin = SPI_Swap(SPI0, 0xFF);
20001500:	a382016d 	sb	v0,365(gp)
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001504:	00711824 	and	v1,v1,s1
20001508:	ae030000 	sw	v1,0(s0)
2000150c:	8e020000 	lw	v0,0(s0)
20001510:	00000000 	nop
20001514:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001518:	0c000b18 	jal	20002c60 <SPI_Swap>
2000151c:	00000000 	nop
		SPI_Swap(SPI0, 0x0C);
20001520:	00002021 	move	a0,zero
20001524:	0c000b18 	jal	20002c60 <SPI_Swap>
20001528:	2405000c 	li	a1,12
		SPI_Swap(SPI0, 0x00);
2000152c:	00002021 	move	a0,zero
20001530:	0c000b18 	jal	20002c60 <SPI_Swap>
20001534:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001538:	8e020000 	lw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000153c:	00002021 	move	a0,zero
		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0C);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001540:	ae020000 	sw	v0,0(s0)
20001544:	8e020000 	lw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001548:	24050002 	li	a1,2
		/* BFPCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0C);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000154c:	34420040 	ori	v0,v0,0x40
20001550:	ae020000 	sw	v0,0(s0)

		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001554:	8e020000 	lw	v0,0(s0)
20001558:	00000000 	nop
2000155c:	00511024 	and	v0,v0,s1
20001560:	ae020000 	sw	v0,0(s0)
20001564:	8e020000 	lw	v0,0(s0)
20001568:	00000000 	nop
2000156c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001570:	0c000b18 	jal	20002c60 <SPI_Swap>
20001574:	00000000 	nop
		SPI_Swap(SPI0, 0x0D);
20001578:	00002021 	move	a0,zero
2000157c:	0c000b18 	jal	20002c60 <SPI_Swap>
20001580:	2405000d 	li	a1,13
		SPI_Swap(SPI0, 0x00);
20001584:	00002021 	move	a0,zero
20001588:	0c000b18 	jal	20002c60 <SPI_Swap>
2000158c:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001590:	8e020000 	lw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001594:	00002021 	move	a0,zero
		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0D);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001598:	ae020000 	sw	v0,0(s0)
2000159c:	8e020000 	lw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200015a0:	24050002 	li	a1,2
		/* TXRTSCTRL register cleared */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0D);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015a4:	34420040 	ori	v0,v0,0x40
200015a8:	ae020000 	sw	v0,0(s0)

		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
200015ac:	8e020000 	lw	v0,0(s0)
200015b0:	00000000 	nop
200015b4:	00511024 	and	v0,v0,s1
200015b8:	ae020000 	sw	v0,0(s0)
200015bc:	8e020000 	lw	v0,0(s0)
200015c0:	00000000 	nop
200015c4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200015c8:	0c000b18 	jal	20002c60 <SPI_Swap>
200015cc:	00000000 	nop
		SPI_Swap(SPI0, 0x60);
200015d0:	00002021 	move	a0,zero
200015d4:	0c000b18 	jal	20002c60 <SPI_Swap>
200015d8:	24050060 	li	a1,96
		SPI_Swap(SPI0, 0x60);
200015dc:	00002021 	move	a0,zero
200015e0:	0c000b18 	jal	20002c60 <SPI_Swap>
200015e4:	24050060 	li	a1,96
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015e8:	8e020000 	lw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200015ec:	00002021 	move	a0,zero
		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x60);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015f0:	ae020000 	sw	v0,0(s0)
200015f4:	8e020000 	lw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200015f8:	24050002 	li	a1,2
		/* RXB0CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x60);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200015fc:	34420040 	ori	v0,v0,0x40
20001600:	ae020000 	sw	v0,0(s0)

		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001604:	8e020000 	lw	v0,0(s0)
20001608:	00000000 	nop
2000160c:	00511024 	and	v0,v0,s1
20001610:	ae020000 	sw	v0,0(s0)
20001614:	8e020000 	lw	v0,0(s0)
20001618:	00000000 	nop
2000161c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001620:	0c000b18 	jal	20002c60 <SPI_Swap>
20001624:	00000000 	nop
		SPI_Swap(SPI0, 0x70);
20001628:	00002021 	move	a0,zero
2000162c:	0c000b18 	jal	20002c60 <SPI_Swap>
20001630:	24050070 	li	a1,112
		SPI_Swap(SPI0, 0x60);
20001634:	00002021 	move	a0,zero
20001638:	0c000b18 	jal	20002c60 <SPI_Swap>
2000163c:	24050060 	li	a1,96
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001640:	8e020000 	lw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001644:	00002021 	move	a0,zero
		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x70);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001648:	ae020000 	sw	v0,0(s0)
2000164c:	8e020000 	lw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001650:	24050002 	li	a1,2
		/* RXB1CTRL */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x70);
		SPI_Swap(SPI0, 0x60);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001654:	34420040 	ori	v0,v0,0x40
20001658:	ae020000 	sw	v0,0(s0)

		/* Filter for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000165c:	8e020000 	lw	v0,0(s0)
20001660:	00000000 	nop
20001664:	00511024 	and	v0,v0,s1
20001668:	ae020000 	sw	v0,0(s0)
2000166c:	8e020000 	lw	v0,0(s0)
20001670:	00000000 	nop
20001674:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001678:	0c000b18 	jal	20002c60 <SPI_Swap>
2000167c:	00000000 	nop
		SPI_Swap(SPI0, 0x08);
20001680:	00002021 	move	a0,zero
20001684:	0c000b18 	jal	20002c60 <SPI_Swap>
20001688:	24050008 	li	a1,8
		SPI_Swap(SPI0, 0x3F);
2000168c:	00002021 	move	a0,zero
20001690:	0c000b18 	jal	20002c60 <SPI_Swap>
20001694:	2405003f 	li	a1,63
		SPI_Swap(SPI0, 0x0F);
20001698:	00002021 	move	a0,zero
2000169c:	0c000b18 	jal	20002c60 <SPI_Swap>
200016a0:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0xFF);
200016a4:	00002021 	move	a0,zero
200016a8:	0c000b18 	jal	20002c60 <SPI_Swap>
200016ac:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
200016b0:	00002021 	move	a0,zero
200016b4:	0c000b18 	jal	20002c60 <SPI_Swap>
200016b8:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016bc:	8e020000 	lw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200016c0:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x08);
		SPI_Swap(SPI0, 0x3F);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016c4:	ae020000 	sw	v0,0(s0)
200016c8:	8e020000 	lw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
200016cc:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x08);
		SPI_Swap(SPI0, 0x3F);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200016d0:	34420040 	ori	v0,v0,0x40
200016d4:	ae020000 	sw	v0,0(s0)

		/* Mask for impossible CAN ID */
		GPIO_Write(CS_PIN, GPIO_LOW);
200016d8:	8e020000 	lw	v0,0(s0)
200016dc:	00000000 	nop
200016e0:	00511024 	and	v0,v0,s1
200016e4:	ae020000 	sw	v0,0(s0)
200016e8:	8e020000 	lw	v0,0(s0)
200016ec:	00000000 	nop
200016f0:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
200016f4:	0c000b18 	jal	20002c60 <SPI_Swap>
200016f8:	00000000 	nop
		SPI_Swap(SPI0, 0x24);
200016fc:	00002021 	move	a0,zero
20001700:	0c000b18 	jal	20002c60 <SPI_Swap>
20001704:	24050024 	li	a1,36
		SPI_Swap(SPI0, 0xFF);
20001708:	00002021 	move	a0,zero
2000170c:	0c000b18 	jal	20002c60 <SPI_Swap>
20001710:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
20001714:	00002021 	move	a0,zero
20001718:	0c000b18 	jal	20002c60 <SPI_Swap>
2000171c:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
20001720:	00002021 	move	a0,zero
20001724:	0c000b18 	jal	20002c60 <SPI_Swap>
20001728:	240500ff 	li	a1,255
		SPI_Swap(SPI0, 0xFF);
2000172c:	00002021 	move	a0,zero
20001730:	0c000b18 	jal	20002c60 <SPI_Swap>
20001734:	240500ff 	li	a1,255
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001738:	8e020000 	lw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
2000173c:	00002021 	move	a0,zero
		SPI_Swap(SPI0, 0x24);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001740:	ae020000 	sw	v0,0(s0)
20001744:	8e020000 	lw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
20001748:	24050002 	li	a1,2
		SPI_Swap(SPI0, 0x24);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		SPI_Swap(SPI0, 0xFF);
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000174c:	34420040 	ori	v0,v0,0x40
20001750:	ae020000 	sw	v0,0(s0)

		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001754:	8e020000 	lw	v0,0(s0)
20001758:	00000000 	nop
2000175c:	00518824 	and	s1,v0,s1
20001760:	ae110000 	sw	s1,0(s0)
20001764:	8e020000 	lw	v0,0(s0)
20001768:	00000000 	nop
2000176c:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, 0x02);
20001770:	0c000b18 	jal	20002c60 <SPI_Swap>
20001774:	00000000 	nop
		SPI_Swap(SPI0, 0x0F);
20001778:	00002021 	move	a0,zero
2000177c:	0c000b18 	jal	20002c60 <SPI_Swap>
20001780:	2405000f 	li	a1,15
		SPI_Swap(SPI0, 0x00);
20001784:	00002021 	move	a0,zero
20001788:	0c000b18 	jal	20002c60 <SPI_Swap>
2000178c:	00002821 	move	a1,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001790:	8e020000 	lw	v0,0(s0)

		init = True;
20001794:	24030001 	li	v1,1
		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001798:	ae020000 	sw	v0,0(s0)
2000179c:	8e020000 	lw	v0,0(s0)

		init = True;
200017a0:	af830170 	sw	v1,368(gp)
		/* CANCTRL - Set to Normal Mode */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, 0x02);
		SPI_Swap(SPI0, 0x0F);
		SPI_Swap(SPI0, 0x00);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017a4:	34420040 	ori	v0,v0,0x40
200017a8:	ae020000 	sw	v0,0(s0)
	/* Transmit "proper" CAN messages only when the Mode is GO */
	//if(System_Mode_G == Go || System_Mode_G == Game_Over)
	{
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
200017ac:	3c108000 	lui	s0,0x8000
200017b0:	36100600 	ori	s0,s0,0x600
200017b4:	8e020000 	lw	v0,0(s0)
200017b8:	2411ffbf 	li	s1,-65
200017bc:	00511024 	and	v0,v0,s1
200017c0:	ae020000 	sw	v0,0(s0)
200017c4:	8e020000 	lw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX0_INS);
200017c8:	00002021 	move	a0,zero
200017cc:	24050040 	li	a1,64
	/* Transmit "proper" CAN messages only when the Mode is GO */
	//if(System_Mode_G == Go || System_Mode_G == Game_Over)
	{
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
200017d0:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX0_INS);
200017d4:	0c000b18 	jal	20002c60 <SPI_Swap>
200017d8:	00000000 	nop
		spi_buffer_CAN(canIDLf, 8, candataLf);
200017dc:	8f8400e8 	lw	a0,232(gp)
200017e0:	2786006c 	addiu	a2,gp,108
200017e4:	0c000496 	jal	20001258 <spi_buffer_CAN>
200017e8:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017ec:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
200017f0:	00002021 	move	a0,zero
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX0_INS);
		spi_buffer_CAN(canIDLf, 8, candataLf);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200017f4:	ae020000 	sw	v0,0(s0)
200017f8:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
200017fc:	24050042 	li	a1,66
		/* Pull CS pin low - indicates start of transmission */
		/* Load CAN message into TX0: Left Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX0_INS);
		spi_buffer_CAN(canIDLf, 8, candataLf);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001800:	34420040 	ori	v0,v0,0x40
20001804:	ae020000 	sw	v0,0(s0)

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001808:	8e020000 	lw	v0,0(s0)
2000180c:	00000000 	nop
20001810:	00511024 	and	v0,v0,s1
20001814:	ae020000 	sw	v0,0(s0)
20001818:	8e020000 	lw	v0,0(s0)
2000181c:	00000000 	nop
20001820:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX1_INS);
20001824:	0c000b18 	jal	20002c60 <SPI_Swap>
20001828:	00000000 	nop
		spi_buffer_CAN(canIDRt, 8, candataRt);
2000182c:	8f840068 	lw	a0,104(gp)
20001830:	27860098 	addiu	a2,gp,152
20001834:	0c000496 	jal	20001258 <spi_buffer_CAN>
20001838:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
2000183c:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001840:	00002021 	move	a0,zero

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
		spi_buffer_CAN(canIDRt, 8, candataRt);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001844:	ae020000 	sw	v0,0(s0)
20001848:	8e020000 	lw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
2000184c:	24050044 	li	a1,68

		/* Load CAN message into TX1: Right Motor */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX1_INS);
		spi_buffer_CAN(canIDRt, 8, candataRt);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001850:	34420040 	ori	v0,v0,0x40
20001854:	ae020000 	sw	v0,0(s0)

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
20001858:	8e020000 	lw	v0,0(s0)
2000185c:	00000000 	nop
20001860:	00511024 	and	v0,v0,s1
20001864:	ae020000 	sw	v0,0(s0)
20001868:	8e020000 	lw	v0,0(s0)
2000186c:	00000000 	nop
20001870:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, LOAD_TX2_INS);
20001874:	0c000b18 	jal	20002c60 <SPI_Swap>
20001878:	00000000 	nop
		spi_buffer_CAN(0x05A5EEEE, 8, candataEnc);
2000187c:	3c0405a5 	lui	a0,0x5a5
20001880:	278600a8 	addiu	a2,gp,168
20001884:	3484eeee 	ori	a0,a0,0xeeee
20001888:	0c000496 	jal	20001258 <spi_buffer_CAN>
2000188c:	24050008 	li	a1,8
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001890:	8e020000 	lw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
20001894:	00002021 	move	a0,zero

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
		spi_buffer_CAN(0x05A5EEEE, 8, candataEnc);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001898:	ae020000 	sw	v0,0(s0)
2000189c:	8e020000 	lw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
200018a0:	24050081 	li	a1,129

		/* Load CAN message into TX2: Servo controls */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, LOAD_TX2_INS);
		spi_buffer_CAN(0x05A5EEEE, 8, candataEnc);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200018a4:	34420040 	ori	v0,v0,0x40
200018a8:	ae020000 	sw	v0,0(s0)

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
200018ac:	8e020000 	lw	v0,0(s0)
200018b0:	00000000 	nop
200018b4:	00511024 	and	v0,v0,s1
200018b8:	ae020000 	sw	v0,0(s0)
200018bc:	8e020000 	lw	v0,0(s0)
200018c0:	00000000 	nop
200018c4:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX0_INS);
200018c8:	0c000b18 	jal	20002c60 <SPI_Swap>
200018cc:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
200018d0:	8e020000 	lw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
200018d4:	00002021 	move	a0,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200018d8:	ae020000 	sw	v0,0(s0)
200018dc:	8e020000 	lw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
200018e0:	24050082 	li	a1,130
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx0 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX0_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
200018e4:	34420040 	ori	v0,v0,0x40
200018e8:	ae020000 	sw	v0,0(s0)

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
200018ec:	8e020000 	lw	v0,0(s0)
200018f0:	00000000 	nop
200018f4:	00511024 	and	v0,v0,s1
200018f8:	ae020000 	sw	v0,0(s0)
200018fc:	8e020000 	lw	v0,0(s0)
20001900:	00000000 	nop
20001904:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX1_INS);
20001908:	0c000b18 	jal	20002c60 <SPI_Swap>
2000190c:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001910:	8e020000 	lw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
20001914:	00002021 	move	a0,zero
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001918:	ae020000 	sw	v0,0(s0)
2000191c:	8e020000 	lw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
20001920:	24050084 	li	a1,132
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx1 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX1_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001924:	34420040 	ori	v0,v0,0x40
20001928:	ae020000 	sw	v0,0(s0)

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
2000192c:	8e020000 	lw	v0,0(s0)
20001930:	00000000 	nop
20001934:	00518824 	and	s1,v0,s1
20001938:	ae110000 	sw	s1,0(s0)
2000193c:	8e020000 	lw	v0,0(s0)
20001940:	00000000 	nop
20001944:	ae020000 	sw	v0,0(s0)
		SPI_Swap(SPI0, RTS_TX2_INS);
20001948:	0c000b18 	jal	20002c60 <SPI_Swap>
2000194c:	00000000 	nop
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001950:	8e020000 	lw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
20001954:	3c054000 	lui	a1,0x4000
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001958:	ae020000 	sw	v0,0(s0)
2000195c:	8e020000 	lw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
	}

}
20001960:	8fbf001c 	lw	ra,28(sp)
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Tx2 buffer full so request to send */
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);
20001964:	34420040 	ori	v0,v0,0x40
20001968:	ae020000 	sw	v0,0(s0)

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
	}

}
2000196c:	8fb10018 	lw	s1,24(sp)
20001970:	8fb00014 	lw	s0,20(sp)
		GPIO_Write(CS_PIN, GPIO_LOW);
		SPI_Swap(SPI0, RTS_TX2_INS);
		GPIO_Write(CS_PIN, GPIO_HIGH);

		/* Check Rx buffers for incoming message */
		spi_receive_CAN(READ_RX0_INS, &bufferRX0);
20001974:	24a503bc 	addiu	a1,a1,956
20001978:	24040090 	li	a0,144
2000197c:	0800045d 	j	20001174 <spi_receive_CAN>
20001980:	27bd0020 	addiu	sp,sp,32

20001984 <Message_Sender_Init>:
/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
{
20001984:	27bdffe8 	addiu	sp,sp,-24
	/* Task initialisation */
	// SPI  0
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);
20001988:	00002021 	move	a0,zero
2000198c:	00002821 	move	a1,zero
/**
 * Initialisation for the SPI package.
 * This will be called from Tasks_Init by default.
 */
void Message_Sender_Init(void)
{
20001990:	afbf0014 	sw	ra,20(sp)
	/* Task initialisation */
	// SPI  0
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);
20001994:	0c000b0b 	jal	20002c2c <SPI_Init>
20001998:	24060005 	li	a2,5
	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
2000199c:	3c028000 	lui	v0,0x8000
200019a0:	34420600 	ori	v0,v0,0x600
200019a4:	8c440004 	lw	a0,4(v0)
200019a8:	2403ffbf 	li	v1,-65
200019ac:	00831824 	and	v1,a0,v1
200019b0:	ac430004 	sw	v1,4(v0)
200019b4:	8c430004 	lw	v1,4(v0)
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;

	ticked = 0;
}
200019b8:	8fbf0014 	lw	ra,20(sp)
	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
200019bc:	34630040 	ori	v1,v1,0x40
200019c0:	ac430004 	sw	v1,4(v0)
	GPIO_Write(CS_PIN, GPIO_HIGH);
200019c4:	8c440000 	lw	a0,0(v0)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
200019c8:	24030001 	li	v1,1
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);
200019cc:	ac440000 	sw	a0,0(v0)
200019d0:	8c440000 	lw	a0,0(v0)

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;
200019d4:	af800170 	sw	zero,368(gp)

	bufferRX0.status = Used;
	bufferRX1.status = Used;

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);
200019d8:	34840040 	ori	a0,a0,0x40
200019dc:	ac440000 	sw	a0,0(v0)

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
200019e0:	8c450004 	lw	a1,4(v0)
200019e4:	2404fffb 	li	a0,-5
200019e8:	00a42024 	and	a0,a1,a0
200019ec:	ac440004 	sw	a0,4(v0)
200019f0:	8c440004 	lw	a0,4(v0)
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;
200019f4:	3c054000 	lui	a1,0x4000

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
200019f8:	34840004 	ori	a0,a0,0x4
200019fc:	ac440004 	sw	a0,4(v0)
	GPIO_Write(RST_PIN, GPIO_HIGH);
20001a00:	8c440000 	lw	a0,0(v0)
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
	bufferRX1.status = Used;
20001a04:	aca303cc 	sw	v1,972(a1)

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);
20001a08:	ac440000 	sw	a0,0(v0)
20001a0c:	8c440000 	lw	a0,0(v0)
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;
20001a10:	24050033 	li	a1,51

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);
20001a14:	34840004 	ori	a0,a0,0x4
	// Mode 0
	// SCLK 1KHz = (50MHz / 1000)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;
20001a18:	a385016d 	sb	a1,365(gp)

	GPIO_Set_Direction(CS_PIN, GPIO_OUTPUT);
	GPIO_Write(CS_PIN, GPIO_HIGH);

	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);
20001a1c:	ac440000 	sw	a0,0(v0)
	const uint32_t clock_divider = Config_Oscillator_Frequency / 10000000;
	SPI_Init(SPI0, 0, clock_divider);

	speedPin = 0x33;

	bufferRX0.status = Used;
20001a20:	3c024000 	lui	v0,0x4000
20001a24:	ac4303bc 	sw	v1,956(v0)
	GPIO_Set_Direction(RST_PIN, GPIO_OUTPUT);
	GPIO_Write(RST_PIN, GPIO_HIGH);

	init = False;

	ticked = 0;
20001a28:	a7800190 	sh	zero,400(gp)
}
20001a2c:	03e00008 	jr	ra
20001a30:	27bd0018 	addiu	sp,sp,24

20001a34 <Flashing_LED_Init>:
/**
 * Initialises the GPIO pin and outputs the initial value to the LED.
 */
void Flashing_LED_Init(void)
{
	GPIO_Set_Direction(LED_Pin, GPIO_OUTPUT);
20001a34:	3c028000 	lui	v0,0x8000
20001a38:	34420200 	ori	v0,v0,0x200
20001a3c:	8c440004 	lw	a0,4(v0)
20001a40:	2403fdff 	li	v1,-513
20001a44:	00831824 	and	v1,a0,v1
20001a48:	ac430004 	sw	v1,4(v0)
20001a4c:	8c440004 	lw	a0,4(v0)
	GPIO_Write(LED_Pin, led_state);
20001a50:	8f830004 	lw	v1,4(gp)
/**
 * Initialises the GPIO pin and outputs the initial value to the LED.
 */
void Flashing_LED_Init(void)
{
	GPIO_Set_Direction(LED_Pin, GPIO_OUTPUT);
20001a54:	34840200 	ori	a0,a0,0x200
20001a58:	ac440004 	sw	a0,4(v0)
	GPIO_Write(LED_Pin, led_state);
20001a5c:	2c640001 	sltiu	a0,v1,1
20001a60:	8c450000 	lw	a1,0(v0)
20001a64:	00042240 	sll	a0,a0,0x9
20001a68:	00042027 	nor	a0,zero,a0
20001a6c:	00852024 	and	a0,a0,a1
20001a70:	ac440000 	sw	a0,0(v0)
20001a74:	8c440000 	lw	a0,0(v0)
20001a78:	00031a40 	sll	v1,v1,0x9
20001a7c:	00641825 	or	v1,v1,a0
20001a80:	ac430000 	sw	v1,0(v0)
}
20001a84:	03e00008 	jr	ra
20001a88:	00000000 	nop

20001a8c <Flashing_LED_Toggle>:
/**
 * Toggles the state of the GPIO pin and its LED.
 */
void Flashing_LED_Toggle(void)
{
	GPIO_Write(LED_Pin, led_state);
20001a8c:	8f830004 	lw	v1,4(gp)
20001a90:	3c028000 	lui	v0,0x8000
20001a94:	34420200 	ori	v0,v0,0x200
20001a98:	2c640001 	sltiu	a0,v1,1
20001a9c:	8c460000 	lw	a2,0(v0)
20001aa0:	00042a40 	sll	a1,a0,0x9
20001aa4:	00052827 	nor	a1,zero,a1
20001aa8:	00a62824 	and	a1,a1,a2
20001aac:	ac450000 	sw	a1,0(v0)
20001ab0:	8c450000 	lw	a1,0(v0)
20001ab4:	00033240 	sll	a2,v1,0x9
20001ab8:	00c52825 	or	a1,a2,a1
	if(System_Mode_G == Set)
20001abc:	8f860104 	lw	a2,260(gp)
/**
 * Toggles the state of the GPIO pin and its LED.
 */
void Flashing_LED_Toggle(void)
{
	GPIO_Write(LED_Pin, led_state);
20001ac0:	ac450000 	sw	a1,0(v0)
	if(System_Mode_G == Set)
20001ac4:	24050001 	li	a1,1
20001ac8:	14c5000a 	bne	a2,a1,20001af4 <Flashing_LED_Toggle+0x68>
20001acc:	00000000 	nop
	{
		GPIO_Write(Error_Lamp, led_state);
20001ad0:	8c450000 	lw	a1,0(v0)
20001ad4:	00042200 	sll	a0,a0,0x8
20001ad8:	00042027 	nor	a0,zero,a0
20001adc:	00852024 	and	a0,a0,a1
20001ae0:	ac440000 	sw	a0,0(v0)
20001ae4:	8c440000 	lw	a0,0(v0)
20001ae8:	00032a00 	sll	a1,v1,0x8
20001aec:	080006c2 	j	20001b08 <Flashing_LED_Toggle+0x7c>
20001af0:	00a42025 	or	a0,a1,a0
	}
	else
	{
		GPIO_Write(Error_Lamp, GPIO_LOW);
20001af4:	8c450000 	lw	a1,0(v0)
20001af8:	2404feff 	li	a0,-257
20001afc:	00a42024 	and	a0,a1,a0
20001b00:	ac440000 	sw	a0,0(v0)
20001b04:	8c440000 	lw	a0,0(v0)
	}
	led_state = !led_state;
20001b08:	2c630001 	sltiu	v1,v1,1
	{
		GPIO_Write(Error_Lamp, led_state);
	}
	else
	{
		GPIO_Write(Error_Lamp, GPIO_LOW);
20001b0c:	ac440000 	sw	a0,0(v0)
	}
	led_state = !led_state;
}
20001b10:	03e00008 	jr	ra
20001b14:	af830004 	sw	v1,4(gp)

20001b18 <Course_Corrector_Init>:
 * This will be called from Tasks_Init by default.
 */
void Course_Corrector_Init(void)
{
	/* Initialisation of course correction values */
	Course_correction_Lf = False;
20001b18:	af800074 	sw	zero,116(gp)
	Course_correction_Rt = False;
}
20001b1c:	03e00008 	jr	ra
20001b20:	af800064 	sw	zero,100(gp)

20001b24 <Course_Corrector_Update>:
 * Basic implementation: To reduce the speed of the faster side.
 * Advanced requirement: To recalculate the Script to compensate for deviation.
 */
void Course_Corrector_Update(void)
{
	if(System_Mode_G == Go)
20001b24:	8f830104 	lw	v1,260(gp)
20001b28:	24020002 	li	v0,2
20001b2c:	14620011 	bne	v1,v0,20001b74 <Course_Corrector_Update+0x50>
20001b30:	00000000 	nop
	{
		/* Encoder monitor task */
		/* If the Left side is faster than the Right, activate the Left CC flag */
		if((Motor_Lf_Enc_Track - Motor_Rt_Enc_Track) > COURSE_CORRECTION_BUFFER)
20001b34:	8f820040 	lw	v0,64(gp)
20001b38:	8f8300d8 	lw	v1,216(gp)
20001b3c:	00000000 	nop
20001b40:	00432023 	subu	a0,v0,v1
20001b44:	28840002 	slti	a0,a0,2
20001b48:	14800005 	bnez	a0,20001b60 <Course_Corrector_Update+0x3c>
20001b4c:	00621023 	subu	v0,v1,v0
		{
			Course_correction_Lf = False;
			Course_correction_Rt = True;
20001b50:	24020001 	li	v0,1
20001b54:	af820064 	sw	v0,100(gp)
	{
		/* Encoder monitor task */
		/* If the Left side is faster than the Right, activate the Left CC flag */
		if((Motor_Lf_Enc_Track - Motor_Rt_Enc_Track) > COURSE_CORRECTION_BUFFER)
		{
			Course_correction_Lf = False;
20001b58:	03e00008 	jr	ra
20001b5c:	af800074 	sw	zero,116(gp)
			Course_correction_Rt = True;
		}
		/* If the Right side is faster than the Left, activate the Right CC flag */
		else if((Motor_Rt_Enc_Track - Motor_Lf_Enc_Track) > COURSE_CORRECTION_BUFFER)
20001b60:	28420002 	slti	v0,v0,2
20001b64:	14400003 	bnez	v0,20001b74 <Course_Corrector_Update+0x50>
20001b68:	24020001 	li	v0,1
		{
			Course_correction_Lf = True;
20001b6c:	080006de 	j	20001b78 <Course_Corrector_Update+0x54>
20001b70:	af820074 	sw	v0,116(gp)

	}
	/* Ensure default is False */
	else
	{
		Course_correction_Lf = False;
20001b74:	af800074 	sw	zero,116(gp)
		Course_correction_Rt = False;
20001b78:	03e00008 	jr	ra
20001b7c:	af800064 	sw	zero,100(gp)

20001b80 <CAN_relay_Init>:
 * This will be called from Tasks_Init by default.
 */
void CAN_relay_Init(void)
{
	/* Initialisation of variables */
	motor_speed_Lf = 0x0;
20001b80:	a7800196 	sh	zero,406(gp)
	motor_speed_Rt = 0x0;
20001b84:	a7800194 	sh	zero,404(gp)
	motor_direction_Lf = 0x0;
20001b88:	a3800198 	sb	zero,408(gp)
	motor_direction_Rt = 0x0;
20001b8c:	a3800192 	sb	zero,402(gp)
	canIDLf = 0;
20001b90:	af8000e8 	sw	zero,232(gp)
	canIDRt = 0;
20001b94:	af800068 	sw	zero,104(gp)
20001b98:	00001021 	move	v0,zero
	for(uint8_t i = 0; i < 8; i++)
	{
		candataLf[i] = 0;
20001b9c:	2785006c 	addiu	a1,gp,108
		candataRt[i] = 0;
20001ba0:	27840098 	addiu	a0,gp,152
	motor_speed_Rt = 0x0;
	motor_direction_Lf = 0x0;
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
20001ba4:	24030008 	li	v1,8
	{
		candataLf[i] = 0;
20001ba8:	00453821 	addu	a3,v0,a1
		candataRt[i] = 0;
20001bac:	00443021 	addu	a2,v0,a0
20001bb0:	24420001 	addiu	v0,v0,1
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
	{
		candataLf[i] = 0;
20001bb4:	a0e00000 	sb	zero,0(a3)
	motor_speed_Rt = 0x0;
	motor_direction_Lf = 0x0;
	motor_direction_Rt = 0x0;
	canIDLf = 0;
	canIDRt = 0;
	for(uint8_t i = 0; i < 8; i++)
20001bb8:	1443fffb 	bne	v0,v1,20001ba8 <CAN_relay_Init+0x28>
20001bbc:	a0c00000 	sb	zero,0(a2)
		candataLf[i] = 0;
		candataRt[i] = 0;
	}

	/* Initialisation of Sensor Readings */
	sensorReadings.IRLeft = 0xFF;
20001bc0:	3c044000 	lui	a0,0x4000
20001bc4:	240200ff 	li	v0,255
	sensorReadings.IRRight = 0xFF;
20001bc8:	248303dc 	addiu	v1,a0,988
	sensorReadings.USFwd = 0xFF;
20001bcc:	ac620008 	sw	v0,8(v1)
		candataLf[i] = 0;
		candataRt[i] = 0;
	}

	/* Initialisation of Sensor Readings */
	sensorReadings.IRLeft = 0xFF;
20001bd0:	ac8203dc 	sw	v0,988(a0)
	sensorReadings.IRRight = 0xFF;
	sensorReadings.USFwd = 0xFF;
}
20001bd4:	03e00008 	jr	ra
20001bd8:	ac620004 	sw	v0,4(v1)

20001bdc <readCAN>:
	}
}

void readCAN(void)
{
	if((bufferRX0.ID & 0xFF) == 0xC4)
20001bdc:	3c024000 	lui	v0,0x4000
20001be0:	244203bc 	addiu	v0,v0,956
20001be4:	90440004 	lbu	a0,4(v0)
20001be8:	240300c4 	li	v1,196
20001bec:	14830010 	bne	a0,v1,20001c30 <readCAN+0x54>
20001bf0:	00000000 	nop
	{
		/* Check to see data received from Proximity sensor */
		sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
		sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

		sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001bf4:	9046000e 	lbu	a2,14(v0)
20001bf8:	9043000f 	lbu	v1,15(v0)
void readCAN(void)
{
	if((bufferRX0.ID & 0xFF) == 0xC4)
	{
		/* Check to see data received from Proximity sensor */
		sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001bfc:	9045000b 	lbu	a1,11(v0)
		sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001c00:	9044000d 	lbu	a0,13(v0)

		sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001c04:	30c6003f 	andi	a2,a2,0x3f
20001c08:	3062003f 	andi	v0,v1,0x3f
20001c0c:	00063180 	sll	a2,a2,0x6
void readCAN(void)
{
	if((bufferRX0.ID & 0xFF) == 0xC4)
	{
		/* Check to see data received from Proximity sensor */
		sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001c10:	3c034000 	lui	v1,0x4000
		sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;

		sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001c14:	00c23025 	or	a2,a2,v0
void readCAN(void)
{
	if((bufferRX0.ID & 0xFF) == 0xC4)
	{
		/* Check to see data received from Proximity sensor */
		sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001c18:	30a5003f 	andi	a1,a1,0x3f
		sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001c1c:	246203dc 	addiu	v0,v1,988
20001c20:	3084003f 	andi	a0,a0,0x3f

		sensorReadings.USFwd = ((((bufferRX0.CAN_Data[6] & 0x3F) << 6) | (bufferRX0.CAN_Data[7] & 0x3F)) & 0x0FFF);
20001c24:	ac460008 	sw	a2,8(v0)
void readCAN(void)
{
	if((bufferRX0.ID & 0xFF) == 0xC4)
	{
		/* Check to see data received from Proximity sensor */
		sensorReadings.IRLeft = bufferRX0.CAN_Data[3] & 0x3F;
20001c28:	ac6503dc 	sw	a1,988(v1)
		sensorReadings.IRRight = bufferRX0.CAN_Data[5] & 0x3F;
20001c2c:	ac440004 	sw	a0,4(v0)
20001c30:	03e00008 	jr	ra
20001c34:	00000000 	nop

20001c38 <constructCANEnc>:
}

void constructCANEnc(void)
{

	candataEnc[0] =  (WheelCounts_Left_G  >>24)&0xFF;
20001c38:	8f830088 	lw	v1,136(gp)
	candataEnc[1] =  (WheelCounts_Left_G  >>16)&0xFF;
	candataEnc[2] =  (WheelCounts_Left_G  >>8) &0xFF;
	candataEnc[3] =  (WheelCounts_Left_G  >>0) &0xFF;
	candataEnc[4] =  (WheelCounts_Right_G >>24)&0xFF;
20001c3c:	8f8200c8 	lw	v0,200(gp)
}

void constructCANEnc(void)
{

	candataEnc[0] =  (WheelCounts_Left_G  >>24)&0xFF;
20001c40:	00034e02 	srl	t1,v1,0x18
	candataEnc[1] =  (WheelCounts_Left_G  >>16)&0xFF;
20001c44:	00034403 	sra	t0,v1,0x10
	candataEnc[2] =  (WheelCounts_Left_G  >>8) &0xFF;
20001c48:	00033a03 	sra	a3,v1,0x8
	candataEnc[3] =  (WheelCounts_Left_G  >>0) &0xFF;
	candataEnc[4] =  (WheelCounts_Right_G >>24)&0xFF;
20001c4c:	00023602 	srl	a2,v0,0x18
	candataEnc[5] =  (WheelCounts_Right_G >>16)&0xFF;
20001c50:	00022c03 	sra	a1,v0,0x10
	candataEnc[6] =  (WheelCounts_Right_G >>8) &0xFF;
20001c54:	00022203 	sra	a0,v0,0x8
}

void constructCANEnc(void)
{

	candataEnc[0] =  (WheelCounts_Left_G  >>24)&0xFF;
20001c58:	a38900a8 	sb	t1,168(gp)
	candataEnc[1] =  (WheelCounts_Left_G  >>16)&0xFF;
20001c5c:	a38800a9 	sb	t0,169(gp)
	candataEnc[2] =  (WheelCounts_Left_G  >>8) &0xFF;
20001c60:	a38700aa 	sb	a3,170(gp)
	candataEnc[3] =  (WheelCounts_Left_G  >>0) &0xFF;
20001c64:	a38300ab 	sb	v1,171(gp)
	candataEnc[4] =  (WheelCounts_Right_G >>24)&0xFF;
20001c68:	a38600ac 	sb	a2,172(gp)
	candataEnc[5] =  (WheelCounts_Right_G >>16)&0xFF;
20001c6c:	a38500ad 	sb	a1,173(gp)
	candataEnc[6] =  (WheelCounts_Right_G >>8) &0xFF;
20001c70:	a38400ae 	sb	a0,174(gp)
	candataEnc[7] =  (WheelCounts_Right_G >>0) &0xFF;
}
20001c74:	03e00008 	jr	ra
20001c78:	a38200af 	sb	v0,175(gp)

20001c7c <CAN_relay_Update>:

/**
 * Retrieves and translates the Speed and Direction from the Motor Tasks into CAN messages.
 */
void CAN_relay_Update(void)
{
20001c7c:	27bdffe8 	addiu	sp,sp,-24
20001c80:	afbf0014 	sw	ra,20(sp)
	/* If the System is in GO mode, perform the calculations and translation */
	//if(System_Mode_G == Go)
	{
		/* Read CAN buffer */
		readCAN();
20001c84:	0c0006f7 	jal	20001bdc <readCAN>
20001c88:	00000000 	nop

		/* Motor direction control */
		switch(Left_motor_direction_G)
20001c8c:	8f820094 	lw	v0,148(gp)
20001c90:	24030001 	li	v1,1
20001c94:	10430003 	beq	v0,v1,20001ca4 <CAN_relay_Update+0x28>
20001c98:	24030002 	li	v1,2
20001c9c:	14430003 	bne	v0,v1,20001cac <CAN_relay_Update+0x30>
20001ca0:	00000000 	nop
		case Forwards:
			motor_direction_Lf = 0x1;
			break;
		case Reverse:
			motor_direction_Lf = 0x2;
			break;
20001ca4:	0800072c 	j	20001cb0 <CAN_relay_Update+0x34>
20001ca8:	a3820198 	sb	v0,408(gp)
		case Off:
		default:
			motor_direction_Lf = 0x0;
20001cac:	a3800198 	sb	zero,408(gp)
			break;
		}

		switch(Right_motor_direction_G)
20001cb0:	8f820084 	lw	v0,132(gp)
20001cb4:	24030001 	li	v1,1
20001cb8:	10430003 	beq	v0,v1,20001cc8 <CAN_relay_Update+0x4c>
20001cbc:	24030002 	li	v1,2
20001cc0:	14430003 	bne	v0,v1,20001cd0 <CAN_relay_Update+0x54>
20001cc4:	00000000 	nop
		case Forwards:
			motor_direction_Rt = 0x1;
			break;
		case Reverse:
			motor_direction_Rt = 0x2;
			break;
20001cc8:	08000735 	j	20001cd4 <CAN_relay_Update+0x58>
20001ccc:	a3820192 	sb	v0,402(gp)
		case Off:
		default:
			motor_direction_Rt = 0x0;
20001cd0:	a3800192 	sb	zero,402(gp)
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001cd4:	978300b0 	lhu	v1,176(gp)
		motor_speed_Rt = Right_motor_speed_G * 2;
20001cd8:	978200b2 	lhu	v0,178(gp)
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001cdc:	00031840 	sll	v1,v1,0x1
20001ce0:	3063ffff 	andi	v1,v1,0xffff
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
	candataLf[3] = motor_speed_Lf >> 8;
20001ce4:	00033202 	srl	a2,v1,0x8
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
		motor_speed_Rt = Right_motor_speed_G * 2;
20001ce8:	00021040 	sll	v0,v0,0x1
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001cec:	93870198 	lbu	a3,408(gp)
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
	candataRt[0] = motor_direction_Rt & 0x3;
20001cf0:	93850192 	lbu	a1,402(gp)
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
		motor_speed_Rt = Right_motor_speed_G * 2;
20001cf4:	3042ffff 	andi	v0,v0,0xffff
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001cf8:	3c0814ef 	lui	t0,0x14ef
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
	candataLf[3] = motor_speed_Lf >> 8;
20001cfc:	a386006f 	sb	a2,111(gp)
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001d00:	3c0610ef 	lui	a2,0x10ef
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001d04:	30e70003 	andi	a3,a3,0x3
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
	candataRt[0] = motor_direction_Rt & 0x3;
20001d08:	30a50003 	andi	a1,a1,0x3
	candataRt[2] = motor_speed_Rt & 0xFF;
	candataRt[3] = motor_speed_Rt >> 8;
20001d0c:	00022202 	srl	a0,v0,0x8
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001d10:	3508d000 	ori	t0,t0,0xd000
	candataLf[3] = motor_speed_Lf >> 8;
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001d14:	34c6d100 	ori	a2,a2,0xd100
	/* Force the Robot to stop by flooding the CAN with the STOP message */
	//else
	{
		//constructStopCAN();
	}
}
20001d18:	8fbf0014 	lw	ra,20(sp)
20001d1c:	27bd0018 	addiu	sp,sp,24
	 * Byte 0: Priority. (Bits 3,4,5) [Bits 0,1,2,6,7 excluded]
	 * Byte 1: PDU1 Proprietary A identifier for peer-to-peer communications.
	 * Byte 2: Destination Peer Address: Motor Controller Address. Configurable using MC configuration utility.
	 * Byte 3: Source Peer Address.
	 */
	canIDLf = 0x14EFD000;
20001d20:	af8800e8 	sw	t0,232(gp)
	/* CAN_Data
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
20001d24:	a387006c 	sb	a3,108(gp)
	candataLf[3] = motor_speed_Lf >> 8;
}

void constructCANRt(void)
{
	canIDRt = 0x10EFD100;
20001d28:	af860068 	sw	a2,104(gp)
	candataRt[0] = motor_direction_Rt & 0x3;
20001d2c:	a3850098 	sb	a1,152(gp)
	candataRt[2] = motor_speed_Rt & 0xFF;
	candataRt[3] = motor_speed_Rt >> 8;
20001d30:	a384009b 	sb	a0,155(gp)
			motor_direction_Rt = 0x0;
			break;
		}

		/* Motor speed value has a resolution of 0.5 RPM per bit; multiply value by 2 */
		motor_speed_Lf = Left_motor_speed_G * 2;
20001d34:	a7830196 	sh	v1,406(gp)
		motor_speed_Rt = Right_motor_speed_G * 2;
20001d38:	a7820194 	sh	v0,404(gp)
	 * Byte 0: Motor direction
	 * Byte 2: Motor speed LO_BYTE
	 * Byte 3: Motor speed HI_BYTE
	 */
	candataLf[0] = motor_direction_Lf & 0x3;
	candataLf[2] = motor_speed_Lf & 0xFF;
20001d3c:	a383006e 	sb	v1,110(gp)


		/* Construct the CAN messages based on the information */
		constructCANLf();
		constructCANRt();
		constructCANEnc();
20001d40:	0800070e 	j	20001c38 <constructCANEnc>
20001d44:	a382009a 	sb	v0,154(gp)

20001d48 <Handler>:
        .section .text.Handler
        .ent Handler
        .set noat
        .set noreorder
Handler:
        mfc0   $26, $13			# Read CP0 Cause register
20001d48:	401a6800 	mfc0	k0,c0_cause
		nop
20001d4c:	00000000 	nop
		and    $27, $26, 0x3f
20001d50:	335b003f 	andi	k1,k0,0x3f
		la	   $26, TableBase
20001d54:	3c1a4000 	lui	k0,0x4000
20001d58:	275a0138 	addiu	k0,k0,312
		addu   $26, $26, $27
20001d5c:	035bd021 	addu	k0,k0,k1
		lw     $27, 0($26)
20001d60:	8f5b0000 	lw	k1,0(k0)
		nop
20001d64:	00000000 	nop
		j	   $27
20001d68:	03600008 	jr	k1
        nop
20001d6c:	00000000 	nop

20001d70 <End_Handler>:
        .end Handler

      .globl End_Handler
      .ent End_Handler
End_Handler:
 		mfc0   $26,$14         # Read CP0 EPC return address Reg
20001d70:	401a7000 	mfc0	k0,c0_epc
        nop
20001d74:	00000000 	nop
        j      $26             # Return from handler
20001d78:	03400008 	jr	k0
        rfe
20001d7c:	42000010 	rfe

20001d80 <Excpt_Unused>:
	.set noreorder
	.set noat

	.globl Excpt_Unused
Excpt_Unused:
        j    Excpt_Unused 	# Loop
20001d80:	08000760 00000000                       `.......

20001d88 <Excpt_IAbort>:
        nop

	.globl Excpt_IAbort
Excpt_IAbort:
		mfc0   $26,$14         # Read CP0 EPC return address Reg
20001d88:	401a7000 08000762 00000000              .p.@b.......

20001d94 <Excpt_DAbort>:
        j    Excpt_IAbort 	   # Loop
        nop

	.globl Excpt_DAbort
Excpt_DAbort:
        j    Excpt_DAbort 	   # Loop
20001d94:	08000765 00000000                       e.......

20001d9c <Excpt_Syscall>:
        nop

	.globl Excpt_Syscall
Excpt_Syscall:
        j    Excpt_Syscall 	   # Loop
20001d9c:	08000767 00000000                       g.......

20001da4 <Excpt_UndefInst>:
        nop

	.globl Excpt_UndefInst
Excpt_UndefInst:
        j    Excpt_UndefInst   # Loop
20001da4:	08000769 00000000                       i.......

20001dac <Excpt_Overflow>:
        nop

	.globl Excpt_Overflow
Excpt_Overflow:
        j    Excpt_Overflow	   # Loop
20001dac:	0800076b 00000000                       k.......

20001db4 <Excpt_CoPro>:
        nop

	.globl Excpt_CoPro
Excpt_CoPro:
        j    Excpt_CoPro	   # Loop
20001db4:	0800076d 00000000                       m.......

20001dbc <Excpt_Break>:
        nop

	.globl Excpt_Break
Excpt_Break:
        j    Excpt_Break	   # Loop
20001dbc:	0800076f 00000000                       o.......

20001dc4 <InterruptHandler>:
        .ent InterruptHandler
        .set noat
        .set noreorder
InterruptHandler:
		/* Temporarily store the User Stack Pointer */
		move $k1, $sp
20001dc4:	03a0d821 	move	k1,sp

		/* Load the IRQ Stack Pointer */
		la $k0, IRQ_Stk_Base_Val
20001dc8:	3c1a4000 	lui	k0,0x4000
20001dcc:	375a4000 	ori	k0,k0,0x4000
		move $sp, $k0
20001dd0:	0340e821 	move	sp,k0

		/* Allocate stack space */
#ifndef FPU
		subu $sp, 120
20001dd4:	27bdff88 	addiu	sp,sp,-120
#else
		subu $sp, 252
#endif

		/* Save all the key general purpose registers */
		sw $ra,   4($sp)
20001dd8:	afbf0004 	sw	ra,4(sp)
        sw $t9,   8($sp)
20001ddc:	afb90008 	sw	t9,8(sp)
        sw $t8,  12($sp)
20001de0:	afb8000c 	sw	t8,12(sp)
        sw $s7,  16($sp)
20001de4:	afb70010 	sw	s7,16(sp)
        sw $s6,  20($sp)
20001de8:	afb60014 	sw	s6,20(sp)
        sw $s5,  24($sp)
20001dec:	afb50018 	sw	s5,24(sp)
        sw $s4,  28($sp)
20001df0:	afb4001c 	sw	s4,28(sp)
        sw $s3,  32($sp)
20001df4:	afb30020 	sw	s3,32(sp)
        sw $s2,  36($sp)
20001df8:	afb20024 	sw	s2,36(sp)
        sw $s1,  40($sp)
20001dfc:	afb10028 	sw	s1,40(sp)
        sw $s0,  44($sp)
20001e00:	afb0002c 	sw	s0,44(sp)
        sw $t7,  48($sp)
20001e04:	afaf0030 	sw	t7,48(sp)
        sw $t6,  52($sp)
20001e08:	afae0034 	sw	t6,52(sp)
        sw $t5,  56($sp)
20001e0c:	afad0038 	sw	t5,56(sp)
        sw $t4,  60($sp)
20001e10:	afac003c 	sw	t4,60(sp)
        sw $t3,  64($sp)
20001e14:	afab0040 	sw	t3,64(sp)
        sw $t2,  68($sp)
20001e18:	afaa0044 	sw	t2,68(sp)
        sw $t1,  72($sp)
20001e1c:	afa90048 	sw	t1,72(sp)
        sw $t0,  76($sp)
20001e20:	afa8004c 	sw	t0,76(sp)
        sw $a3,  80($sp)
20001e24:	afa70050 	sw	a3,80(sp)
        sw $a2,  84($sp)
20001e28:	afa60054 	sw	a2,84(sp)
        sw $a1,  88($sp)
20001e2c:	afa50058 	sw	a1,88(sp)
        sw $a0,  92($sp)
20001e30:	afa4005c 	sw	a0,92(sp)
        sw $v1,  96($sp)
20001e34:	afa30060 	sw	v1,96(sp)
        sw $v0, 100($sp)
20001e38:	afa20064 	sw	v0,100(sp)
        sw $at, 104($sp)
20001e3c:	afa10068 	sw	at,104(sp)
        sw $k1, 108($sp)
20001e40:	afbb006c 	sw	k1,108(sp)
		swc1 $f31, 236($sp)
		sw $t1, 240($sp)
#endif

        /* Get the Return Address (EPC) */
        mfc0 $k0, $14
20001e44:	401a7000 	mfc0	k0,c0_epc

		/* Store the stack frame */
#ifndef FPU
		sw $fp, 112($sp)
20001e48:	afbe0070 	sw	s8,112(sp)
		sw $k0, 116($sp)
20001e4c:	afba0074 	sw	k0,116(sp)
#else
		sw $fp, 244($sp)
		sw $k0, 248($sp)
#endif
		move $fp,$sp
20001e50:	03a0f021 	move	s8,sp

		/* Clear pending interrupts */
		mfc0 $26,$13
20001e54:	401a6800 	mfc0	k0,c0_cause
        nop
20001e58:	00000000 	nop
        li   $26,0xFF00
20001e5c:	341aff00 	li	k0,0xff00
        mtc0 $26,$13
20001e60:	409a6800 	mtc0	k0,c0_cause

 		subu $sp, 24
20001e64:	27bdffe8 	addiu	sp,sp,-24

		/* Call C handler */
 		jal   Handle_Interrupts
20001e68:	0c000ab7 	jal	20002adc <Handle_Interrupts>
        nop
20001e6c:	00000000 	nop

        addu $sp, 24
20001e70:	27bd0018 	addiu	sp,sp,24
		lwc1 $f31, 236($sp)
		ctc1 $t0, $31
#endif

		/* Restore all the key general purpose registers */
		lw $ra,   4($sp)
20001e74:	8fbf0004 	lw	ra,4(sp)
        lw $t9,   8($sp)
20001e78:	8fb90008 	lw	t9,8(sp)
        lw $t8,  12($sp)
20001e7c:	8fb8000c 	lw	t8,12(sp)
        lw $s7,  16($sp)
20001e80:	8fb70010 	lw	s7,16(sp)
        lw $s6,  20($sp)
20001e84:	8fb60014 	lw	s6,20(sp)
        lw $s5,  24($sp)
20001e88:	8fb50018 	lw	s5,24(sp)
        lw $s4,  28($sp)
20001e8c:	8fb4001c 	lw	s4,28(sp)
        lw $s3,  32($sp)
20001e90:	8fb30020 	lw	s3,32(sp)
        lw $s2,  36($sp)
20001e94:	8fb20024 	lw	s2,36(sp)
        lw $s1,  40($sp)
20001e98:	8fb10028 	lw	s1,40(sp)
        lw $s0,  44($sp)
20001e9c:	8fb0002c 	lw	s0,44(sp)
        lw $t7,  48($sp)
20001ea0:	8faf0030 	lw	t7,48(sp)
        lw $t6,  52($sp)
20001ea4:	8fae0034 	lw	t6,52(sp)
        lw $t5,  56($sp)
20001ea8:	8fad0038 	lw	t5,56(sp)
        lw $t4,  60($sp)
20001eac:	8fac003c 	lw	t4,60(sp)
        lw $t3,  64($sp)
20001eb0:	8fab0040 	lw	t3,64(sp)
        lw $t2,  68($sp)
20001eb4:	8faa0044 	lw	t2,68(sp)
        lw $t1,  72($sp)
20001eb8:	8fa90048 	lw	t1,72(sp)
        lw $t0,  76($sp)
20001ebc:	8fa8004c 	lw	t0,76(sp)
        lw $a3,  80($sp)
20001ec0:	8fa70050 	lw	a3,80(sp)
        lw $a2,  84($sp)
20001ec4:	8fa60054 	lw	a2,84(sp)
        lw $a1,  88($sp)
20001ec8:	8fa50058 	lw	a1,88(sp)
        lw $a0,  92($sp)
20001ecc:	8fa4005c 	lw	a0,92(sp)
        lw $v1,  96($sp)
20001ed0:	8fa30060 	lw	v1,96(sp)
        lw $v0, 100($sp)
20001ed4:	8fa20064 	lw	v0,100(sp)
        lw $at, 104($sp)
20001ed8:	8fa10068 	lw	at,104(sp)
        lw $k0, 108($sp)
20001edc:	8fba006c 	lw	k0,108(sp)

#ifndef FPU
		/* Restore the stack frame */
		lw	$fp,112($sp)
20001ee0:	8fbe0070 	lw	s8,112(sp)

        /* Get the Return Address (EPC) */
        lw $k1, 116($sp)
20001ee4:	8fbb0074 	lw	k1,116(sp)
        
        /* Restore the stack pointer */
        addu $sp, 120
20001ee8:	27bd0078 	addiu	sp,sp,120

        /* Restore the stack pointer */
        addu $sp, 252
#endif
        /* Load the User Stack Pointer */
        move $sp, $k0
20001eec:	0340e821 	move	sp,k0

        /* Return from interrupt */
        j  $k1
20001ef0:	03600008 	jr	k1

20001ef4 <End_IRQ_Ptr>:
End_IRQ_Ptr:
        rfe
20001ef4:	42000010                                ...B

20001ef8 <Enable_Interrupts>:
	.global Enable_Interrupts
	.ent Enable_Interrupts

        .set noreorder
Enable_Interrupts:
        addiu   $29, $29, -24
20001ef8:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001efc:	afa80004 	sw	t0,4(sp)

        mfc0   $8, $12
20001f00:	40086000 	mfc0	t0,c0_sr
        nop
20001f04:	00000000 	nop
        ori   $8, $8, 0x01
20001f08:	35080001 	ori	t0,t0,0x1
        nop
20001f0c:	00000000 	nop
        mtc0   $8, $12
20001f10:	40886000 	mtc0	t0,c0_sr
        nop
20001f14:	00000000 	nop

        lw   $8, 4($29)
20001f18:	8fa80004 	lw	t0,4(sp)
        addiu   $29, $29, 24
20001f1c:	27bd0018 	addiu	sp,sp,24
        jr   $31
20001f20:	03e00008 	jr	ra
        nop
20001f24:	00000000 	nop

20001f28 <Disable_Interrupts>:
	.global Disable_Interrupts
	.ent Disable_Interrupts

    	.set noreorder
Disable_Interrupts:
        addiu   $29, $29, -24
20001f28:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001f2c:	afa80004 	sw	t0,4(sp)

        mfc0    $8, $12
20001f30:	40086000 	mfc0	t0,c0_sr
        lui     $9, 0xFFFF
20001f34:	3c09ffff 	lui	t1,0xffff
        ori     $9, 0xFFFE
20001f38:	3529fffe 	ori	t1,t1,0xfffe
        nop
20001f3c:	00000000 	nop
        and     $8, $8, $9
20001f40:	01094024 	and	t0,t0,t1
        nop
20001f44:	00000000 	nop
        mtc0   $8, $12
20001f48:	40886000 	mtc0	t0,c0_sr
        nop
20001f4c:	00000000 	nop

        lw   $8, 4($29)
20001f50:	8fa80004 	lw	t0,4(sp)
        addiu   $29, $29, 24
20001f54:	27bd0018 	addiu	sp,sp,24
        jr   $31
20001f58:	03e00008 	jr	ra
        nop
20001f5c:	00000000 	nop

20001f60 <Enter_Sleep_Mode>:
	.global Sleep_Ptr
	.ent Enter_Sleep_Mode

    	.set noreorder
Enter_Sleep_Mode:
        addiu   $29, $29, -24
20001f60:	27bdffe8 	addiu	sp,sp,-24
        .frame $29, 24, $31
        sw   $8, 4($29)
20001f64:	afa80004 	sw	t0,4(sp)

        mfc0   $8, $16
20001f68:	40088000 	mfc0	t0,$16
        ori    $8, $8, 1
20001f6c:	35080001 	ori	t0,t0,0x1

20001f70 <Sleep_Ptr>:
Sleep_Ptr:
        mtc0   $8, $16
20001f70:	40888000 00000000 8fa80004 27bd0018     ...@...........'
        nop

        lw   $8, 4($29)
        addiu   $29, $29, 24
        jr   $31
20001f80:	03e00008 00000000                       ........

20001f88 <LOG_Trigger_Breakpoint>:
	.section .text.LOG_Trigger_Breakpoint
	.global LOG_Trigger_Breakpoint
	.ent LOG_Trigger_Breakpoint
	
LOG_Trigger_Breakpoint:
	jr $31
20001f88:	03e00008 	jr	ra
20001f8c:	00000000 	nop

20001f90 <Scheduler_Tick>:

void Scheduler_Tick(void)
{
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
20001f90:	8f840008 	lw	a0,8(gp)

// Found in Scheduler_Tick, below.
extern void Hybrid_End_Label(void);

void Scheduler_Tick(void)
{
20001f94:	27bdffd0 	addiu	sp,sp,-48
20001f98:	afb60028 	sw	s6,40(sp)
20001f9c:	afb50024 	sw	s5,36(sp)
20001fa0:	afb40020 	sw	s4,32(sp)
20001fa4:	afb3001c 	sw	s3,28(sp)
20001fa8:	afb20018 	sw	s2,24(sp)
20001fac:	afb00010 	sw	s0,16(sp)
20001fb0:	afbf002c 	sw	ra,44(sp)
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
20001fb4:	0c0009d4 	jal	20002750 <Log_Tick_Start>
20001fb8:	afb10014 	sw	s1,20(sp)
#endif

	system_time += tick_skip_time;
20001fbc:	8f82000c 	lw	v0,12(gp)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001fc0:	3c124000 	lui	s2,0x4000
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;
20001fc4:	24420001 	addiu	v0,v0,1
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001fc8:	3c162000 	lui	s6,0x2000
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001fcc:	00008021 	move	s0,zero
#if (Config_Hardware_Scheduler != TRUE)
#if (Config_Logging == TRUE)
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;
20001fd0:	af82000c 	sw	v0,12(gp)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001fd4:	26520058 	addiu	s2,s2,88
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20001fd8:	26d62064 	addiu	s6,s6,8292
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001fdc:	8f95ffd8 	lw	s5,-40(gp)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001fe0:	24140003 	li	s4,3
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20001fe4:	0800081e 	j	20002078 <Hybrid_End_Label+0x14>
20001fe8:	24130018 	li	s3,24
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001fec:	00001012 	mflo	v0
20001ff0:	24420001 	addiu	v0,v0,1
20001ff4:	000210c0 	sll	v0,v0,0x3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20001ff8:	02130018 	mult	s0,s3

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
20001ffc:	00521021 	addu	v0,v0,s2
20002000:	8c430000 	lw	v1,0(v0)
20002004:	00000000 	nop
20002008:	2463ffff 	addiu	v1,v1,-1
2000200c:	ac430000 	sw	v1,0(v0)

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20002010:	00008812 	mflo	s1
20002014:	02328821 	addu	s1,s1,s2
20002018:	8e250000 	lw	a1,0(s1)
	ready &= Tasks[task_index].delay_counter <= 0;
2000201c:	8c430000 	lw	v1,0(v0)
20002020:	0005282b 	sltu	a1,zero,a1
20002024:	28630001 	slti	v1,v1,1
#if (Config_Hybrid_Tasks == TRUE)
	ready &= Tasks[task_index].exec_from_isr == in_isr;
20002028:	92240014 	lbu	a0,20(s1)

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter -= tick_skip_time;
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
2000202c:	00651824 	and	v1,v1,a1
20002030:	00641824 	and	v1,v1,a0
20002034:	1060000f 	beqz	v1,20002074 <Hybrid_End_Label+0x10>
20002038:	00000000 	nop
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
2000203c:	8e230004 	lw	v1,4(s1)
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20002040:	24040001 	li	a0,1
	{
		Tasks[i].delay_counter -= tick_skip_time;
#if (Config_Hybrid_Tasks == TRUE)
		if (Task_Ready(i, TRUE))
		{
			Tasks[i].delay_counter = Tasks[i].period_reload;
20002044:	ac430000 	sw	v1,0(v0)
#if (Config_Logging == TRUE)
			Log_Set_Address(TRUE, (uint32_t) Tasks[i].task_function,
20002048:	8e250000 	lw	a1,0(s1)
2000204c:	0c00093f 	jal	200024fc <Log_Set_Address>
20002050:	02c03021 	move	a2,s6
							(uint32_t) Hybrid_End_Label);
#endif

			(*Tasks[i].task_function)();
20002054:	8e220000 	lw	v0,0(s1)
20002058:	00000000 	nop
2000205c:	0040f809 	jalr	v0
20002060:	00000000 	nop

20002064 <Hybrid_End_Label>:

			__asm__ volatile(".global Hybrid_End_Label");
			__asm__ volatile("Hybrid_End_Label:");

#if (Config_Logging == TRUE)
			Log_Hybrid_Start(i);
20002064:	0c0009fe 02002021 0c0009f2 02002021     ....! ......! ..
	Log_Tick_Start(current_task);
#endif

	system_time += tick_skip_time;

	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002074:	26100001 0215102b 1440ffdb 02140018     ...&+.....@.....
		}
#endif
	}

#if (Config_Logging == TRUE)
	Log_Reset_Addresses();
20002084:	0c000925 00000000 8f840008 8fbf002c     %...........,...
	tick_skip_time = Next_Tick();
	Timer_Set_Match(Config_Scheduler_Timer_Number,
			tick_skip_time * single_tick_time);
#endif
#endif
}
20002094:	8fb60028 8fb50024 8fb40020 8fb3001c     (...$... .......
200020a4:	8fb20018 8fb10014 8fb00010 08000a8f     ................
#endif
	}

#if (Config_Logging == TRUE)
	Log_Reset_Addresses();
	Log_Tick_End(current_task);
200020b4:	27bd0030                                0..'

200020b8 <Scheduler_Dispatch>:

// Found in Scheduler_Dispatch, below.
extern void Task_End_Label(void);

void Scheduler_Dispatch(void)
{
200020b8:	27bdffd0 	addiu	sp,sp,-48
200020bc:	afb60028 	sw	s6,40(sp)
200020c0:	afb3001c 	sw	s3,28(sp)
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
200020c4:	3c162000 	lui	s6,0x2000

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
200020c8:	3c134000 	lui	s3,0x4000

// Found in Scheduler_Dispatch, below.
extern void Task_End_Label(void);

void Scheduler_Dispatch(void)
{
200020cc:	afb50024 	sw	s5,36(sp)
200020d0:	afb40020 	sw	s4,32(sp)
200020d4:	afb20018 	sw	s2,24(sp)
200020d8:	afbf002c 	sw	ra,44(sp)
200020dc:	afb10014 	sw	s1,20(sp)
200020e0:	afb00010 	sw	s0,16(sp)
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
200020e4:	0c000ac7 	jal	20002b1c <Disable_Interrupt>
200020e8:	26730058 	addiu	s3,s3,88
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
200020ec:	26d62178 	addiu	s6,s6,8568
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200020f0:	8f92ffd8 	lw	s2,-40(gp)

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
200020f4:	24150018 	li	s5,24

void Scheduler_Dispatch(void)
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
200020f8:	08000869 	j	200021a4 <Task_End_Label+0x2c>
200020fc:	24140003 	li	s4,3
static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
	ready &= Tasks[task_index].delay_counter <= 0;
20002100:	00001012 	mflo	v0
20002104:	24420001 	addiu	v0,v0,1
20002108:	000210c0 	sll	v0,v0,0x3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
2000210c:	02150018 	mult	s0,s5
	ready &= Tasks[task_index].delay_counter <= 0;
20002110:	00531021 	addu	v0,v0,s3

static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
20002114:	00008812 	mflo	s1
20002118:	02338821 	addu	s1,s1,s3
2000211c:	8e230000 	lw	v1,0(s1)
	ready &= Tasks[task_index].delay_counter <= 0;
20002120:	8c450000 	lw	a1,0(v0)
#if (Config_Hybrid_Tasks == TRUE)
	ready &= Tasks[task_index].exec_from_isr == in_isr;
20002124:	92240014 	lbu	a0,20(s1)
static inline boolean_t Task_Ready(const uint32_t task_index,
								   TTE_UNUSED const boolean_t in_isr)
{
	// Avoid short-circuiting, to eliminate jitter.
	boolean_t ready = Tasks[task_index].task_function != NULL;
	ready &= Tasks[task_index].delay_counter <= 0;
20002128:	28a50001 	slti	a1,a1,1
2000212c:	0003182b 	sltu	v1,zero,v1
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
		{
			if (Task_Ready(i, FALSE))
20002130:	00a31824 	and	v1,a1,v1
20002134:	2c840001 	sltiu	a0,a0,1
20002138:	00641824 	and	v1,v1,a0
2000213c:	10600015 	beqz	v1,20002194 <Task_End_Label+0x1c>
20002140:	00000000 	nop
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
20002144:	8e230004 	lw	v1,4(s1)
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20002148:	00002021 	move	a0,zero
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
		{
			if (Task_Ready(i, FALSE))
			{
				Tasks[i].delay_counter = Tasks[i].period_reload;
2000214c:	ac430000 	sw	v1,0(v0)
#if (Config_Logging == TRUE)
				Log_Set_Address(FALSE, (uint32_t) Tasks[i].task_function,
20002150:	8e250000 	lw	a1,0(s1)
20002154:	0c00093f 	jal	200024fc <Log_Set_Address>
20002158:	02c03021 	move	a2,s6
								(uint32_t) Task_End_Label);
#endif

				current_task = i;
2000215c:	af900008 	sw	s0,8(gp)
				Enable_Interrupt();
20002160:	0c000ab9 	jal	20002ae4 <Enable_Interrupt>
20002164:	00000000 	nop

				(*Tasks[i].task_function)();
20002168:	8e220000 	lw	v0,0(s1)
2000216c:	00000000 	nop
20002170:	0040f809 	jalr	v0
20002174:	00000000 	nop

20002178 <Task_End_Label>:

				__asm__ volatile(".global Task_End_Label");
				__asm__ volatile("Task_End_Label:");

				Disable_Interrupt();
20002178:	0c000ac7 00000000 02002021 0c000a46     ........! ..F...
				current_task = Config_Num_Tasks;

#if (Config_Logging == TRUE)
				Log_Task_Start(i);
20002188:	af920008 0c000a3a 02002021 26100001     ....:...! .....&
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
	{
		for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002198:	0212102b 1440ffd8 02140018 0c000ac7     +.....@.........

static inline boolean_t Update_Required(void)
{
	boolean_t update = FALSE;

	Disable_Interrupt();
200021a8:	00000000 8f82000c 00000000 10400005     ..............@.
	if (system_time > 0)
200021b8:	00008021 8f82000c 24100001 2442ffff     !..........$..B$
	{
		update = TRUE;
		system_time--;
200021c8:	af82000c 0c000ab9 00000000 1600fff0     ................

void Scheduler_Dispatch(void)
{
#if (Config_Hardware_Scheduler != TRUE)
	Disable_Interrupt();
	while (Update_Required())
200021d8:	00008021 0c000935 00000000 0c000ab9     !...5...........

#if (Config_Logging == TRUE)
	Log_Idle();
#endif

	Enable_Interrupt();
200021e8:	00000000 8fbf002c 8fb60028 8fb50024     ....,...(...$...
	Enter_Sleep_Mode();
#endif
}
200021f8:	8fb40020 8fb3001c 8fb20018 8fb10014      ...............
20002208:	8fb00010 080007d8 27bd0030              ........0..'

20002214 <Shutdown_System>:

// Found in the startup.strt assembly file.
extern void Enter_Sleep_Mode(void);

void Shutdown_System(void)
{
20002214:	27bdffe8 	addiu	sp,sp,-24
20002218:	afbf0014 	sw	ra,20(sp)
#if (Config_Hardware_Scheduler == TRUE)
	hwsch_register[0].enable = 0;
#endif

	Disable_Interrupt();
2000221c:	0c000ac7 	jal	20002b1c <Disable_Interrupt>
20002220:	00000000 	nop
	Enter_Sleep_Mode();
}
20002224:	8fbf0014 	lw	ra,20(sp)
#if (Config_Hardware_Scheduler == TRUE)
	hwsch_register[0].enable = 0;
#endif

	Disable_Interrupt();
	Enter_Sleep_Mode();
20002228:	080007d8 	j	20001f60 <Enter_Sleep_Mode>
2000222c:	27bd0018 	addiu	sp,sp,24

20002230 <Scheduler_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Start(void)
{
20002230:	27bdffe8 	addiu	sp,sp,-24
20002234:	afbf0014 	sw	ra,20(sp)
#if (Config_Logging == TRUE && Config_Hardware_Scheduler != TRUE)
	Log_Init();
20002238:	0c000a52 	jal	20002948 <Log_Init>
2000223c:	00000000 	nop
		tmrbuf_register[1] = (Config_Log_Buffer_Size / 8) - 1;
	}
	tmrbuf_register[2] = Config_Log_Num_Ticks;
#endif
#else
	Enable_Interrupt();
20002240:	0c000ab9 	jal	20002ae4 <Enable_Interrupt>
20002244:	00000000 	nop
#endif

	Timer_Start(Config_Scheduler_Timer_Number);
}
20002248:	8fbf0014 	lw	ra,20(sp)
#endif
#else
	Enable_Interrupt();
#endif

	Timer_Start(Config_Scheduler_Timer_Number);
2000224c:	00002021 	move	a0,zero
20002250:	08000b01 	j	20002c04 <Timer_Start>
20002254:	27bd0018 	addiu	sp,sp,24

20002258 <Scheduler_Init>:

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
20002258:	3c0602fa 	lui	a2,0x2fa
2000225c:	00802821 	move	a1,a0
#endif

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
20002260:	27bdffe8 	addiu	sp,sp,-24
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
20002264:	00002021 	move	a0,zero
20002268:	34c6f080 	ori	a2,a2,0xf080
#endif

///////////////////////////////////////////////////////////////////////////////

void Scheduler_Init(const uint32_t tick_us)
{
2000226c:	afbf0014 	sw	ra,20(sp)
	single_tick_time = Timer_Init(Config_Scheduler_Timer_Number, tick_us,
20002270:	0c000ad1 	jal	20002b44 <Timer_Init>
20002274:	24070001 	li	a3,1
		}
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
20002278:	0c000aae 	jal	20002ab8 <Init_Interrupt>
2000227c:	af820010 	sw	v0,16(gp)
	current_task = Config_Num_Tasks;
20002280:	8f83ffd8 	lw	v1,-40(gp)
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter++;
20002284:	3c054000 	lui	a1,0x4000
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
20002288:	af830008 	sw	v1,8(gp)
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		Tasks[i].delay_counter++;
2000228c:	24a50058 	addiu	a1,a1,88
		hwsch_register[i].bvector = (uint32_t) Tasks[i].recovery_task;
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
20002290:	00001021 	move	v0,zero
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
20002294:	080008b0 	j	200022c0 <Scheduler_Init+0x68>
20002298:	24040003 	li	a0,3
2000229c:	24420001 	addiu	v0,v0,1
	{
		Tasks[i].delay_counter++;
200022a0:	00003012 	mflo	a2
200022a4:	24c60001 	addiu	a2,a2,1
200022a8:	000630c0 	sll	a2,a2,0x3
200022ac:	00c53021 	addu	a2,a2,a1
200022b0:	8cc70000 	lw	a3,0(a2)
200022b4:	00000000 	nop
200022b8:	24e70001 	addiu	a3,a3,1
200022bc:	acc70000 	sw	a3,0(a2)
		hwsch_register[i].aot = gpt - 1;
	}
#else
	Init_Interrupt();
	current_task = Config_Num_Tasks;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200022c0:	0043302b 	sltu	a2,v0,v1
200022c4:	14c0fff5 	bnez	a2,2000229c <Scheduler_Init+0x44>
200022c8:	00440018 	mult	v0,a0
	{
		Tasks[i].delay_counter++;
	}
#endif
}
200022cc:	8fbf0014 	lw	ra,20(sp)
200022d0:	00000000 	nop
200022d4:	03e00008 	jr	ra
200022d8:	27bd0018 	addiu	sp,sp,24

200022dc <Write_32>:

///////////////////////////////////////////////////////////////////////////////

void Write_32(const uint32_t value)
{
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 24);
200022dc:	8f820024 	lw	v0,36(gp)
200022e0:	3c034000 	lui	v1,0x4000
200022e4:	246305e8 	addiu	v1,v1,1512
200022e8:	24450001 	addiu	a1,v0,1
200022ec:	00043602 	srl	a2,a0,0x18
200022f0:	00431021 	addu	v0,v0,v1
200022f4:	a0460000 	sb	a2,0(v0)
200022f8:	af850024 	sw	a1,36(gp)
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 16);
200022fc:	8f820024 	lw	v0,36(gp)
20002300:	00043402 	srl	a2,a0,0x10
20002304:	24450001 	addiu	a1,v0,1
20002308:	30c600ff 	andi	a2,a2,0xff
2000230c:	00431021 	addu	v0,v0,v1
20002310:	a0460000 	sb	a2,0(v0)
20002314:	af850024 	sw	a1,36(gp)
	Log_Buffer[buffer_index++] = (uint8_t) (value >> 8);
20002318:	8f820024 	lw	v0,36(gp)
2000231c:	00043202 	srl	a2,a0,0x8
20002320:	24450001 	addiu	a1,v0,1
20002324:	30c600ff 	andi	a2,a2,0xff
20002328:	00431021 	addu	v0,v0,v1
2000232c:	a0460000 	sb	a2,0(v0)
20002330:	af850024 	sw	a1,36(gp)
	Log_Buffer[buffer_index++] = (uint8_t) value;
20002334:	8f820024 	lw	v0,36(gp)
20002338:	308400ff 	andi	a0,a0,0xff
2000233c:	00431821 	addu	v1,v0,v1
20002340:	24420001 	addiu	v0,v0,1
20002344:	a0640000 	sb	a0,0(v1)
20002348:	af820024 	sw	v0,36(gp)
}
2000234c:	03e00008 	jr	ra
20002350:	00000000 	nop

20002354 <Set_Watch>:

///////////////////////////////////////////////////////////////////////////////

void Set_Watch(const uint8_t number, const uint32_t value)
{
20002354:	308400ff 	andi	a0,a0,0xff
	switch (number)
20002358:	24020002 	li	v0,2
2000235c:	10820017 	beq	a0,v0,200023bc <Set_Watch+0x68>
20002360:	2c820003 	sltiu	v0,a0,3
20002364:	10400007 	beqz	v0,20002384 <Set_Watch+0x30>
20002368:	24020004 	li	v0,4
2000236c:	1080000d 	beqz	a0,200023a4 <Set_Watch+0x50>
20002370:	24020001 	li	v0,1
20002374:	1482001b 	bne	a0,v0,200023e4 <Set_Watch+0x90>
20002378:	00000000 	nop
2000237c:	080008ec 	j	200023b0 <Set_Watch+0x5c>
20002380:	00000000 	nop
20002384:	10820013 	beq	a0,v0,200023d4 <Set_Watch+0x80>
20002388:	2c820004 	sltiu	v0,a0,4
2000238c:	1440000e 	bnez	v0,200023c8 <Set_Watch+0x74>
20002390:	24020005 	li	v0,5
20002394:	14820013 	bne	a0,v0,200023e4 <Set_Watch+0x90>
20002398:	00000000 	nop
2000239c:	080008f8 	j	200023e0 <Set_Watch+0x8c>
200023a0:	00000000 	nop
	{
	case 0:
		__asm__ volatile ("mtc0 %0, $18"::"r"(value));
200023a4:	40859000 	mtc0	a1,$18
		break;
200023a8:	03e00008 	jr	ra
200023ac:	00000000 	nop
	case 1:
		__asm__ volatile ("mtc0 %0, $19"::"r"(value));
200023b0:	40859800 	mtc0	a1,$19
		break;
200023b4:	03e00008 	jr	ra
200023b8:	00000000 	nop
	case 2:
		__asm__ volatile ("mtc0 %0, $20"::"r"(value));
200023bc:	4085a000 	mtc0	a1,$20
		break;
200023c0:	03e00008 	jr	ra
200023c4:	00000000 	nop
	case 3:
		__asm__ volatile ("mtc0 %0, $21"::"r"(value));
200023c8:	4085a800 	mtc0	a1,$21
		break;
200023cc:	03e00008 	jr	ra
200023d0:	00000000 	nop
	case 4:
		__asm__ volatile ("mtc0 %0, $22"::"r"(value));
200023d4:	4085b000 	mtc0	a1,$22
		break;
200023d8:	03e00008 	jr	ra
200023dc:	00000000 	nop
	case 5:
		__asm__ volatile ("mtc0 %0, $23"::"r"(value));
200023e0:	4085b800 	mtc0	a1,$23
200023e4:	03e00008 	jr	ra
200023e8:	00000000 	nop

200023ec <Get_Watch>:
}

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Watch(const uint8_t number)
{
200023ec:	308400ff 	andi	a0,a0,0xff
	uint32_t value = 0;

	switch (number)
200023f0:	24020002 	li	v0,2
200023f4:	1082001b 	beq	a0,v0,20002464 <Get_Watch+0x78>
200023f8:	00000000 	nop
200023fc:	2c820003 	sltiu	v0,a0,3
20002400:	10400008 	beqz	v0,20002424 <Get_Watch+0x38>
20002404:	24020004 	li	v0,4
20002408:	10800010 	beqz	a0,2000244c <Get_Watch+0x60>
2000240c:	00000000 	nop
20002410:	24020001 	li	v0,1
20002414:	1482000b 	bne	a0,v0,20002444 <Get_Watch+0x58>
20002418:	00000000 	nop
2000241c:	08000916 	j	20002458 <Get_Watch+0x6c>
20002420:	00000000 	nop
20002424:	10820015 	beq	a0,v0,2000247c <Get_Watch+0x90>
20002428:	00000000 	nop
2000242c:	2c820004 	sltiu	v0,a0,4
20002430:	1440000f 	bnez	v0,20002470 <Get_Watch+0x84>
20002434:	00000000 	nop
20002438:	24020005 	li	v0,5
2000243c:	10820012 	beq	a0,v0,20002488 <Get_Watch+0x9c>
20002440:	00000000 	nop
20002444:	03e00008 	jr	ra
20002448:	00001021 	move	v0,zero
	{
	case 0:
		__asm__ volatile ("mfc0 %0, $18":"=r"(value));
2000244c:	40029000 	mfc0	v0,$18
		break;
20002450:	03e00008 	jr	ra
20002454:	00000000 	nop
	case 1:
		__asm__ volatile ("mfc0 %0, $19":"=r"(value));
20002458:	40029800 	mfc0	v0,$19
		break;
2000245c:	03e00008 	jr	ra
20002460:	00000000 	nop
	case 2:
		__asm__ volatile ("mfc0 %0, $20":"=r"(value));
20002464:	4002a000 	mfc0	v0,$20
		break;
20002468:	03e00008 	jr	ra
2000246c:	00000000 	nop
	case 3:
		__asm__ volatile ("mfc0 %0, $21":"=r"(value));
20002470:	4002a800 	mfc0	v0,$21
		break;
20002474:	03e00008 	jr	ra
20002478:	00000000 	nop
	case 4:
		__asm__ volatile ("mfc0 %0, $22":"=r"(value));
2000247c:	4002b000 	mfc0	v0,$22
		break;
20002480:	03e00008 	jr	ra
20002484:	00000000 	nop
	case 5:
		__asm__ volatile ("mfc0 %0, $23":"=r"(value));
20002488:	4002b800 	mfc0	v0,$23
	default:
		value = 0;
	}

	return value;
}
2000248c:	03e00008 	jr	ra
20002490:	00000000 	nop

20002494 <Log_Reset_Addresses>:
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
	Set_Watch(0, 0x20000008);
20002494:	3c052000 	lui	a1,0x2000
// Found in the startup.strt assembly file.
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
20002498:	27bdffe8 	addiu	sp,sp,-24
	Set_Watch(0, 0x20000008);
2000249c:	34a50008 	ori	a1,a1,0x8
// Found in the startup.strt assembly file.
extern void End_IRQ_Ptr(void);
extern void Sleep_Ptr(void);

void Log_Reset_Addresses(void)
{
200024a0:	afbf0014 	sw	ra,20(sp)
	Set_Watch(0, 0x20000008);
200024a4:	0c0008d5 	jal	20002354 <Set_Watch>
200024a8:	00002021 	move	a0,zero
	Set_Watch(1, (uint32_t) End_IRQ_Ptr);
200024ac:	3c052000 	lui	a1,0x2000
200024b0:	24a51ef4 	addiu	a1,a1,7924
200024b4:	0c0008d5 	jal	20002354 <Set_Watch>
200024b8:	24040001 	li	a0,1
	Set_Watch(4, (uint32_t) Sleep_Ptr);
200024bc:	3c052000 	lui	a1,0x2000
}
200024c0:	8fbf0014 	lw	ra,20(sp)

void Log_Reset_Addresses(void)
{
	Set_Watch(0, 0x20000008);
	Set_Watch(1, (uint32_t) End_IRQ_Ptr);
	Set_Watch(4, (uint32_t) Sleep_Ptr);
200024c4:	24a51f70 	addiu	a1,a1,8048
200024c8:	24040004 	li	a0,4
200024cc:	080008d5 	j	20002354 <Set_Watch>
200024d0:	27bd0018 	addiu	sp,sp,24

200024d4 <Log_Idle>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Idle(void)
{
200024d4:	27bdffe8 	addiu	sp,sp,-24
200024d8:	afbf0014 	sw	ra,20(sp)
	Disable_Interrupt();
200024dc:	0c000ac7 	jal	20002b1c <Disable_Interrupt>
200024e0:	00000000 	nop
	idle_index = Config_Num_Tasks;
200024e4:	8f82ffd8 	lw	v0,-40(gp)
	Enable_Interrupt();
}
200024e8:	8fbf0014 	lw	ra,20(sp)
200024ec:	27bd0018 	addiu	sp,sp,24
///////////////////////////////////////////////////////////////////////////////

void Log_Idle(void)
{
	Disable_Interrupt();
	idle_index = Config_Num_Tasks;
200024f0:	af82fff4 	sw	v0,-12(gp)
	Enable_Interrupt();
200024f4:	08000ab9 	j	20002ae4 <Enable_Interrupt>
200024f8:	00000000 	nop

200024fc <Log_Set_Address>:

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
200024fc:	27bdffe0 	addiu	sp,sp,-32
	idle_index = UINT8_MAX;
20002500:	240200ff 	li	v0,255

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
20002504:	308400ff 	andi	a0,a0,0xff
20002508:	afb10018 	sw	s1,24(sp)
2000250c:	afb00014 	sw	s0,20(sp)
20002510:	afbf001c 	sw	ra,28(sp)
	idle_index = UINT8_MAX;
20002514:	af82fff4 	sw	v0,-12(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_Set_Address(const boolean_t in_isr, const uint32_t start,
					 const uint32_t finish)
{
20002518:	00c08021 	move	s0,a2
	idle_index = UINT8_MAX;
	if (in_isr)
2000251c:	1080000a 	beqz	a0,20002548 <Log_Set_Address+0x4c>
20002520:	00a08821 	move	s1,a1
	{
		Set_Watch(1, start);
20002524:	0c0008d5 	jal	20002354 <Set_Watch>
20002528:	24040001 	li	a0,1
		Set_Watch(0, finish);
2000252c:	02002821 	move	a1,s0
		Disable_Interrupt();
		Set_Watch(2, start);
		Set_Watch(3, finish);
		Enable_Interrupt();
	}
}
20002530:	8fbf001c 	lw	ra,28(sp)
20002534:	8fb10018 	lw	s1,24(sp)
20002538:	8fb00014 	lw	s0,20(sp)
{
	idle_index = UINT8_MAX;
	if (in_isr)
	{
		Set_Watch(1, start);
		Set_Watch(0, finish);
2000253c:	00002021 	move	a0,zero
20002540:	080008d5 	j	20002354 <Set_Watch>
20002544:	27bd0020 	addiu	sp,sp,32
	}
	else
	{
		Disable_Interrupt();
20002548:	0c000ac7 	jal	20002b1c <Disable_Interrupt>
2000254c:	00000000 	nop
		Set_Watch(2, start);
20002550:	02202821 	move	a1,s1
20002554:	0c0008d5 	jal	20002354 <Set_Watch>
20002558:	24040002 	li	a0,2
		Set_Watch(3, finish);
2000255c:	02002821 	move	a1,s0
20002560:	0c0008d5 	jal	20002354 <Set_Watch>
20002564:	24040003 	li	a0,3
		Enable_Interrupt();
	}
}
20002568:	8fbf001c 	lw	ra,28(sp)
2000256c:	8fb10018 	lw	s1,24(sp)
20002570:	8fb00014 	lw	s0,20(sp)
	else
	{
		Disable_Interrupt();
		Set_Watch(2, start);
		Set_Watch(3, finish);
		Enable_Interrupt();
20002574:	08000ab9 	j	20002ae4 <Enable_Interrupt>
20002578:	27bd0020 	addiu	sp,sp,32

2000257c <Check_Buffer>:
// Found in the startup.strt assembly file.
extern void LOG_Trigger_Breakpoint(void);

void Check_Buffer(const uint32_t size)
{
	if (Config_Log_Buffer_Size - buffer_index < size + 1)
2000257c:	8f820024 	lw	v0,36(gp)
20002580:	240303e8 	li	v1,1000
20002584:	00621023 	subu	v0,v1,v0
20002588:	24840001 	addiu	a0,a0,1

// Found in the startup.strt assembly file.
extern void LOG_Trigger_Breakpoint(void);

void Check_Buffer(const uint32_t size)
{
2000258c:	27bdffe8 	addiu	sp,sp,-24
	if (Config_Log_Buffer_Size - buffer_index < size + 1)
20002590:	0044102b 	sltu	v0,v0,a0
20002594:	1040000a 	beqz	v0,200025c0 <Check_Buffer+0x44>
20002598:	afbf0014 	sw	ra,20(sp)
	{
		Log_Buffer[buffer_index] = 'z';
2000259c:	8f830024 	lw	v1,36(gp)
200025a0:	3c024000 	lui	v0,0x4000
200025a4:	244205e8 	addiu	v0,v0,1512
200025a8:	00621021 	addu	v0,v1,v0
200025ac:	2403007a 	li	v1,122
200025b0:	a0430000 	sb	v1,0(v0)
		LOG_Trigger_Breakpoint();
200025b4:	0c0007e2 	jal	20001f88 <LOG_Trigger_Breakpoint>
200025b8:	00000000 	nop
		buffer_index = 0;
200025bc:	af800024 	sw	zero,36(gp)
	}
}
200025c0:	8fbf0014 	lw	ra,20(sp)
200025c4:	00000000 	nop
200025c8:	03e00008 	jr	ra
200025cc:	27bd0018 	addiu	sp,sp,24

200025d0 <Log_Task_Address>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
200025d0:	27bdffe0 	addiu	sp,sp,-32
200025d4:	afb00010 	sw	s0,16(sp)
200025d8:	00808021 	move	s0,a0
	Check_Buffer(7);
200025dc:	24040007 	li	a0,7
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
200025e0:	afbf001c 	sw	ra,28(sp)
200025e4:	afb20018 	sw	s2,24(sp)
200025e8:	afb10014 	sw	s1,20(sp)
200025ec:	30b200ff 	andi	s2,a1,0xff
	Check_Buffer(7);
200025f0:	0c00095f 	jal	2000257c <Check_Buffer>
200025f4:	3c114000 	lui	s1,0x4000

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200025f8:	8f820024 	lw	v0,36(gp)
200025fc:	263105e8 	addiu	s1,s1,1512
20002600:	24430001 	addiu	v1,v0,1
20002604:	24050058 	li	a1,88
20002608:	00511021 	addu	v0,v0,s1

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
2000260c:	02002021 	move	a0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002610:	a0450000 	sb	a1,0(v0)
20002614:	af830024 	sw	v1,36(gp)

void Log_Task_Address(const task_function_t task, const uint8_t priority)
{
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
20002618:	0c0008b7 	jal	200022dc <Write_32>
2000261c:	00000000 	nop

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002620:	8f820024 	lw	v0,36(gp)
20002624:	24040070 	li	a0,112
20002628:	24430001 	addiu	v1,v0,1
2000262c:	00511021 	addu	v0,v0,s1
20002630:	a0440000 	sb	a0,0(v0)
20002634:	af830024 	sw	v1,36(gp)
20002638:	8f820024 	lw	v0,36(gp)
2000263c:	00000000 	nop
20002640:	00518821 	addu	s1,v0,s1
20002644:	a2320000 	sb	s2,0(s1)
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
20002648:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000264c:	24420001 	addiu	v0,v0,1
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
20002650:	8fb20018 	lw	s2,24(sp)
20002654:	8fb10014 	lw	s1,20(sp)
20002658:	8fb00010 	lw	s0,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000265c:	af820024 	sw	v0,36(gp)
	Check_Buffer(7);
	Write_8('X');
	Write_32((uint32_t) task);
	Write_8('p');
	Write_8(priority);
}
20002660:	03e00008 	jr	ra
20002664:	27bd0020 	addiu	sp,sp,32

20002668 <Log_ISR_Time>:
///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
20002668:	8f82001c 	lw	v0,28(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
2000266c:	27bdffd8 	addiu	sp,sp,-40

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002670:	00c2182b 	sltu	v1,a2,v0

///////////////////////////////////////////////////////////////////////////////

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
20002674:	afb20020 	sw	s2,32(sp)
20002678:	afb1001c 	sw	s1,28(sp)
2000267c:	afb00018 	sw	s0,24(sp)
20002680:	afbf0024 	sw	ra,36(sp)
20002684:	00808021 	move	s0,a0
20002688:	00a08821 	move	s1,a1

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
2000268c:	10600003 	beqz	v1,2000269c <Log_ISR_Time+0x34>
20002690:	00c29023 	subu	s2,a2,v0
	{
		return second - first;
	}

	return second + (UINT32_MAX - first);
20002694:	00029027 	nor	s2,zero,v0
20002698:	00d29021 	addu	s2,a2,s2

void Log_ISR_Time(const log_type_t log_type, const uint32_t task_index,
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
2000269c:	24040007 	li	a0,7
200026a0:	0c00095f 	jal	2000257c <Check_Buffer>
200026a4:	afa60010 	sw	a2,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026a8:	8f820024 	lw	v0,36(gp)
200026ac:	3c034000 	lui	v1,0x4000
200026b0:	246305e8 	addiu	v1,v1,1512
200026b4:	24440001 	addiu	a0,v0,1
200026b8:	24050079 	li	a1,121
200026bc:	00431021 	addu	v0,v0,v1
200026c0:	a0450000 	sb	a1,0(v0)
200026c4:	af840024 	sw	a0,36(gp)
200026c8:	8f820024 	lw	v0,36(gp)
				  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
200026cc:	322500ff 	andi	a1,s1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026d0:	24440001 	addiu	a0,v0,1
200026d4:	00431021 	addu	v0,v0,v1
200026d8:	a0450000 	sb	a1,0(v0)
200026dc:	af840024 	sw	a0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200026e0:	2782fff8 	addiu	v0,gp,-8
200026e4:	00508021 	addu	s0,v0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026e8:	8f820024 	lw	v0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200026ec:	92050000 	lbu	a1,0(s0)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026f0:	00431821 	addu	v1,v0,v1
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
200026f4:	3a3100ff 	xori	s1,s1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200026f8:	24420001 	addiu	v0,v0,1
200026fc:	a0650000 	sb	a1,0(v1)
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
20002700:	02402021 	move	a0,s2

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
20002704:	0011882b 	sltu	s1,zero,s1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002708:	af820024 	sw	v0,36(gp)
	const uint32_t time = Get_Relative_Time(previous_isr_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
2000270c:	0c0008b7 	jal	200022dc <Write_32>
20002710:	00000000 	nop

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002714:	3a220001 	xori	v0,s1,0x1
20002718:	8f83001c 	lw	v1,28(gp)
2000271c:	8fa60010 	lw	a2,16(sp)
20002720:	00118823 	negu	s1,s1
20002724:	00021023 	negu	v0,v0
20002728:	02263024 	and	a2,s1,a2
2000272c:	00431024 	and	v0,v0,v1
						(-no_update & previous_isr_time);
}
20002730:	8fbf0024 	lw	ra,36(sp)
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002734:	00463025 	or	a2,v0,a2
						(-no_update & previous_isr_time);
}
20002738:	8fb20020 	lw	s2,32(sp)
2000273c:	8fb1001c 	lw	s1,28(sp)
20002740:	8fb00018 	lw	s0,24(sp)
	Write_32(time);

	// Update if task_index is not 255; nasty bit-fiddling to avoid branching.
	const int32_t update = task_index != 255;
	const int32_t no_update = !update;
	previous_isr_time = (-update & cycle_count) |
20002744:	af86001c 	sw	a2,28(gp)
						(-no_update & previous_isr_time);
}
20002748:	03e00008 	jr	ra
2000274c:	27bd0028 	addiu	sp,sp,40

20002750 <Log_Tick_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
20002750:	27bdffe0 	addiu	sp,sp,-32
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
20002754:	8f850014 	lw	a1,20(gp)
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
20002758:	afb00018 	sw	s0,24(sp)
2000275c:	00808021 	move	s0,a0
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
20002760:	24040001 	li	a0,1
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_Start(const uint32_t task_index)
{
20002764:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
20002768:	0c0008fb 	jal	200023ec <Get_Watch>
2000276c:	afa50010 	sw	a1,16(sp)
20002770:	8fa50010 	lw	a1,16(sp)
20002774:	00403021 	move	a2,v0
20002778:	0c00099a 	jal	20002668 <Log_ISR_Time>
2000277c:	24040003 	li	a0,3
	Log_ISR_Time(LOG_INTERRUPT_END, idle_index, Get_Watch(4));
20002780:	8f85fff4 	lw	a1,-12(gp)
20002784:	24040004 	li	a0,4
20002788:	0c0008fb 	jal	200023ec <Get_Watch>
2000278c:	afa50010 	sw	a1,16(sp)
20002790:	8fa50010 	lw	a1,16(sp)
20002794:	00403021 	move	a2,v0
20002798:	0c00099a 	jal	20002668 <Log_ISR_Time>
2000279c:	24040003 	li	a0,3

	last_index = task_index;

	Log_ISR_Time(LOG_INTERRUPT_START, task_index, Get_Watch(0));
200027a0:	00002021 	move	a0,zero
200027a4:	0c0008fb 	jal	200023ec <Get_Watch>
200027a8:	af900014 	sw	s0,20(gp)
200027ac:	00403021 	move	a2,v0
200027b0:	02002821 	move	a1,s0
}
200027b4:	8fbf001c 	lw	ra,28(sp)
200027b8:	8fb00018 	lw	s0,24(sp)
	Log_ISR_Time(LOG_INTERRUPT_END, last_index, Get_Watch(1));
	Log_ISR_Time(LOG_INTERRUPT_END, idle_index, Get_Watch(4));

	last_index = task_index;

	Log_ISR_Time(LOG_INTERRUPT_START, task_index, Get_Watch(0));
200027bc:	24040002 	li	a0,2
200027c0:	0800099a 	j	20002668 <Log_ISR_Time>
200027c4:	27bd0020 	addiu	sp,sp,32

200027c8 <Log_Hybrid_End>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
200027c8:	27bdffe0 	addiu	sp,sp,-32
200027cc:	00802821 	move	a1,a0
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
200027d0:	00002021 	move	a0,zero
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
200027d4:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
200027d8:	0c0008fb 	jal	200023ec <Get_Watch>
200027dc:	afa50010 	sw	a1,16(sp)
200027e0:	8fa50010 	lw	a1,16(sp)
}
200027e4:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_End(const uint32_t task_index)
{
	Log_ISR_Time(LOG_HYBRID_END, task_index, Get_Watch(0));
200027e8:	00403021 	move	a2,v0
200027ec:	24040005 	li	a0,5
200027f0:	0800099a 	j	20002668 <Log_ISR_Time>
200027f4:	27bd0020 	addiu	sp,sp,32

200027f8 <Log_Hybrid_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
200027f8:	27bdffe0 	addiu	sp,sp,-32
200027fc:	00802821 	move	a1,a0
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002800:	24040001 	li	a0,1
}

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
20002804:	afbf001c 	sw	ra,28(sp)
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002808:	0c0008fb 	jal	200023ec <Get_Watch>
2000280c:	afa50010 	sw	a1,16(sp)
20002810:	8fa50010 	lw	a1,16(sp)
}
20002814:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Hybrid_Start(const uint32_t task_index)
{
	Log_ISR_Time(LOG_HYBRID_START, task_index, Get_Watch(1));
20002818:	00403021 	move	a2,v0
2000281c:	24040004 	li	a0,4
20002820:	0800099a 	j	20002668 <Log_ISR_Time>
20002824:	27bd0020 	addiu	sp,sp,32

20002828 <Log_Time>:
///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
20002828:	8f820018 	lw	v0,24(gp)

///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
2000282c:	27bdffd8 	addiu	sp,sp,-40

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002830:	00c2182b 	sltu	v1,a2,v0

///////////////////////////////////////////////////////////////////////////////

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
20002834:	afb10020 	sw	s1,32(sp)
20002838:	afb0001c 	sw	s0,28(sp)
2000283c:	afbf0024 	sw	ra,36(sp)
20002840:	00808021 	move	s0,a0

///////////////////////////////////////////////////////////////////////////////

uint32_t Get_Relative_Time(const uint32_t first, const uint32_t second)
{
	if (second >= first)
20002844:	10600003 	beqz	v1,20002854 <Log_Time+0x2c>
20002848:	00c28823 	subu	s1,a2,v0
	{
		return second - first;
	}

	return second + (UINT32_MAX - first);
2000284c:	00028827 	nor	s1,zero,v0
20002850:	00d18821 	addu	s1,a2,s1

void Log_Time(const log_type_t log_type, const uint32_t task_index,
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
20002854:	24040007 	li	a0,7
20002858:	afa60014 	sw	a2,20(sp)
2000285c:	0c00095f 	jal	2000257c <Check_Buffer>
20002860:	afa50010 	sw	a1,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002864:	8f820024 	lw	v0,36(gp)
20002868:	3c034000 	lui	v1,0x4000
2000286c:	246305e8 	addiu	v1,v1,1512
20002870:	24440001 	addiu	a0,v0,1
20002874:	24070079 	li	a3,121
20002878:	00431021 	addu	v0,v0,v1
2000287c:	a0470000 	sb	a3,0(v0)
20002880:	af840024 	sw	a0,36(gp)
20002884:	8f820024 	lw	v0,36(gp)
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
20002888:	8fa50010 	lw	a1,16(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000288c:	24440001 	addiu	a0,v0,1
			  const uint32_t cycle_count)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
20002890:	30a500ff 	andi	a1,a1,0xff

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002894:	00431021 	addu	v0,v0,v1
20002898:	a0450000 	sb	a1,0(v0)
2000289c:	af840024 	sw	a0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200028a0:	2782fff8 	addiu	v0,gp,-8
200028a4:	00508021 	addu	s0,v0,s0

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200028a8:	8f820024 	lw	v0,36(gp)
{
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
200028ac:	92050000 	lbu	a1,0(s0)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200028b0:	00431821 	addu	v1,v0,v1
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
200028b4:	02202021 	move	a0,s1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
200028b8:	24420001 	addiu	v0,v0,1
200028bc:	a0650000 	sb	a1,0(v1)
200028c0:	af820024 	sw	v0,36(gp)
	const uint32_t time = Get_Relative_Time(previous_time, cycle_count);
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
200028c4:	0c0008b7 	jal	200022dc <Write_32>
200028c8:	00000000 	nop
	previous_time = cycle_count;
200028cc:	8fa60014 	lw	a2,20(sp)
}
200028d0:	8fbf0024 	lw	ra,36(sp)
200028d4:	8fb10020 	lw	s1,32(sp)
200028d8:	8fb0001c 	lw	s0,28(sp)
	Check_Buffer(7);
	Write_8('y');
	Write_8(task_index);
	Write_8(log_char[log_type]);
	Write_32(time);
	previous_time = cycle_count;
200028dc:	af860018 	sw	a2,24(gp)
}
200028e0:	03e00008 	jr	ra
200028e4:	27bd0028 	addiu	sp,sp,40

200028e8 <Log_Task_End>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
200028e8:	27bdffe0 	addiu	sp,sp,-32
200028ec:	00802821 	move	a1,a0
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
200028f0:	24040003 	li	a0,3
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
200028f4:	afbf001c 	sw	ra,28(sp)
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
200028f8:	0c0008fb 	jal	200023ec <Get_Watch>
200028fc:	afa50010 	sw	a1,16(sp)
20002900:	8fa50010 	lw	a1,16(sp)
}
20002904:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Task_End(const uint32_t task_index)
{
	Log_Time(LOG_TASK_END, task_index, Get_Watch(3));
20002908:	00403021 	move	a2,v0
2000290c:	24040001 	li	a0,1
20002910:	08000a0a 	j	20002828 <Log_Time>
20002914:	27bd0020 	addiu	sp,sp,32

20002918 <Log_Task_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
20002918:	27bdffe0 	addiu	sp,sp,-32
2000291c:	00802821 	move	a1,a0
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
20002920:	24040002 	li	a0,2
}

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
20002924:	afbf001c 	sw	ra,28(sp)
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
20002928:	0c0008fb 	jal	200023ec <Get_Watch>
2000292c:	afa50010 	sw	a1,16(sp)
20002930:	8fa50010 	lw	a1,16(sp)
}
20002934:	8fbf001c 	lw	ra,28(sp)

///////////////////////////////////////////////////////////////////////////////

void Log_Task_Start(const uint32_t task_index)
{
	Log_Time(LOG_TASK_START, task_index, Get_Watch(2));
20002938:	00403021 	move	a2,v0
2000293c:	00002021 	move	a0,zero
20002940:	08000a0a 	j	20002828 <Log_Time>
20002944:	27bd0020 	addiu	sp,sp,32

20002948 <Log_Init>:
}

///////////////////////////////////////////////////////////////////////////////

void Log_Init(void)
{
20002948:	27bdffd8 	addiu	sp,sp,-40
	Check_Buffer(5);
2000294c:	24040005 	li	a0,5
}

///////////////////////////////////////////////////////////////////////////////

void Log_Init(void)
{
20002950:	afbf0024 	sw	ra,36(sp)
20002954:	afb30020 	sw	s3,32(sp)
20002958:	afb2001c 	sw	s2,28(sp)
2000295c:	afb10018 	sw	s1,24(sp)
	Check_Buffer(5);
20002960:	0c00095f 	jal	2000257c <Check_Buffer>
20002964:	afb00014 	sw	s0,20(sp)

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002968:	8f820024 	lw	v0,36(gp)
2000296c:	3c034000 	lui	v1,0x4000
20002970:	246305e8 	addiu	v1,v1,1512
20002974:	00431821 	addu	v1,v0,v1
20002978:	24050057 	li	a1,87

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
2000297c:	3c0402fa 	lui	a0,0x2fa

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002980:	24420001 	addiu	v0,v0,1
20002984:	a0650000 	sb	a1,0(v1)

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
20002988:	3484f080 	ori	a0,a0,0xf080

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
2000298c:	af820024 	sw	v0,36(gp)

void Log_Init(void)
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);
20002990:	0c0008b7 	jal	200022dc <Write_32>
20002994:	3c124000 	lui	s2,0x4000

	last_index = Config_Num_Tasks;
20002998:	8f93ffd8 	lw	s3,-40(gp)
2000299c:	00000000 	nop
200029a0:	af930014 	sw	s3,20(gp)

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		if (Tasks[i].exec_from_isr == TRUE)
200029a4:	26520058 	addiu	s2,s2,88
{
	Check_Buffer(5);
	Write_8('W');
	Write_32(Config_Oscillator_Frequency);

	last_index = Config_Num_Tasks;
200029a8:	00008021 	move	s0,zero

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200029ac:	08000a7c 	j	200029f0 <Log_Init+0xa8>
200029b0:	24110018 	li	s1,24
200029b4:	8f850014 	lw	a1,20(gp)
200029b8:	00000000 	nop
	{
		if (Tasks[i].exec_from_isr == TRUE)
		{
			priority = (last_index * 2) - i;
200029bc:	00051040 	sll	v0,a1,0x1
		}
		else
		{
			priority = last_index - i;
200029c0:	00b02823 	subu	a1,a1,s0
		}
		Log_Task_Address(Tasks[i].task_function, priority);
200029c4:	00001812 	mflo	v1
200029c8:	00721821 	addu	v1,v1,s2
	last_index = Config_Num_Tasks;

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
	{
		if (Tasks[i].exec_from_isr == TRUE)
200029cc:	90640014 	lbu	a0,20(v1)
200029d0:	00000000 	nop
200029d4:	10800002 	beqz	a0,200029e0 <Log_Init+0x98>
200029d8:	00000000 	nop
		{
			priority = (last_index * 2) - i;
200029dc:	00502823 	subu	a1,v0,s0
		}
		else
		{
			priority = last_index - i;
		}
		Log_Task_Address(Tasks[i].task_function, priority);
200029e0:	8c640000 	lw	a0,0(v1)
200029e4:	0c000974 	jal	200025d0 <Log_Task_Address>
200029e8:	30a500ff 	andi	a1,a1,0xff
	Write_32(Config_Oscillator_Frequency);

	last_index = Config_Num_Tasks;

	uint32_t priority = 0;
	for (uint32_t i = 0; i < Config_Num_Tasks; i++)
200029ec:	26100001 	addiu	s0,s0,1
200029f0:	0213102b 	sltu	v0,s0,s3
200029f4:	1440ffef 	bnez	v0,200029b4 <Log_Init+0x6c>
200029f8:	02110018 	mult	s0,s1
			priority = last_index - i;
		}
		Log_Task_Address(Tasks[i].task_function, priority);
	}

	Log_Reset_Addresses();
200029fc:	0c000925 	jal	20002494 <Log_Reset_Addresses>
20002a00:	00000000 	nop

	previous_time = Get_Watch(0);
20002a04:	0c0008fb 	jal	200023ec <Get_Watch>
20002a08:	00002021 	move	a0,zero
	previous_isr_time = previous_time;
	Log_Time(LOG_TASK_START, last_index, 0);
20002a0c:	8f850014 	lw	a1,20(gp)
}
20002a10:	8fbf0024 	lw	ra,36(sp)
20002a14:	8fb30020 	lw	s3,32(sp)
20002a18:	8fb2001c 	lw	s2,28(sp)
20002a1c:	8fb10018 	lw	s1,24(sp)
20002a20:	8fb00014 	lw	s0,20(sp)

	Log_Reset_Addresses();

	previous_time = Get_Watch(0);
	previous_isr_time = previous_time;
	Log_Time(LOG_TASK_START, last_index, 0);
20002a24:	00002021 	move	a0,zero
20002a28:	00003021 	move	a2,zero
}
20002a2c:	27bd0028 	addiu	sp,sp,40
	}

	Log_Reset_Addresses();

	previous_time = Get_Watch(0);
	previous_isr_time = previous_time;
20002a30:	af82001c 	sw	v0,28(gp)
	Log_Time(LOG_TASK_START, last_index, 0);
20002a34:	08000a0a 	j	20002828 <Log_Time>
20002a38:	af820018 	sw	v0,24(gp)

20002a3c <Log_Tick_End>:

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
	current_tick++;
20002a3c:	8f820020 	lw	v0,32(gp)
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
20002a40:	27bdffe8 	addiu	sp,sp,-24
	current_tick++;
20002a44:	24420001 	addiu	v0,v0,1
	if (current_tick > Config_Log_Num_Ticks)
20002a48:	2c430065 	sltiu	v1,v0,101
}

///////////////////////////////////////////////////////////////////////////////

void Log_Tick_End(const uint32_t task_index)
{
20002a4c:	afb00010 	sw	s0,16(sp)
20002a50:	afbf0014 	sw	ra,20(sp)
20002a54:	00808021 	move	s0,a0
	current_tick++;
	if (current_tick > Config_Log_Num_Ticks)
20002a58:	1460000d 	bnez	v1,20002a90 <Log_Tick_End+0x54>
20002a5c:	af820020 	sw	v0,32(gp)
	{
		Check_Buffer(1);
20002a60:	0c00095f 	jal	2000257c <Check_Buffer>
20002a64:	24040001 	li	a0,1

///////////////////////////////////////////////////////////////////////////////

void Write_8(const uint8_t value)
{
	Log_Buffer[buffer_index++] = value;
20002a68:	8f820024 	lw	v0,36(gp)
20002a6c:	3c034000 	lui	v1,0x4000
20002a70:	246305e8 	addiu	v1,v1,1512
20002a74:	00431821 	addu	v1,v0,v1
20002a78:	24040067 	li	a0,103
20002a7c:	24420001 	addiu	v0,v0,1
20002a80:	a0640000 	sb	a0,0(v1)
20002a84:	af820024 	sw	v0,36(gp)
	current_tick++;
	if (current_tick > Config_Log_Num_Ticks)
	{
		Check_Buffer(1);
		Write_8('g');
		LOG_Trigger_Breakpoint();
20002a88:	0c0007e2 	jal	20001f88 <LOG_Trigger_Breakpoint>
20002a8c:	00000000 	nop
	}

	if (task_index >= Config_Num_Tasks)
20002a90:	8f82ffd8 	lw	v0,-40(gp)
20002a94:	00000000 	nop
20002a98:	0202802b 	sltu	s0,s0,v0
20002a9c:	16000002 	bnez	s0,20002aa8 <Log_Tick_End+0x6c>
20002aa0:	240200ff 	li	v0,255
	{
		idle_index = UINT8_MAX;
20002aa4:	af82fff4 	sw	v0,-12(gp)
	}
}
20002aa8:	8fbf0014 	lw	ra,20(sp)
20002aac:	8fb00010 	lw	s0,16(sp)
20002ab0:	03e00008 	jr	ra
20002ab4:	27bd0018 	addiu	sp,sp,24

20002ab8 <Init_Interrupt>:
///////////////////////////////////////////////////////////////////////////////


void Init_Interrupt(void)
{
	TableBase = (uint32_t)InterruptHandler;
20002ab8:	3c022000 	lui	v0,0x2000
20002abc:	24421dc4 	addiu	v0,v0,7620
20002ac0:	af82ff98 	sw	v0,-104(gp)
 *
 */
uint32_t Status_Reg_Get()
{
	uint32_t regValue;
	__asm volatile("mfc0 %0, $12" : "=d" (regValue) :);
20002ac4:	40026000 	mfc0	v0,c0_sr
20002ac8:	00000000 	nop
 *
 * \param[in] The value to write.
 */
void Status_Reg_Set(uint32_t value)
{
	__asm volatile("mtc0 %0, $12" :: "d" ((unsigned long)(value)));
20002acc:	34420700 	ori	v0,v0,0x700
20002ad0:	40826000 	mtc0	v0,c0_sr

void Init_Interrupt(void)
{
	TableBase = (uint32_t)InterruptHandler;
	Enable_System_Interrupt(Config_Scheduler_Interrupt_Number);
}
20002ad4:	03e00008 	jr	ra
20002ad8:	00000000 	nop

20002adc <Handle_Interrupts>:

///////////////////////////////////////////////////////////////////////////////

void Handle_Interrupts(void)
{
	Scheduler_Tick();
20002adc:	080007e4 	j	20001f90 <Scheduler_Tick>
20002ae0:	00000000 	nop

20002ae4 <Enable_Interrupt>:

///////////////////////////////////////////////////////////////////////////////

void Enable_Interrupt(void)
{
	if (nesting_level > 0)
20002ae4:	8f820028 	lw	v0,40(gp)
20002ae8:	00000000 	nop
20002aec:	10400005 	beqz	v0,20002b04 <Enable_Interrupt+0x20>
20002af0:	00000000 	nop
	{
		nesting_level--;
20002af4:	2442ffff 	addiu	v0,v0,-1
20002af8:	af820028 	sw	v0,40(gp)
	}

	if (nesting_level == 0)
20002afc:	8f820028 	lw	v0,40(gp)
20002b00:	00000000 	nop
20002b04:	14400003 	bnez	v0,20002b14 <Enable_Interrupt+0x30>
20002b08:	00000000 	nop
	{
		Enable_Interrupts();
20002b0c:	080007be 	j	20001ef8 <Enable_Interrupts>
20002b10:	00000000 	nop
20002b14:	03e00008 	jr	ra
20002b18:	00000000 	nop

20002b1c <Disable_Interrupt>:
}

///////////////////////////////////////////////////////////////////////////////

void Disable_Interrupt(void)
{
20002b1c:	27bdffe8 	addiu	sp,sp,-24
20002b20:	afbf0014 	sw	ra,20(sp)
	Disable_Interrupts();
20002b24:	0c0007ca 	jal	20001f28 <Disable_Interrupts>
20002b28:	00000000 	nop
	nesting_level++;
20002b2c:	8f820028 	lw	v0,40(gp)
}
20002b30:	8fbf0014 	lw	ra,20(sp)
///////////////////////////////////////////////////////////////////////////////

void Disable_Interrupt(void)
{
	Disable_Interrupts();
	nesting_level++;
20002b34:	24420001 	addiu	v0,v0,1
20002b38:	af820028 	sw	v0,40(gp)
}
20002b3c:	03e00008 	jr	ra
20002b40:	27bd0018 	addiu	sp,sp,24

20002b44 <Timer_Init>:
	Timer_Set_Prescalar(timer, 0);
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
20002b44:	14e00002 	bnez	a3,20002b50 <Timer_Init+0xc>
20002b48:	00c7001b 	divu	zero,a2,a3
20002b4c:	0007000d 	break	0x7

///////////////////////////////////////////////////////////////////////////////

uint32_t Timer_Init(const uint8_t timer, const uint32_t tick_us,
		const uint32_t oscillator_frequency, const uint32_t clock_divider)
{
20002b50:	308400ff 	andi	a0,a0,0xff

///////////////////////////////////////////////////////////////////////////////

void Timer_Stop(const uint8_t timer)
{
	timer_register[timer].control &= ~control_start;
20002b54:	3c028000 	lui	v0,0x8000
20002b58:	00042200 	sll	a0,a0,0x8
20002b5c:	00822021 	addu	a0,a0,v0
20002b60:	8c870000 	lw	a3,0(a0)
20002b64:	2402fffe 	li	v0,-2
20002b68:	00e21024 	and	v0,a3,v0
20002b6c:	ac820000 	sw	v0,0(a0)
///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Prescalar(const uint8_t timer, const uint32_t prescalar)
{
	const uint32_t value = prescalar > 0 ? prescalar - 1 : 0;
	timer_register[timer].prescalar_match = value;
20002b70:	ac800008 	sw	zero,8(a0)

///////////////////////////////////////////////////////////////////////////////

void Timer_Clear(const uint8_t timer)
{
	timer_register[timer].timer_counter = 0;
20002b74:	ac80000c 	sw	zero,12(a0)

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002b78:	8c870000 	lw	a3,0(a0)
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002b7c:	3c06000f 	lui	a2,0xf

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002b80:	2402fffd 	li	v0,-3
20002b84:	00e21024 	and	v0,a3,v0
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002b88:	34c64240 	ori	a2,a2,0x4240

///////////////////////////////////////////////////////////////////////////////

void Timer_Overflow_Clear(const uint8_t timer)
{
	timer_register[timer].control &= ~control_overflow;
20002b8c:	ac820000 	sw	v0,0(a0)
	Timer_Set_Prescalar(timer, 0);
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
20002b90:	00001812 	mflo	v1
	...
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);

	const uint32_t match = timer_frequency / (timer_frequency / tick_us);
20002b9c:	14a00002 	bnez	a1,20002ba8 <Timer_Init+0x64>
20002ba0:	0065001b 	divu	zero,v1,a1
20002ba4:	0007000d 	break	0x7
20002ba8:	00002812 	mflo	a1
	...
20002bb4:	14a00002 	bnez	a1,20002bc0 <Timer_Init+0x7c>
20002bb8:	0065001b 	divu	zero,v1,a1
20002bbc:	0007000d 	break	0x7
20002bc0:	00001012 	mflo	v0

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
20002bc4:	0002282b 	sltu	a1,zero,v0
20002bc8:	00052823 	negu	a1,a1
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002bcc:	14c00002 	bnez	a2,20002bd8 <Timer_Init+0x94>
20002bd0:	0066001b 	divu	zero,v1,a2
20002bd4:	0007000d 	break	0x7

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
20002bd8:	2447ffff 	addiu	a3,v0,-1
20002bdc:	00e53824 	and	a3,a3,a1
	Timer_Clear(timer);
	Timer_Overflow_Clear(timer);

	const uint32_t clock_frequency = oscillator_frequency;
	const uint32_t timer_frequency = clock_frequency / clock_divider;
	Timer_Set_Prescalar(timer, timer_frequency / 1000000);
20002be0:	00001812 	mflo	v1

///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Prescalar(const uint8_t timer, const uint32_t prescalar)
{
	const uint32_t value = prescalar > 0 ? prescalar - 1 : 0;
20002be4:	0003282b 	sltu	a1,zero,v1
20002be8:	00052823 	negu	a1,a1
20002bec:	2463ffff 	addiu	v1,v1,-1
20002bf0:	00651824 	and	v1,v1,a1
	timer_register[timer].prescalar_match = value;
20002bf4:	ac830008 	sw	v1,8(a0)
///////////////////////////////////////////////////////////////////////////////

void Timer_Set_Match(const uint8_t timer, const uint32_t match)
{
	const uint32_t value = match > 0 ? match - 1 : 0;
	timer_register[timer].timer_match = value;
20002bf8:	ac870010 	sw	a3,16(a0)

	const uint32_t match = timer_frequency / (timer_frequency / tick_us);
	Timer_Set_Match(timer, match);

	return match;
}
20002bfc:	03e00008 	jr	ra
20002c00:	00000000 	nop

20002c04 <Timer_Start>:
}

///////////////////////////////////////////////////////////////////////////////

void Timer_Start(const uint8_t timer)
{
20002c04:	308400ff 	andi	a0,a0,0xff
	timer_register[timer].control |= control_start;
20002c08:	3c028000 	lui	v0,0x8000
20002c0c:	00042200 	sll	a0,a0,0x8
20002c10:	00822021 	addu	a0,a0,v0
20002c14:	8c820000 	lw	v0,0(a0)
20002c18:	00000000 	nop
20002c1c:	34420001 	ori	v0,v0,0x1
20002c20:	ac820000 	sw	v0,0(a0)
}
20002c24:	03e00008 	jr	ra
20002c28:	00000000 	nop

20002c2c <SPI_Init>:
static const uint32_t control_cpol     = (1 << 2);

///////////////////////////////////////////////////////////////////////////////

void SPI_Init(const uint8_t spi, const uint32_t mode, const uint32_t clock_divider)
{
20002c2c:	308400ff 	andi	a0,a0,0xff
	spi_register[spi].control = ((mode & 0x03) << 1);
20002c30:	3c028000 	lui	v0,0x8000
20002c34:	34420a00 	ori	v0,v0,0xa00
20002c38:	00042200 	sll	a0,a0,0x8
20002c3c:	00822021 	addu	a0,a0,v0
20002c40:	30a50003 	andi	a1,a1,0x3
	spi_register[spi].clk_div = clock_divider & 0xFFFFFFFC;
20002c44:	2402fffc 	li	v0,-4
20002c48:	00c21024 	and	v0,a2,v0

///////////////////////////////////////////////////////////////////////////////

void SPI_Init(const uint8_t spi, const uint32_t mode, const uint32_t clock_divider)
{
	spi_register[spi].control = ((mode & 0x03) << 1);
20002c4c:	00052840 	sll	a1,a1,0x1
20002c50:	ac850000 	sw	a1,0(a0)
	spi_register[spi].clk_div = clock_divider & 0xFFFFFFFC;
20002c54:	ac820004 	sw	v0,4(a0)
}
20002c58:	03e00008 	jr	ra
20002c5c:	00000000 	nop

20002c60 <SPI_Swap>:
}

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
20002c60:	308400ff 	andi	a0,a0,0xff

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002c64:	3c028000 	lui	v0,0x8000
20002c68:	00042200 	sll	a0,a0,0x8
20002c6c:	34420a00 	ori	v0,v0,0xa00
20002c70:	00822021 	addu	a0,a0,v0
}

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
20002c74:	30a500ff 	andi	a1,a1,0xff

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002c78:	8c820000 	lw	v0,0(a0)
20002c7c:	00000000 	nop

///////////////////////////////////////////////////////////////////////////////

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
	while(!SPI_Ready(spi));
20002c80:	30420001 	andi	v0,v0,0x1
20002c84:	1040fffc 	beqz	v0,20002c78 <SPI_Swap+0x18>
20002c88:	00000000 	nop
	spi_register[spi].data = data;
20002c8c:	ac850008 	sw	a1,8(a0)

///////////////////////////////////////////////////////////////////////////////

boolean_t SPI_Ready(const uint8_t spi)
{
	return spi_register[spi].control & 0x01;
20002c90:	8c820000 	lw	v0,0(a0)
20002c94:	00000000 	nop

uint8_t SPI_Swap(const uint8_t spi, const uint8_t data)
{
	while(!SPI_Ready(spi));
	spi_register[spi].data = data;
	while(!SPI_Ready(spi));
20002c98:	30420001 	andi	v0,v0,0x1
20002c9c:	1040fffc 	beqz	v0,20002c90 <SPI_Swap+0x30>
20002ca0:	00000000 	nop
	return spi_register[spi].data;
20002ca4:	8c820008 	lw	v0,8(a0)
}
20002ca8:	03e00008 	jr	ra
20002cac:	304200ff 	andi	v0,v0,0xff

20002cb0 <Segment_Clear_Decimal>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Clear_Decimal(const segment_digit_t digit)
{
20002cb0:	27bdffe0 	addiu	sp,sp,-32
20002cb4:	afb10018 	sw	s1,24(sp)
20002cb8:	afb00014 	sw	s0,20(sp)
20002cbc:	3091ffff 	andi	s1,a0,0xffff
20002cc0:	309000ff 	andi	s0,a0,0xff
20002cc4:	afbf001c 	sw	ra,28(sp)
20002cc8:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002ccc:	12000005 	beqz	s0,20002ce4 <Segment_Clear_Decimal+0x34>
20002cd0:	00118a02 	srl	s1,s1,0x8
20002cd4:	3c044000 	lui	a0,0x4000
20002cd8:	24840000 	addiu	a0,a0,0
20002cdc:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002ce0:	24050056 	li	a1,86
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002ce4:	2e220004 	sltiu	v0,s1,4
20002ce8:	14400006 	bnez	v0,20002d04 <Segment_Clear_Decimal+0x54>
20002cec:	3c024000 	lui	v0,0x4000
20002cf0:	3c044000 	lui	a0,0x4000
20002cf4:	24840000 	addiu	a0,a0,0
20002cf8:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002cfc:	24050057 	li	a1,87

	segment_register[digit.segment].decimals &= ~segment_decimal[digit.digit];
20002d00:	3c024000 	lui	v0,0x4000
20002d04:	24420028 	addiu	v0,v0,40
20002d08:	00118880 	sll	s1,s1,0x2
20002d0c:	02228821 	addu	s1,s1,v0
20002d10:	3c028000 	lui	v0,0x8000
20002d14:	34420900 	ori	v0,v0,0x900
20002d18:	00108200 	sll	s0,s0,0x8
20002d1c:	02028021 	addu	s0,s0,v0
20002d20:	8e220000 	lw	v0,0(s1)
20002d24:	8e030008 	lw	v1,8(s0)
20002d28:	00021027 	nor	v0,zero,v0
}
20002d2c:	8fbf001c 	lw	ra,28(sp)
void Segment_Clear_Decimal(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].decimals &= ~segment_decimal[digit.digit];
20002d30:	00431024 	and	v0,v0,v1
20002d34:	ae020008 	sw	v0,8(s0)
}
20002d38:	8fb10018 	lw	s1,24(sp)
20002d3c:	8fb00014 	lw	s0,20(sp)
20002d40:	03e00008 	jr	ra
20002d44:	27bd0020 	addiu	sp,sp,32

20002d48 <Segment_Set_Decimal>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Set_Decimal(const segment_digit_t digit)
{
20002d48:	27bdffe0 	addiu	sp,sp,-32
20002d4c:	afb10018 	sw	s1,24(sp)
20002d50:	afb00014 	sw	s0,20(sp)
20002d54:	309100ff 	andi	s1,a0,0xff
20002d58:	3090ffff 	andi	s0,a0,0xffff
20002d5c:	afbf001c 	sw	ra,28(sp)
20002d60:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002d64:	12200005 	beqz	s1,20002d7c <Segment_Set_Decimal+0x34>
20002d68:	00108202 	srl	s0,s0,0x8
20002d6c:	3c044000 	lui	a0,0x4000
20002d70:	24840000 	addiu	a0,a0,0
20002d74:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002d78:	2405004c 	li	a1,76
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002d7c:	2e020004 	sltiu	v0,s0,4
20002d80:	14400006 	bnez	v0,20002d9c <Segment_Set_Decimal+0x54>
20002d84:	3c028000 	lui	v0,0x8000
20002d88:	3c044000 	lui	a0,0x4000
20002d8c:	24840000 	addiu	a0,a0,0
20002d90:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002d94:	2405004d 	li	a1,77

	segment_register[digit.segment].decimals |= segment_decimal[digit.digit];
20002d98:	3c028000 	lui	v0,0x8000
20002d9c:	34420900 	ori	v0,v0,0x900
20002da0:	00118a00 	sll	s1,s1,0x8
20002da4:	02228821 	addu	s1,s1,v0
20002da8:	3c024000 	lui	v0,0x4000
20002dac:	24420028 	addiu	v0,v0,40
20002db0:	00108080 	sll	s0,s0,0x2
20002db4:	02028021 	addu	s0,s0,v0
20002db8:	8e230008 	lw	v1,8(s1)
20002dbc:	8e020000 	lw	v0,0(s0)
}
20002dc0:	8fbf001c 	lw	ra,28(sp)
void Segment_Set_Decimal(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].decimals |= segment_decimal[digit.digit];
20002dc4:	00621025 	or	v0,v1,v0
20002dc8:	ae220008 	sw	v0,8(s1)
}
20002dcc:	8fb00014 	lw	s0,20(sp)
20002dd0:	8fb10018 	lw	s1,24(sp)
20002dd4:	03e00008 	jr	ra
20002dd8:	27bd0020 	addiu	sp,sp,32

20002ddc <Segment_Write>:
}

///////////////////////////////////////////////////////////////////////////////

void Segment_Write(const segment_digit_t digit, const uint8_t value)
{
20002ddc:	27bdffe0 	addiu	sp,sp,-32
20002de0:	afb10014 	sw	s1,20(sp)
20002de4:	afb00010 	sw	s0,16(sp)
20002de8:	3091ffff 	andi	s1,a0,0xffff
20002dec:	309000ff 	andi	s0,a0,0xff
20002df0:	afb20018 	sw	s2,24(sp)
20002df4:	afbf001c 	sw	ra,28(sp)
20002df8:	a7a40020 	sh	a0,32(sp)
20002dfc:	30b200ff 	andi	s2,a1,0xff
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002e00:	12000005 	beqz	s0,20002e18 <Segment_Write+0x3c>
20002e04:	00118a02 	srl	s1,s1,0x8
20002e08:	3c044000 	lui	a0,0x4000
20002e0c:	24840000 	addiu	a0,a0,0
20002e10:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002e14:	24050041 	li	a1,65
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002e18:	2e220004 	sltiu	v0,s1,4
20002e1c:	14400006 	bnez	v0,20002e38 <Segment_Write+0x5c>
20002e20:	3c024000 	lui	v0,0x4000
20002e24:	3c044000 	lui	a0,0x4000
20002e28:	24840000 	addiu	a0,a0,0
20002e2c:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002e30:	24050042 	li	a1,66

	segment_register[digit.segment].values &= ~segment_value[digit.digit];
20002e34:	3c024000 	lui	v0,0x4000
20002e38:	00118880 	sll	s1,s1,0x2
20002e3c:	24420038 	addiu	v0,v0,56
20002e40:	3c038000 	lui	v1,0x8000
20002e44:	02221021 	addu	v0,s1,v0
20002e48:	34630900 	ori	v1,v1,0x900
20002e4c:	00108200 	sll	s0,s0,0x8
20002e50:	02038021 	addu	s0,s0,v1
20002e54:	8c420000 	lw	v0,0(v0)
20002e58:	8e030004 	lw	v1,4(s0)
20002e5c:	00021027 	nor	v0,zero,v0
20002e60:	00431024 	and	v0,v0,v1
20002e64:	ae020004 	sw	v0,4(s0)
	segment_register[digit.segment].values |= (value << (digit.digit * 4));
20002e68:	8e020004 	lw	v0,4(s0)
20002e6c:	02328804 	sllv	s1,s2,s1
}
20002e70:	8fbf001c 	lw	ra,28(sp)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].values &= ~segment_value[digit.digit];
	segment_register[digit.segment].values |= (value << (digit.digit * 4));
20002e74:	02228825 	or	s1,s1,v0
20002e78:	ae110004 	sw	s1,4(s0)
}
20002e7c:	8fb20018 	lw	s2,24(sp)
20002e80:	8fb10014 	lw	s1,20(sp)
20002e84:	8fb00010 	lw	s0,16(sp)
20002e88:	03e00008 	jr	ra
20002e8c:	27bd0020 	addiu	sp,sp,32

20002e90 <Segment_Enable>:
											(1 << 2), (1 << 3) };

///////////////////////////////////////////////////////////////////////////////

void Segment_Enable(const segment_digit_t digit)
{
20002e90:	27bdffe0 	addiu	sp,sp,-32
20002e94:	afb10018 	sw	s1,24(sp)
20002e98:	afb00014 	sw	s0,20(sp)
20002e9c:	309100ff 	andi	s1,a0,0xff
20002ea0:	3090ffff 	andi	s0,a0,0xffff
20002ea4:	afbf001c 	sw	ra,28(sp)
20002ea8:	a7a40020 	sh	a0,32(sp)
	TTE_DEBUG_ASSERT(digit.segment < 1);
20002eac:	12200005 	beqz	s1,20002ec4 <Segment_Enable+0x34>
20002eb0:	00108202 	srl	s0,s0,0x8
20002eb4:	3c044000 	lui	a0,0x4000
20002eb8:	24840000 	addiu	a0,a0,0
20002ebc:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002ec0:	2405002d 	li	a1,45
	TTE_DEBUG_ASSERT(digit.digit < 4);
20002ec4:	2e020004 	sltiu	v0,s0,4
20002ec8:	14400006 	bnez	v0,20002ee4 <Segment_Enable+0x54>
20002ecc:	3c028000 	lui	v0,0x8000
20002ed0:	3c044000 	lui	a0,0x4000
20002ed4:	24840000 	addiu	a0,a0,0
20002ed8:	0c000056 	jal	20000158 <DEBUG_Assert_Failed>
20002edc:	2405002e 	li	a1,46

	segment_register[digit.segment].enabled |= segment_enabled[digit.digit];
20002ee0:	3c028000 	lui	v0,0x8000
20002ee4:	34420900 	ori	v0,v0,0x900
20002ee8:	00118a00 	sll	s1,s1,0x8
20002eec:	02228821 	addu	s1,s1,v0
20002ef0:	3c024000 	lui	v0,0x4000
20002ef4:	24420048 	addiu	v0,v0,72
20002ef8:	00108080 	sll	s0,s0,0x2
20002efc:	02028021 	addu	s0,s0,v0
20002f00:	8e230000 	lw	v1,0(s1)
20002f04:	8e020000 	lw	v0,0(s0)
}
20002f08:	8fbf001c 	lw	ra,28(sp)
void Segment_Enable(const segment_digit_t digit)
{
	TTE_DEBUG_ASSERT(digit.segment < 1);
	TTE_DEBUG_ASSERT(digit.digit < 4);

	segment_register[digit.segment].enabled |= segment_enabled[digit.digit];
20002f0c:	00621025 	or	v0,v1,v0
20002f10:	ae220000 	sw	v0,0(s1)
}
20002f14:	8fb00014 	lw	s0,20(sp)
20002f18:	8fb10018 	lw	s1,24(sp)
20002f1c:	03e00008 	jr	ra
20002f20:	27bd0020 	addiu	sp,sp,32

20002f24 <Device_Add>:
20002f24:	3c034000 	lui	v1,0x4000
20002f28:	8c6501cc 	lw	a1,460(v1)
20002f2c:	00000000 	nop
20002f30:	14a00004 	bnez	a1,20002f44 <Device_Add+0x20>
20002f34:	2402ffff 	li	v0,-1
20002f38:	ac6401cc 	sw	a0,460(v1)
20002f3c:	00001021 	move	v0,zero
20002f40:	3c034000 	lui	v1,0x4000
20002f44:	246301cc 	addiu	v1,v1,460
20002f48:	8c650004 	lw	a1,4(v1)
20002f4c:	00000000 	nop
20002f50:	14a00003 	bnez	a1,20002f60 <Device_Add+0x3c>
20002f54:	00000000 	nop
20002f58:	ac640004 	sw	a0,4(v1)
20002f5c:	24020001 	li	v0,1
20002f60:	3c034000 	lui	v1,0x4000
20002f64:	246301cc 	addiu	v1,v1,460
20002f68:	8c650008 	lw	a1,8(v1)
20002f6c:	00000000 	nop
20002f70:	14a00003 	bnez	a1,20002f80 <Device_Add+0x5c>
20002f74:	00000000 	nop
20002f78:	ac640008 	sw	a0,8(v1)
20002f7c:	24020002 	li	v0,2
20002f80:	3c034000 	lui	v1,0x4000
20002f84:	246301cc 	addiu	v1,v1,460
20002f88:	8c65000c 	lw	a1,12(v1)
20002f8c:	00000000 	nop
20002f90:	14a00003 	bnez	a1,20002fa0 <Device_Add+0x7c>
20002f94:	00000000 	nop
20002f98:	ac64000c 	sw	a0,12(v1)
20002f9c:	24020003 	li	v0,3
20002fa0:	03e00008 	jr	ra
20002fa4:	00000000 	nop
